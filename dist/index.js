/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractSDC: () => (/* reexport safe */ _simpleDomControl_AbstractSDC_js__WEBPACK_IMPORTED_MODULE_1__.AbstractSDC),\n/* harmony export */   allOff: () => (/* reexport safe */ _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.allOff),\n/* harmony export */   app: () => (/* reexport safe */ _simpleDomControl_sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app),\n/* harmony export */   checkIfParamNumberBoolOrString: () => (/* reexport safe */ _simpleDomControl_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.checkIfParamNumberBoolOrString),\n/* harmony export */   clearErrorsInForm: () => (/* reexport safe */ _simpleDomControl_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.clearErrorsInForm),\n/* harmony export */   controllerFactory: () => (/* reexport safe */ _simpleDomControl_sdc_controller_js__WEBPACK_IMPORTED_MODULE_4__.controllerFactory),\n/* harmony export */   on: () => (/* reexport safe */ _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.on),\n/* harmony export */   runControlFlowFunctions: () => (/* reexport safe */ _simpleDomControl_sdc_controller_js__WEBPACK_IMPORTED_MODULE_4__.runControlFlowFunctions),\n/* harmony export */   setErrorsInForm: () => (/* reexport safe */ _simpleDomControl_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.setErrorsInForm),\n/* harmony export */   setEvent: () => (/* reexport safe */ _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.setEvent),\n/* harmony export */   socketReconnect: () => (/* binding */ socketReconnect),\n/* harmony export */   test_utils: () => (/* binding */ test_utils),\n/* harmony export */   trigger: () => (/* reexport safe */ _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.trigger)\n/* harmony export */ });\n/* harmony import */ var _simpleDomControl_sdc_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./simpleDomControl/sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/* harmony import */ var _simpleDomControl_AbstractSDC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simpleDomControl/AbstractSDC.js */ \"./src/simpleDomControl/AbstractSDC.js\");\n/* harmony import */ var _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./simpleDomControl/sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n/* harmony import */ var _simpleDomControl_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./simpleDomControl/sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _simpleDomControl_sdc_controller_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simpleDomControl/sdc_controller.js */ \"./src/simpleDomControl/sdc_controller.js\");\n/* harmony import */ var _simpleDomControl_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./simpleDomControl/sdc_server_call.js */ \"./src/simpleDomControl/sdc_server_call.js\");\n/* harmony import */ var _simpleDomControl_sdc_test_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./simpleDomControl/sdc_test_utils.js */ \"./src/simpleDomControl/sdc_test_utils.js\");\n\n\n\n\n\n\n\nconst socketReconnect = _simpleDomControl_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_5__.close;\nconst test_utils = {\n  get_controller: _simpleDomControl_sdc_test_utils_js__WEBPACK_IMPORTED_MODULE_6__.get_controller,\n  getCsrfToken: _simpleDomControl_sdc_test_utils_js__WEBPACK_IMPORTED_MODULE_6__.getCsrfToken,\n  controllerFromTestHtml: _simpleDomControl_sdc_test_utils_js__WEBPACK_IMPORTED_MODULE_6__.controllerFromTestHtml\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBbUQ7QUFDVztBQUNpQjtBQUNvQztBQUNuQjtBQUNyQztBQUM4QztBQUV6RyxNQUFNZSxlQUFlLEdBQUdKLHVFQUFLO0FBQzdCLE1BQU1LLFVBQVUsR0FBRztFQUFDSixjQUFjO0VBQUVDLFlBQVk7RUFBRUMsc0JBQXNCQSx5RkFBQUE7QUFBQSxDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2RjX2NsaWVudC8uL3NyYy9pbmRleC5qcz9iNjM1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwfSBmcm9tICcuL3NpbXBsZURvbUNvbnRyb2wvc2RjX21haW4uanMnO1xuaW1wb3J0IHtBYnN0cmFjdFNEQ30gZnJvbSAnLi9zaW1wbGVEb21Db250cm9sL0Fic3RyYWN0U0RDLmpzJztcbmltcG9ydCB7b24sIHRyaWdnZXIsIGFsbE9mZiwgc2V0RXZlbnR9IGZyb20gJy4vc2ltcGxlRG9tQ29udHJvbC9zZGNfZXZlbnRzLmpzJztcbmltcG9ydCB7Y2xlYXJFcnJvcnNJbkZvcm0sIHNldEVycm9yc0luRm9ybSwgY2hlY2tJZlBhcmFtTnVtYmVyQm9vbE9yU3RyaW5nfSBmcm9tICcuL3NpbXBsZURvbUNvbnRyb2wvc2RjX3V0aWxzLmpzJztcbmltcG9ydCB7Y29udHJvbGxlckZhY3RvcnksIHJ1bkNvbnRyb2xGbG93RnVuY3Rpb25zfSBmcm9tICcuL3NpbXBsZURvbUNvbnRyb2wvc2RjX2NvbnRyb2xsZXIuanMnO1xuaW1wb3J0IHtjbG9zZX0gZnJvbSAnLi9zaW1wbGVEb21Db250cm9sL3NkY19zZXJ2ZXJfY2FsbC5qcydcbmltcG9ydCB7Z2V0X2NvbnRyb2xsZXIsIGdldENzcmZUb2tlbiwgY29udHJvbGxlckZyb21UZXN0SHRtbH0gZnJvbSAnLi9zaW1wbGVEb21Db250cm9sL3NkY190ZXN0X3V0aWxzLmpzJ1xuXG5jb25zdCBzb2NrZXRSZWNvbm5lY3QgPSBjbG9zZVxuY29uc3QgdGVzdF91dGlscyA9IHtnZXRfY29udHJvbGxlciwgZ2V0Q3NyZlRva2VuLCBjb250cm9sbGVyRnJvbVRlc3RIdG1sfTtcblxuZXhwb3J0IHtcbiAgICBhcHAsIEFic3RyYWN0U0RDLCBvbiwgdHJpZ2dlciwgYWxsT2ZmLCBzZXRFdmVudCwgY2xlYXJFcnJvcnNJbkZvcm0sIHNldEVycm9yc0luRm9ybSwgY2hlY2tJZlBhcmFtTnVtYmVyQm9vbE9yU3RyaW5nLFxuICAgIGNvbnRyb2xsZXJGYWN0b3J5LCBydW5Db250cm9sRmxvd0Z1bmN0aW9ucywgc29ja2V0UmVjb25uZWN0LCB0ZXN0X3V0aWxzXG59XG4iXSwibmFtZXMiOlsiYXBwIiwiQWJzdHJhY3RTREMiLCJvbiIsInRyaWdnZXIiLCJhbGxPZmYiLCJzZXRFdmVudCIsImNsZWFyRXJyb3JzSW5Gb3JtIiwic2V0RXJyb3JzSW5Gb3JtIiwiY2hlY2tJZlBhcmFtTnVtYmVyQm9vbE9yU3RyaW5nIiwiY29udHJvbGxlckZhY3RvcnkiLCJydW5Db250cm9sRmxvd0Z1bmN0aW9ucyIsImNsb3NlIiwiZ2V0X2NvbnRyb2xsZXIiLCJnZXRDc3JmVG9rZW4iLCJjb250cm9sbGVyRnJvbVRlc3RIdG1sIiwic29ja2V0UmVjb25uZWN0IiwidGVzdF91dGlscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/simpleDomControl/AbstractSDC.js":
/*!*********************************************!*\
  !*** ./src/simpleDomControl/AbstractSDC.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractSDC: () => (/* binding */ AbstractSDC)\n/* harmony export */ });\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_socket.js */ \"./src/simpleDomControl/sdc_socket.js\");\n/* harmony import */ var _sdc_server_call_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_server_call.js */ \"./src/simpleDomControl/sdc_server_call.js\");\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n\n\n\n\n\nclass AbstractSDC {\n  constructor() {\n    this._uuid = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.uuidv4)();\n    this.contentUrl = '';\n    this.contentReload = false;\n    this.parsedContentUrl = null;\n    this.events = [];\n    this.load_async = false;\n    this._isEventsSet = false;\n    this._allEvents = null;\n    this._urlParams = [];\n    this._models = [];\n\n    // ------------------ Old deprecated properties ----------------------\n    this._cssUrls = [];\n    this.afterShow = () => {\n      console.warn('afterShow is deprecated!!');\n    };\n    // -------------- End old deprecated properties ----------------------\n\n    /**\n     *\n     * @type {{string: AbstractSDC}}\n     */\n    this._mixins = {};\n\n    /**\n     * @type {string}\n     */\n    this._tagName = '';\n\n    /**\n     * @type {{string:AbstractSDC}}\n     */\n    this._childController = {};\n\n    /**\n     * @type {AbstractSDC}\n     */\n    this._parentController = null;\n\n    /**\n     * @type {boolean}\n     */\n    this._onLoadDone = false;\n\n    /**\n     * @type {jquery}\n     */\n    this.$container = null;\n\n    /**\n     *\n     * @type {boolean}\n     */\n    this._isMixin = false;\n  }\n\n  /**\n   *\n   * @param {string} method must be in {}\n   * @param {Array} args in arguments of\n   *\n   */\n  _runLifecycle(method, args) {\n    if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.DEBUG) {\n      console.debug(method, this._tagName);\n    }\n    let returnPromisses = [];\n    if (this._isMixin) {\n      return;\n    }\n    this._isMixin = true;\n    for (let mixinKey in this._mixins) {\n      let mixin = this._mixins[mixinKey];\n      if (typeof mixin[method] === 'function') {\n        returnPromisses.push(mixin[method].apply(this, args));\n      }\n    }\n    return Promise.all(returnPromisses).then(() => {\n      this._isMixin = false;\n    });\n  }\n  onInit() {\n    if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.DEBUG) {\n      console.DEBUG(Array.apply(null, arguments), this._tagName);\n    }\n  }\n  get parentController() {\n    return this._parentController;\n  }\n  get childController() {\n    return this._childController;\n  }\n  onLoad() {\n    return this._runLifecycle('onLoad', arguments);\n  }\n  willShow() {\n    return this._runLifecycle('willShow', arguments);\n  }\n  onRefresh() {\n    return this._runLifecycle('onRefresh', arguments);\n  }\n  onRemove() {\n    this._runLifecycle('onRemove', arguments);\n    return true;\n  }\n  remove() {\n    for (const model of this._models) {\n      model.close();\n    }\n    let _childController = this._childController;\n    for (let i in _childController) {\n      if (_childController.hasOwnProperty(i)) {\n        for (let cc of _childController[i]) {\n          if (!cc.remove()) {\n            return false;\n          }\n        }\n      }\n    }\n    if (!this.onRemove || this.onRemove()) {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_0__.allOff)(this);\n      const c_name = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.tagNameToCamelCase)(this._tagName);\n      if (this._parentController._childController[c_name]) {\n        let arr = this._parentController._childController[c_name];\n        for (let i = 0; i < arr.length; i++) {\n          if (arr[i] === this) {\n            arr.splice(i, 1);\n          }\n        }\n      }\n      this.$container.remove();\n      delete this;\n      return true;\n    }\n    return false;\n  }\n  controller_name() {\n    return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.tagNameToReadableName)(this._tagName);\n  }\n  addEvent(event, selector, handler) {\n    this.getEvents();\n    this._allEvents[event] = this._allEvents[event] || {};\n    this._allEvents[event][selector] = handler;\n  }\n  getEvents() {\n    if (this._allEvents) return this._allEvents;\n    let allEvents = [];\n    allEvents = allEvents.concat(this.events);\n    for (let mixinKey in this._mixins) {\n      let mixin = this._mixins[mixinKey];\n      if (Array.isArray(mixin.events)) {\n        allEvents = allEvents.concat(mixin.events);\n      }\n    }\n    return this._allEvents = _.merge(...allEvents);\n  }\n  post(url, args) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.post(this, url, args);\n  }\n  get(url, args) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.get(this, url, args);\n  }\n  submitForm(form, url, method) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.submitFormAndUpdateView(this, form, url, method);\n  }\n  serverCall(methode, args) {\n    let re = /sdc_view\\/([^/]+)/i;\n    let app = this.contentUrl.match(re);\n    if (!app || app.length < 2) {\n      console.error('To use the serverCall function the contentUrl must be set: ' + this.name);\n      return;\n    }\n    return (0,_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_3__.callServer)(app[1], this._tagName, this.parsedContentUrl, methode, args);\n  }\n\n  /**\n   *\n   * @param model_name {string | Number}\n   * @param model_query {Object}\n   * @constructor\n   */\n  newModel(model_name, model_query = {}) {\n    if (model_name instanceof Number && model_name.hasOwnProperty('load')) {\n      return model_name.load(this);\n    }\n    const model = new _sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__.Model(model_name, model_query);\n    this._models.push(model);\n    return model;\n  }\n\n  /**\n   *\n   * @param model_name {string}\n   * @param model_query {Object}\n   * @param values {Object}\n   * @constructor\n   */\n  updateModel(model_name, model_query = {}, values) {\n    let model = new _sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__.Model(model_name, model_query);\n    return model.load().then(() => {\n      model.values |= values;\n      model.save().then(() => {\n        model.close();\n        return model.values;\n      });\n    });\n  }\n\n  /**\n   * Adapter to this.$container.find\n   * @param {string} domSelector\n   */\n  find(domSelector) {\n    return this.$container.find(domSelector);\n  }\n  refresh() {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.refresh(this.$container, this);\n  }\n  reload() {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.reloadController(this);\n  }\n  reconcile($virtualNode, $realNode = null) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.reconcile(this, $virtualNode, $realNode);\n  }\n  submitModelFormDistributor($form, e) {\n    if (typeof this._submitModelForm === 'function') {\n      return this._submitModelForm($form, e);\n    }\n    if (typeof this.submitModelForm === 'function') {\n      return this.submitModelForm($form, e);\n    }\n    return this.defaultSubmitModelForm($form, e);\n  }\n  iterateAllChildren() {\n    let _childController = this._childController;\n    let res = [];\n    for (let i in _childController) {\n      if (_childController.hasOwnProperty(i)) {\n        for (let cc of _childController[i]) {\n          res.push(cc);\n          res.push(...cc.iterateAllChildren());\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Model Form Events\n   */\n  defaultSubmitModelForm($form, e) {\n    let p_list = [];\n    if (!this._isMixin) {\n      e.stopPropagation();\n      e.preventDefault();\n      let model = $form.data('model');\n      const values = model.syncForm($form);\n      for (let instance_value of values) {\n        p_list.push(new Promise((resolve, reject) => {\n          let prom;\n          if (instance_value.pk !== null && instance_value.pk >= 0) {\n            prom = model.save(instance_value.pk);\n          } else {\n            prom = model.create(instance_value);\n          }\n          prom.then(res => {\n            (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.clearErrorsInForm)($form);\n            this.submit_model_form_success && this.submit_model_form_success(res[0]);\n            for (const controller of this.iterateAllChildren()) {\n              controller.submit_model_form_success && controller.submit_model_form_success(res[0]);\n            }\n            resolve(res);\n          }).catch(data => {\n            (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.setErrorsInForm)($form, $(data.html));\n            this.submit_model_form_error && this.submit_model_form_error(data);\n            for (const controller of this.iterateAllChildren()) {\n              controller.submit_model_form_error && controller.submit_model_form_error(data);\n            }\n            reject(data);\n          });\n        }));\n      }\n    }\n    return Promise.all(p_list).then(res => {\n      return Object.assign({}, ...res.flat());\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/AbstractSDC.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_controller.js":
/*!************************************************!*\
  !*** ./src/simpleDomControl/sdc_controller.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Global: () => (/* binding */ Global),\n/* harmony export */   controllerFactory: () => (/* binding */ controllerFactory),\n/* harmony export */   controllerList: () => (/* binding */ controllerList),\n/* harmony export */   resetChildren: () => (/* binding */ resetChildren),\n/* harmony export */   runControlFlowFunctions: () => (/* binding */ runControlFlowFunctions),\n/* harmony export */   runRefresh: () => (/* binding */ runRefresh),\n/* harmony export */   tagList: () => (/* binding */ tagList)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./src/simpleDomControl/sdc_view.js\");\n/* harmony import */ var _sdc_params_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_params.js */ \"./src/simpleDomControl/sdc_params.js\");\n\n\n\nlet Global = {};\nlet controllerList = {};\nfunction tagList() {\n  return Object.keys(controllerList);\n}\nfunction prepareMixins(superTagNameList, tagName) {\n  superTagNameList = superTagNameList.concat(controllerList[tagName][1]);\n  superTagNameList = superTagNameList.filter((value, index, self) => {\n    return self.indexOf(value) === index;\n  });\n  let hasAdded = true;\n  while (hasAdded) {\n    hasAdded = false;\n    for (let tag of superTagNameList) {\n      for (let newTag of controllerList[tag][1]) {\n        if (!superTagNameList.includes(newTag)) {\n          superTagNameList.push(newTag);\n          hasAdded = true;\n        }\n      }\n    }\n  }\n  return superTagNameList;\n}\n\n/**\n * setParentController sets the parent controller as property: 'parentController'\n * to the child controller. Also, it adds the child controller to the property list:\n * 'parentController' to the parent controller\n *\n * @param {AbstractSDC} parentController - js controller instance, controller of the parent DOM of the controllers DOM\n * @param {AbstractSDC} controller - js controller instance\n * @return {AbstractSDC} - parentController\n */\nfunction setParentController(parentController, controller) {\n  if (parentController) {\n    let controllerName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(controller._tagName);\n    if (!parentController._childController[controllerName]) {\n      parentController._childController[controllerName] = [];\n    }\n    parentController._childController[controllerName].push(controller);\n  }\n  return controller._parentController = parentController;\n}\n\n/**\n * resetChildren resets all children of a controller.\n *\n * @param {AbstractSDC} parentController\n */\nfunction resetChildren(parentController) {\n  parentController._childController = {};\n  parentController.find(`.${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.CONTROLLER_CLASS}`).each(function () {\n    const $this = $(this);\n    const cController = (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.getController)($this);\n    if (cController === parentController) {\n      setParentController(parentController, cController);\n    }\n  });\n}\n\n/**\n * controllerFactoryInstance it generates a controller instance\n * depending if the controller is registered as a global controller. It sets the\n * $container object to the jQuery representation of the tag.\n *\n * It handles the init parameter by the data values of the DOM.\n *\n * It handles the super extensions.\n *\n * @param {AbstractSDC} parentController - Controller of the parent DOM\n * @param {jquery} $element - The current DOM jQuery\n * @param {string} tagName - the registered tag name of the current DOM\n * @param {string} superTagNameList - tag names of super controller\n * @return {AbstractSDC} -  new Controller\n */\nfunction controllerFactoryInstance(parentController, $element, tagName, superTagNameList) {\n  let mixinControllerClass = [];\n  superTagNameList = prepareMixins(superTagNameList, tagName);\n  for (let superTagName of superTagNameList) {\n    mixinControllerClass.push(controllerList[superTagName][0]);\n  }\n  let controllerClass = controllerList[tagName][0];\n  let controller = new ((0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.agileAggregation)(controllerClass, ...mixinControllerClass))();\n  controller._tagName = tagName;\n  setParentController(parentController, controller);\n  controller.$container = $element;\n  (0,_sdc_params_js__WEBPACK_IMPORTED_MODULE_2__.runOnInitWithParameter)($element, controller);\n  return controller;\n}\n\n/**\n * controllerFactory it either generates a controller or takes a globe instance\n * depending if the controller is registered as a global controller. It sets the\n * $container object to the jQuery representation of the tag.\n *\n * Remember Global controller can not have a super controller!\n *\n * @param {AbstractSDC} parentController - Controller of the parent DOM\n * @param {jquery} $element - The current DOM jQuery\n * @param {string} tagName - the registered tag name of the current DOM\n * @param {string} superTagNameList - tag names of super controller\n * @return {AbstractSDC} -  new Controller\n */\nfunction controllerFactory(parentController, $element, tagName, superTagNameList) {\n  let gTagName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(tagName);\n  if (Global[gTagName]) {\n    let controller = Global[gTagName];\n    setParentController(parentController, controller);\n    controller.$container = $element;\n    return controller;\n  }\n  return controllerFactoryInstance(parentController, $element, tagName, superTagNameList);\n}\n\n/**\n * runControllerShow first runs onLoad and fill content for all sub\n * controller. Only if all the sub controller are loaded the willShow\n * control flow function gets called.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @param {jquery} $html - jQuery loaded content\n * @return {Promise<*>} - return of the onLoad function\n */\nfunction runControllerShow(controller, $html) {\n  return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.runControllerFillContent)(controller, $html).then(function (args) {\n    args = args || true;\n    if (controller.willShow) {\n      let loadPromiseOrContent = controller.willShow();\n      if (loadPromiseOrContent instanceof Promise) {\n        return loadPromiseOrContent.then(function () {\n          return args;\n        });\n      }\n    }\n    return args;\n  });\n}\n\n/**\n * runControllerLoad Calls the onLoad function of the controller.\n * This function is called before the HTML is set to the page.\n * The parameter is a list of children of the tag and the registered tag.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @return {Promise<*>} - return of the onLoad function\n */\nfunction runControllerLoad(controller) {\n  return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.loadFilesFromController)(controller).then(html => {\n    if (!controller.onLoad || controller._onLoadDone) {\n      return html;\n    }\n    controller._onLoadDone = true;\n    let loadPromise = controller.onLoad(html);\n    return (loadPromise || (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)()).then(() => {\n      return html;\n    });\n  });\n}\n\n/**\n * runControlFlowFunctions runs the control flow functions:\n * 1. onLoad()\n * 2. fill content\n * 3. willShow(dom parameter)\n * 4. refresh()\n *\n * @param controller\n */\nfunction runControlFlowFunctions(controller) {\n  const prom_controller = runControllerLoad(controller).then(function ($html) {\n    return runControllerShow(controller, $html);\n  }).then(() => {\n    return runRefresh(controller);\n  }).catch(function ($html) {\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.runControllerFillContent)(controller, $html);\n  });\n  if (controller.load_async) {\n    return Promise.resolve();\n  }\n  return prom_controller;\n}\n\n/**\n *\n * @param {AbstractSDC} controller\n */\nfunction runRefresh(controller) {\n  return controller.refresh && controller.refresh();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_controller.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_dom_events.js":
/*!************************************************!*\
  !*** ./src/simpleDomControl/sdc_dom_events.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STD_EVENT_BLACK_LIST: () => (/* binding */ STD_EVENT_BLACK_LIST),\n/* harmony export */   STD_EVENT_LIST: () => (/* binding */ STD_EVENT_LIST),\n/* harmony export */   initEvents: () => (/* binding */ initEvents),\n/* harmony export */   setControllerEvents: () => (/* binding */ setControllerEvents),\n/* harmony export */   windowEventHandler: () => (/* binding */ windowEventHandler)\n/* harmony export */ });\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_view.js */ \"./src/simpleDomControl/sdc_view.js\");\n\nconst STD_EVENT_BLACK_LIST = ['onbeforeunload'];\nconst STD_EVENT_LIST = Object.keys(window).filter(key => /^on/.test(key) && !STD_EVENT_BLACK_LIST.includes(key)).map(x => x.slice(2));\nfunction windowEventHandler(event) {\n  let ev_type = event.type;\n  if (event.hasOwnProperty('namespace') && event.namespace && event.namespace.length) ev_type += `.${event.namespace}`;\n  let $elm = $(event.target);\n  let controller = null;\n  let is_done = false;\n  let is_last_elem = false;\n  event.stopImmediatePropagation = () => is_last_elem = true;\n  event.stopPropagation = () => is_last_elem = is_done = true;\n  while ($elm.length) {\n    let attrs = $elm.attr(`sdc_${ev_type}`);\n    if (attrs) {\n      if (!controller) {\n        controller = (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_0__.getController)($elm);\n        if (!controller) return;\n      }\n      while (controller) {\n        attrs.split(' ').forEach(attr => {\n          if (is_done) return;\n          let handler = null;\n          if (typeof attr === 'function') {\n            handler = attr;\n          } else if (typeof controller[attr] === 'function') {\n            handler = controller[attr];\n          } else if (typeof attr === 'string' && attr.startsWith('this.event_')) {\n            handler = controller.getEvents()[ev_type];\n            if (!handler) {\n              return;\n            }\n            handler = handler[attr.slice('this.event_'.length)];\n            if (!handler) {\n              return;\n            }\n          }\n          handler && handler.call(controller, $elm, event);\n        });\n        if (is_last_elem) return;\n        controller = controller._parentController;\n      }\n    }\n    if (is_done) return;\n    $elm = $elm.parent();\n  }\n  return {\n    res: true\n  };\n}\n\n/**\n *\n */\nfunction initEvents() {\n  const $window = $(window);\n  STD_EVENT_LIST.forEach(ev_type => {\n    $window.off(ev_type).on(ev_type, windowEventHandler);\n  });\n}\n\n/**\n *\n * @param {AbstractSDC} controller\n */\nfunction setControllerEvents(controller) {\n  if (controller._isEventsSet) {\n    return;\n  }\n  const events = controller.getEvents();\n  for (let ev_type in events) {\n    if (events.hasOwnProperty(ev_type)) {\n      let eventList = events[ev_type];\n      for (let domSelector in eventList) {\n        if (eventList.hasOwnProperty(domSelector)) {\n          controller.find(domSelector).each(function () {\n            let $elements = $(this);\n            let event_list = $elements.attr(`sdc_${ev_type}`) || null;\n            if (!event_list) event_list = [];else event_list = event_list.split(' ');\n            const new_key = `this.event_${domSelector}`;\n            if (event_list.indexOf(new_key) === -1) {\n              event_list.push(new_key);\n              $elements.attr(`sdc_${ev_type}`, event_list.join(' '));\n            }\n          });\n        }\n      }\n    }\n  }\n  // TODO: Is it needed\n  //controller._isEventsSet = true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_dom_events.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_events.js":
/*!********************************************!*\
  !*** ./src/simpleDomControl/sdc_events.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allOff: () => (/* binding */ allOff),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   setEvent: () => (/* binding */ setEvent),\n/* harmony export */   trigger: () => (/* binding */ trigger)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n\n\n/**\n * A list of handler (controller) for the registered events.\n * @type {{}}\n */\nlet handlerList = {};\n\n/**\n * eventList is a map connection the event to a responsing function name.\n * @type {{}}\n */\nlet eventList = {};\n\n/**\n * on is a function to register a controller to a event. The controller has to\n * implement the the handler function. The handler functions by default has the same\n * name as the event. You can use the app.events.setEvent function to register a\n * event with a different named function.\n *\n * @param {string} name - the event name String\n * @param {AbstractSDC} controller -  a instance of a JavaScript controller object.\n */\nfunction on(name, controller) {\n  setEvent(name);\n  if (!eventList.hasOwnProperty(name)) {\n    return console.log('No event: ' + name, controller);\n  }\n  let funcName = eventList[name];\n  if (!controller[funcName]) {\n    return console.log('No event handler: ' + name, controller);\n  }\n  handlerList[name].push(controller);\n}\n\n/**\n * setEvent allows you to register a event with a function with a different\n * name as the event.\n *\n * @param {string} name - event name\n * @param {string} functionName - function name\n */\nfunction setEvent(name, functionName) {\n  if (!functionName) {\n    functionName = name;\n  }\n  if (!eventList[name]) {\n    eventList[name] = functionName;\n    handlerList[name] = [];\n  }\n}\n\n/**\n * allOff is to remove all events of the controller instance\n * ! important before destroying the instance.\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n */\nfunction allOff(controller) {\n  for (let eventName in handlerList) {\n    if (handlerList.hasOwnProperty(eventName)) {\n      for (let i = handlerList[eventName].length; i >= 0; i--) {\n        if (controller === handlerList[eventName][i]) {\n          handlerList[eventName].splice(i, 1);\n        }\n      }\n    }\n  }\n}\n\n/**\n * trigger triggers the event. The handler function of all registered\n * controller gets called. The returned Promise returns a list with all\n * returned values.\n *\n * @param {string} name - event name\n * @returns {Promise<object>} - waits to return all return values of the handler\n */\nfunction trigger(name) {\n  let args = Array.apply(null, arguments);\n  name = args.shift();\n  if (!handlerList.hasOwnProperty(name) || !eventList.hasOwnProperty(name)) {\n    return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)();\n  }\n  let handler = handlerList[name];\n  let funcName = eventList[name];\n  let list = [];\n  for (let i = 0; i < handler.length; i++) {\n    let return_val = handler[i][funcName].apply(handler[i], args);\n    if (typeof return_val !== \"undefined\") {\n      list.push(return_val);\n    }\n  }\n  return Promise.all(list);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsR0FBR1MsT0FBTyxDQUFDUixNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3JDLElBQUlXLFVBQVUsR0FBR0YsT0FBTyxDQUFDVCxDQUFDLENBQUMsQ0FBQ0wsUUFBUSxDQUFDLENBQUNXLEtBQUssQ0FBQ0csT0FBTyxDQUFDVCxDQUFDLENBQUMsRUFBRUksSUFBSSxDQUFDO0lBQzdELElBQUksT0FBT08sVUFBVSxLQUFLLFdBQVcsRUFBRTtNQUNuQ0QsSUFBSSxDQUFDZCxJQUFJLENBQUNlLFVBQVUsQ0FBQztJQUN6QjtFQUNKO0VBRUEsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUNILElBQUksQ0FBQztBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NkY19jbGllbnQvLi9zcmMvc2ltcGxlRG9tQ29udHJvbC9zZGNfZXZlbnRzLmpzPzhiODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtwcm9taXNlRHVtbXlGYWN0b3J5fSBmcm9tIFwiLi9zZGNfdXRpbHMuanNcIjtcblxuXG4vKipcbiAqIEEgbGlzdCBvZiBoYW5kbGVyIChjb250cm9sbGVyKSBmb3IgdGhlIHJlZ2lzdGVyZWQgZXZlbnRzLlxuICogQHR5cGUge3t9fVxuICovXG5sZXQgaGFuZGxlckxpc3QgPSB7fTtcblxuLyoqXG4gKiBldmVudExpc3QgaXMgYSBtYXAgY29ubmVjdGlvbiB0aGUgZXZlbnQgdG8gYSByZXNwb25zaW5nIGZ1bmN0aW9uIG5hbWUuXG4gKiBAdHlwZSB7e319XG4gKi9cbmxldCBldmVudExpc3QgPSB7fTtcblxuLyoqXG4gKiBvbiBpcyBhIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGEgY29udHJvbGxlciB0byBhIGV2ZW50LiBUaGUgY29udHJvbGxlciBoYXMgdG9cbiAqIGltcGxlbWVudCB0aGUgdGhlIGhhbmRsZXIgZnVuY3Rpb24uIFRoZSBoYW5kbGVyIGZ1bmN0aW9ucyBieSBkZWZhdWx0IGhhcyB0aGUgc2FtZVxuICogbmFtZSBhcyB0aGUgZXZlbnQuIFlvdSBjYW4gdXNlIHRoZSBhcHAuZXZlbnRzLnNldEV2ZW50IGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGFcbiAqIGV2ZW50IHdpdGggYSBkaWZmZXJlbnQgbmFtZWQgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSB0aGUgZXZlbnQgbmFtZSBTdHJpbmdcbiAqIEBwYXJhbSB7QWJzdHJhY3RTREN9IGNvbnRyb2xsZXIgLSAgYSBpbnN0YW5jZSBvZiBhIEphdmFTY3JpcHQgY29udHJvbGxlciBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbihuYW1lLCBjb250cm9sbGVyKSB7XG4gICAgc2V0RXZlbnQobmFtZSk7XG4gICAgaWYgKCFldmVudExpc3QuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdObyBldmVudDogJyArIG5hbWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cblxuICAgIGxldCBmdW5jTmFtZSA9IGV2ZW50TGlzdFtuYW1lXTtcbiAgICBpZiAoIWNvbnRyb2xsZXJbZnVuY05hbWVdKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnTm8gZXZlbnQgaGFuZGxlcjogJyArIG5hbWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cblxuICAgIGhhbmRsZXJMaXN0W25hbWVdLnB1c2goY29udHJvbGxlcik7XG59XG5cbi8qKlxuICogc2V0RXZlbnQgYWxsb3dzIHlvdSB0byByZWdpc3RlciBhIGV2ZW50IHdpdGggYSBmdW5jdGlvbiB3aXRoIGEgZGlmZmVyZW50XG4gKiBuYW1lIGFzIHRoZSBldmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jdGlvbk5hbWUgLSBmdW5jdGlvbiBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFdmVudChuYW1lLCBmdW5jdGlvbk5hbWUpIHtcbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRMaXN0W25hbWVdKSB7XG4gICAgICAgIGV2ZW50TGlzdFtuYW1lXSA9IGZ1bmN0aW9uTmFtZTtcbiAgICAgICAgaGFuZGxlckxpc3RbbmFtZV0gPSBbXTtcbiAgICB9XG59XG5cbi8qKlxuICogYWxsT2ZmIGlzIHRvIHJlbW92ZSBhbGwgZXZlbnRzIG9mIHRoZSBjb250cm9sbGVyIGluc3RhbmNlXG4gKiAhIGltcG9ydGFudCBiZWZvcmUgZGVzdHJveWluZyB0aGUgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFNEQ30gY29udHJvbGxlciAtIGEgaW5zdGFuY2Ugb2YgYSBKYXZhU2NyaXB0IGNvbnRyb2xsZXIgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsT2ZmKGNvbnRyb2xsZXIpIHtcbiAgICBmb3IgKGxldCBldmVudE5hbWUgaW4gaGFuZGxlckxpc3QpIHtcbiAgICAgICAgaWYgKGhhbmRsZXJMaXN0Lmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBoYW5kbGVyTGlzdFtldmVudE5hbWVdLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlciA9PT0gaGFuZGxlckxpc3RbZXZlbnROYW1lXVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyTGlzdFtldmVudE5hbWVdLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogdHJpZ2dlciB0cmlnZ2VycyB0aGUgZXZlbnQuIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIG9mIGFsbCByZWdpc3RlcmVkXG4gKiBjb250cm9sbGVyIGdldHMgY2FsbGVkLiBUaGUgcmV0dXJuZWQgUHJvbWlzZSByZXR1cm5zIGEgbGlzdCB3aXRoIGFsbFxuICogcmV0dXJuZWQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gZXZlbnQgbmFtZVxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gLSB3YWl0cyB0byByZXR1cm4gYWxsIHJldHVybiB2YWx1ZXMgb2YgdGhlIGhhbmRsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIobmFtZSkge1xuICAgIGxldCBhcmdzID0gQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBuYW1lID0gYXJncy5zaGlmdCgpO1xuICAgIGlmKCFoYW5kbGVyTGlzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCAhZXZlbnRMaXN0Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlRHVtbXlGYWN0b3J5KCk7XG4gICAgfVxuICAgIGxldCBoYW5kbGVyID0gaGFuZGxlckxpc3RbbmFtZV07XG4gICAgbGV0IGZ1bmNOYW1lID0gZXZlbnRMaXN0W25hbWVdO1xuXG4gICAgbGV0IGxpc3QgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcmV0dXJuX3ZhbCA9IGhhbmRsZXJbaV1bZnVuY05hbWVdLmFwcGx5KGhhbmRsZXJbaV0sIGFyZ3MpO1xuICAgICAgICBpZiAodHlwZW9mIHJldHVybl92YWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChyZXR1cm5fdmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChsaXN0KTtcbn0iXSwibmFtZXMiOlsicHJvbWlzZUR1bW15RmFjdG9yeSIsImhhbmRsZXJMaXN0IiwiZXZlbnRMaXN0Iiwib24iLCJuYW1lIiwiY29udHJvbGxlciIsInNldEV2ZW50IiwiaGFzT3duUHJvcGVydHkiLCJjb25zb2xlIiwibG9nIiwiZnVuY05hbWUiLCJwdXNoIiwiZnVuY3Rpb25OYW1lIiwiYWxsT2ZmIiwiZXZlbnROYW1lIiwiaSIsImxlbmd0aCIsInNwbGljZSIsInRyaWdnZXIiLCJhcmdzIiwiQXJyYXkiLCJhcHBseSIsImFyZ3VtZW50cyIsInNoaWZ0IiwiaGFuZGxlciIsImxpc3QiLCJyZXR1cm5fdmFsIiwiUHJvbWlzZSIsImFsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_events.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_main.js":
/*!******************************************!*\
  !*** ./src/simpleDomControl/sdc_main.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   app: () => (/* binding */ app)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./src/simpleDomControl/sdc_view.js\");\n/* harmony import */ var _AbstractSDC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractSDC.js */ \"./src/simpleDomControl/AbstractSDC.js\");\n/* harmony import */ var _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_controller.js */ \"./src/simpleDomControl/sdc_controller.js\");\n/* harmony import */ var _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sdc_dom_events.js */ \"./src/simpleDomControl/sdc_dom_events.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_server_call_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sdc_server_call.js */ \"./src/simpleDomControl/sdc_server_call.js\");\n\n\n\n\n\n\n\n\nconst PROPERTIES_UPDATE = {\n  'classname': 'class'\n};\nlet sdcDomFragment = function (element, props) {\n  let $new_elem,\n    is_self = false;\n  if (typeof element === 'string') {\n    $new_elem = $(document.createElement(element));\n  } else {\n    const tagName = `this.${element.name}`;\n    $new_elem = $(document.createElement(tagName));\n    $new_elem.data('handler', element);\n    is_self = true;\n  }\n  if (props) {\n    Object.entries(props).forEach(([k, v]) => {\n      if (k.startsWith('on')) {\n        $new_elem[0].addEventListener(k.substring(2).toLowerCase(), v);\n      } else {\n        if (PROPERTIES_UPDATE[k.toLowerCase()]) {\n          k = PROPERTIES_UPDATE[k.toLowerCase()];\n        }\n        $new_elem[0].setAttribute(k, v);\n      }\n    });\n  }\n  if (is_self) {\n    $new_elem.addClass('_bind_to_update_handler _with_handler');\n  }\n  return $new_elem;\n};\nwindow.sdcDom = function (tagName, props, ...children) {\n  if (!tagName) {\n    return '';\n  }\n  const $new_elem = sdcDomFragment(tagName, props);\n  for (const c of children) {\n    $new_elem.append(c);\n  }\n  return $new_elem;\n};\nlet app = {\n  CSRF_TOKEN: window.CSRF_TOKEN || '',\n  LANGUAGE_CODE: window.LANGUAGE_CODE || 'en',\n  DEBUG: window.DEBUG || false,\n  VERSION: window.VERSION || '0.0',\n  tagNames: [],\n  Global: _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.Global,\n  rootController: null,\n  _isInit: false,\n  _origin_trigger: null,\n  init_sdc: () => {\n    if (!app._isInit) {\n      app._isInit = true;\n      if (!app._origin_trigger) {\n        app._origin_trigger = $.fn.trigger;\n        $.fn.trigger = function (event) {\n          const ev_type = {}.hasOwnProperty.call(event, \"type\") ? event.type : event;\n          if (!_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.STD_EVENT_LIST.includes(ev_type)) {\n            _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.STD_EVENT_LIST.push(ev_type);\n            $(window).on(ev_type, _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.windowEventHandler);\n          }\n          return app._origin_trigger.call(this, event);\n        };\n        app.updateJquery();\n      } else {\n        (0,_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_6__.close)();\n      }\n      (0,_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_6__.isConnected)();\n      (0,_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.initEvents)();\n      app.rootController = app.rootController || new _AbstractSDC_js__WEBPACK_IMPORTED_MODULE_2__.AbstractSDC();\n    }\n    app.tagNames = (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.tagList)();\n    for (let [tag, controller] of Object.entries(app.Global)) {\n      if (!controller.$container) _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.Global[tag].$container = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.getBody)();\n    }\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.replaceTagElementsInContainer)(app.tagNames, (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.getBody)(), app.rootController);\n  },\n  updateJquery: () => {\n    $.fn.safeReplace = function ($elem) {\n      return app.safeReplace($(this), $elem);\n    };\n    $.fn.safeEmpty = function () {\n      return app.safeEmpty($(this));\n    };\n    $.fn.safeRemove = function () {\n      return app.safeRemove($(this));\n    };\n  },\n  controllerToTag: Controller => {\n    let tagName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.camelCaseToTagName)(Controller.name);\n    return tagName.replace(/-controller$/, '');\n  },\n  /**\n   *\n   * @param {AbstractSDC} Controller\n   */\n  registerGlobal: Controller => {\n    let tagName = app.controllerToTag(Controller);\n    let globalController = new Controller();\n    _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName] = [globalController, []];\n    globalController._tagName = tagName;\n    window[(0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(tagName)] = _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.Global[(0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(tagName)] = globalController;\n  },\n  cleanCache: () => {\n    (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.cleanCache)();\n  },\n  /**\n   *\n   * @param {AbstractSDC} Controller\n   */\n  register: Controller => {\n    let tagName = app.controllerToTag(Controller);\n    _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName] = [Controller, []];\n    Controller.prototype._tagName = tagName;\n    return {\n      /**\n       *\n       * @param {Array<string>} mixins Controller tag names\n       */\n      addMixin: (...mixins) => {\n        for (let mixin of mixins) {\n          let mixinName;\n          if (typeof mixin === \"string\") {\n            mixinName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.camelCaseToTagName)(mixin);\n          } else if (mixin) {\n            mixinName = app.controllerToTag(mixin);\n          }\n          _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName][1].push(mixinName);\n        }\n      }\n    };\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @return {Promise}\n   */\n  post: (controller, url, args) => {\n    if (!args) {\n      args = {};\n    }\n    args.CSRF_TOKEN = app.CSRF_TOKEN;\n    return app.ajax(controller, url, params, $.post);\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @return {Promise}\n   */\n  get: (controller, url, args) => {\n    return app.ajax(controller, url, args, $.get);\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @param {function} method $.get or $.post\n   * @return {Promise}\n   */\n  ajax: (controller, url, args, method) => {\n    if (!args) {\n      args = {};\n    }\n    args.VERSION = app.VERSION;\n    args._method = args._method || 'api';\n    const p = new Promise((resolve, reject) => {\n      return method(url, args).then((a, b, c) => {\n        resolve(a, b, c);\n        if (a.status === 'redirect') {\n          (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_5__.trigger)('onNavLink', a['url-link']);\n        } else {\n          p.then(() => {\n            app.refresh(controller.$container);\n          });\n        }\n      }).catch(reject);\n    });\n    return p;\n  },\n  submitFormAndUpdateView: (controller, form, url, method) => {\n    let formData = new FormData(form);\n    const redirector = a => {\n      if (a['url-link']) {\n        (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_5__.trigger)('onNavLink', a['url-link']);\n      } else {\n        window.location.href = a['url'];\n      }\n    };\n    const p = new Promise((resolve, reject) => {\n      (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.uploadFileFormData)(formData, url || form.action, method || form.method).then((a, b, c) => {\n        resolve(a, b, c);\n        if (a.status === 'redirect') {\n          redirector(a);\n        } else {\n          p.then(() => {\n            app.refresh(controller.$container);\n          });\n        }\n      }).catch((a, b, c) => {\n        if (a.status === 301) {\n          a = a.responseJSON;\n          redirector(a);\n          resolve(a, b, c);\n        } else {\n          reject(a, b, c);\n        }\n      });\n    });\n    return p;\n  },\n  submitForm: (form, url, method) => {\n    let formData = new FormData(form);\n    return new Promise((resolve, reject) => {\n      (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.uploadFileFormData)(formData, url || form.action, method || form.method).then(resolve).catch(reject);\n    });\n  },\n  /**\n   *\n   * @param {jquery} $elem\n   * @return {AbstractSDC}\n   */\n  getController: $elem => (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.getController)($elem),\n  /**\n   * safeEmpty removes all content of a dom\n   * and deletes all child controller safely.\n   *\n   * @param $elem - jQuery DOM container to be emptyed\n   */\n  safeEmpty: $elem => {\n    let $children = $elem.children();\n    $children.each(function (_, element) {\n      let $element = $(element);\n      app.safeRemove($element);\n    });\n    return $elem;\n  },\n  /**\n   * safeReplace removes all content of a dom\n   * and deletes all child controller safely.\n   *\n   * @param $elem - jQuery DOM to be repleaced\n   * @param $new - jQuery new DOM container\n   */\n  safeReplace: ($elem, $new) => {\n    $new.insertBefore($elem);\n    return app.safeRemove($elem);\n  },\n  /**\n   * safeRemove removes a dom and deletes all child controller safely.\n   *\n   * @param $elem - jQuery Dom\n   */\n  safeRemove: $elem => {\n    $elem.each(function () {\n      let $this = $(this);\n      if ($this.data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`)) {\n        $this.data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`).remove();\n      }\n    });\n    $elem.find(`.${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.CONTROLLER_CLASS}`).each(function () {\n      const controller = $(this).data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`);\n      controller && controller.remove();\n    });\n    return $elem.remove();\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @return {Promise<jQuery>}\n   */\n  reloadController: controller => {\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.reloadHTMLController)(controller).then(html => {\n      let $html = $(html);\n      return app.reconcile(controller, $html);\n    });\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {jquery} $virtualNode\n   * @param {jquery} $realNode\n   */\n  reconcile: (controller, $virtualNode, $realNode = null) => {\n    if (!$realNode) {\n      let $temp = controller.$container.clone().empty();\n      $temp.data(_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY, null);\n      $temp.removeClass(_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.CONTROLLER_CLASS);\n      $temp.append($virtualNode);\n      $virtualNode = $temp;\n    }\n    $realNode = $realNode ?? controller.$container;\n    return app.refresh($virtualNode, controller, true).then(() => {\n      (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.reconcile)($virtualNode, $realNode);\n      (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.resetChildren)(controller);\n      return controller;\n    });\n  },\n  /**\n   *\n   * @param {jquery} $dom\n   * @param {AbstractSDC} leafController\n   * @param {bool} silent\n   * @return {Promise<jQuery>}\n   */\n  refresh: ($dom, leafController, silent = false) => {\n    if (!leafController) {\n      leafController = app.getController($dom);\n    }\n    if (!leafController) {\n      return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)();\n    }\n    let controller = leafController;\n    let controllerList = [];\n    while (controller) {\n      controller._isEventsSet = false;\n      controllerList.unshift(controller);\n      controller = controller._parentController;\n    }\n    $dom ??= leafController.$container;\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.replaceTagElementsInContainer)(app.tagNames, $dom, leafController).then(() => {\n      (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.reloadMethodHTML)(leafController, $dom).then(() => {\n        for (let con of controllerList) {\n          (0,_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.setControllerEvents)(con);\n        }\n        !silent && leafController.onRefresh($dom);\n      });\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_main.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_params.js":
/*!********************************************!*\
  !*** ./src/simpleDomControl/sdc_params.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUrlParam: () => (/* binding */ getUrlParam),\n/* harmony export */   runOnInitWithParameter: () => (/* binding */ runOnInitWithParameter)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./src/simpleDomControl/sdc_view.js\");\n\n\nfunction getParamList(paramNameList, $element) {\n  let returnList;\n  if (!paramNameList) {\n    paramNameList = [];\n  }\n  let data = $element.data();\n  let restdata = {};\n  for (let a in data) {\n    if (data.hasOwnProperty(a) && a !== _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY && !paramNameList.includes(a)) {\n      restdata[a] = data[a];\n    }\n  }\n  returnList = [];\n  for (let i = 0; i < paramNameList.length; i++) {\n    let data_name = paramNameList[i];\n    if (data.hasOwnProperty(data_name)) {\n      returnList.push(data[data_name]);\n    } else {\n      returnList.push('undefined');\n    }\n  }\n  returnList.push(restdata);\n  return returnList;\n}\nfunction parseParamNameList(list, controller = null) {\n  let values = [];\n  for (let i = 0; i < list.length; i++) {\n    let tempValue = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.checkIfParamNumberBoolOrString)(list[i], controller);\n    values.push(tempValue);\n  }\n  return values;\n}\nfunction getDomTagParamsWithList(paramNameList, $element, controller = null) {\n  let paramList = getParamList(paramNameList, $element);\n  return parseParamNameList(paramList, controller);\n}\n\n/**\n *\n * @param {AbstractSDC} controller\n * @param {jquery} $element\n * @param applyController\n * @returns {boolean}\n */\nfunction reg_runOnInitWithParameter(controller, $element, applyController) {\n  if (!controller) {\n    return false;\n  } else if (typeof controller.onInit !== 'function') {\n    return false;\n  }\n  let paramNameList;\n  if (typeof controller._on_init_params === 'function') {\n    paramNameList = controller._on_init_params();\n  } else {\n    paramNameList = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.getParamsNameOfFunction)(controller.onInit);\n  }\n  let initParams = getDomTagParamsWithList(paramNameList, $element, applyController._parentController);\n  controller.onInit.apply(applyController, initParams);\n  if (applyController === controller) {\n    for (let mixinKey in controller._mixins) {\n      reg_runOnInitWithParameter(controller._mixins[mixinKey], $element, applyController);\n    }\n  }\n}\nfunction runOnInitWithParameter($element, controller) {\n  reg_runOnInitWithParameter(controller, $element, controller);\n}\nfunction getUrlParam(controller, $element) {\n  return getDomTagParamsWithList(controller._urlParams, $element);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQ2pCLGFBQWEsRUFBRUMsUUFBUSxFQUFFbUIsZUFBZSxDQUFDSSxpQkFBaUIsQ0FBQztFQUNwR1YsVUFBVSxDQUFDTyxNQUFNLENBQUNJLEtBQUssQ0FBQ0wsZUFBZSxFQUFFRyxVQUFVLENBQUM7RUFDcEQsSUFBR0gsZUFBZSxLQUFLTixVQUFVLEVBQUU7SUFDL0IsS0FBSyxJQUFJWSxRQUFRLElBQUlaLFVBQVUsQ0FBQ2EsT0FBTyxFQUFFO01BQ3JDUiwwQkFBMEIsQ0FBQ0wsVUFBVSxDQUFDYSxPQUFPLENBQUNELFFBQVEsQ0FBQyxFQUFFekIsUUFBUSxFQUFFbUIsZUFBZSxDQUFDO0lBQ3ZGO0VBQ0o7QUFDSjtBQUVPLFNBQVNRLHNCQUFzQkEsQ0FBQzNCLFFBQVEsRUFBRWEsVUFBVSxFQUFFO0VBQ3pESywwQkFBMEIsQ0FBQ0wsVUFBVSxFQUFFYixRQUFRLEVBQUVhLFVBQVUsQ0FBQztBQUNoRTtBQUVPLFNBQVNlLFdBQVdBLENBQUNmLFVBQVUsRUFBRWIsUUFBUSxFQUFFO0VBQzlDLE9BQU9nQix1QkFBdUIsQ0FBQ0gsVUFBVSxDQUFDZ0IsVUFBVSxFQUFFN0IsUUFBUSxDQUFDO0FBQ25FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2RjX2NsaWVudC8uL3NyYy9zaW1wbGVEb21Db250cm9sL3NkY19wYXJhbXMuanM/ZTRiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldFBhcmFtc05hbWVPZkZ1bmN0aW9uLCBjaGVja0lmUGFyYW1OdW1iZXJCb29sT3JTdHJpbmd9IGZyb20gXCIuL3NkY191dGlscy5qc1wiO1xuaW1wb3J0IHtEQVRBX0NPTlRST0xMRVJfS0VZfSBmcm9tIFwiLi9zZGNfdmlldy5qc1wiO1xuXG5cblxuXG5mdW5jdGlvbiBnZXRQYXJhbUxpc3QocGFyYW1OYW1lTGlzdCwgJGVsZW1lbnQpIHtcbiAgICBsZXQgcmV0dXJuTGlzdDtcbiAgICBpZiAoIXBhcmFtTmFtZUxpc3QpIHtcbiAgICAgICAgcGFyYW1OYW1lTGlzdCA9IFtdO1xuICAgIH1cblxuICAgIGxldCBkYXRhID0gJGVsZW1lbnQuZGF0YSgpO1xuICAgIGxldCByZXN0ZGF0YSA9IHt9O1xuICAgIGZvcihsZXQgYSBpbiBkYXRhKSB7XG4gICAgICAgIGlmKGRhdGEuaGFzT3duUHJvcGVydHkoYSkgJiYgYSAhPT0gREFUQV9DT05UUk9MTEVSX0tFWSAmJiAhcGFyYW1OYW1lTGlzdC5pbmNsdWRlcyhhKSkge1xuICAgICAgICAgICAgcmVzdGRhdGFbYV0gPSBkYXRhW2FdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuTGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1OYW1lTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZGF0YV9uYW1lID0gcGFyYW1OYW1lTGlzdFtpXTtcblxuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShkYXRhX25hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm5MaXN0LnB1c2goZGF0YVtkYXRhX25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybkxpc3QucHVzaCgndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm5MaXN0LnB1c2gocmVzdGRhdGEpXG4gICAgcmV0dXJuIHJldHVybkxpc3Q7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUGFyYW1OYW1lTGlzdChsaXN0LCBjb250cm9sbGVyID0gbnVsbCkge1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdGVtcFZhbHVlID0gY2hlY2tJZlBhcmFtTnVtYmVyQm9vbE9yU3RyaW5nKGxpc3RbaV0sIGNvbnRyb2xsZXIpO1xuICAgICAgICB2YWx1ZXMucHVzaCh0ZW1wVmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIGdldERvbVRhZ1BhcmFtc1dpdGhMaXN0KHBhcmFtTmFtZUxpc3QsICRlbGVtZW50LCBjb250cm9sbGVyPW51bGwpIHtcbiAgICBsZXQgcGFyYW1MaXN0ID0gZ2V0UGFyYW1MaXN0KHBhcmFtTmFtZUxpc3QsICRlbGVtZW50KTtcbiAgICByZXR1cm4gcGFyc2VQYXJhbU5hbWVMaXN0KHBhcmFtTGlzdCwgY29udHJvbGxlcik7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RTREN9IGNvbnRyb2xsZXJcbiAqIEBwYXJhbSB7anF1ZXJ5fSAkZWxlbWVudFxuICogQHBhcmFtIGFwcGx5Q29udHJvbGxlclxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIsICRlbGVtZW50LCBhcHBseUNvbnRyb2xsZXIpIHtcbiAgICBpZiAoIWNvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29udHJvbGxlci5vbkluaXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBwYXJhbU5hbWVMaXN0O1xuICAgIGlmKHR5cGVvZiBjb250cm9sbGVyLl9vbl9pbml0X3BhcmFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwYXJhbU5hbWVMaXN0ID0gY29udHJvbGxlci5fb25faW5pdF9wYXJhbXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbU5hbWVMaXN0ID0gZ2V0UGFyYW1zTmFtZU9mRnVuY3Rpb24oY29udHJvbGxlci5vbkluaXQpO1xuICAgIH1cblxuXG4gICAgbGV0IGluaXRQYXJhbXMgPSBnZXREb21UYWdQYXJhbXNXaXRoTGlzdChwYXJhbU5hbWVMaXN0LCAkZWxlbWVudCwgYXBwbHlDb250cm9sbGVyLl9wYXJlbnRDb250cm9sbGVyKTtcbiAgICBjb250cm9sbGVyLm9uSW5pdC5hcHBseShhcHBseUNvbnRyb2xsZXIsIGluaXRQYXJhbXMpO1xuICAgIGlmKGFwcGx5Q29udHJvbGxlciA9PT0gY29udHJvbGxlcikge1xuICAgICAgICBmb3IgKGxldCBtaXhpbktleSBpbiBjb250cm9sbGVyLl9taXhpbnMpIHtcbiAgICAgICAgICAgIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIuX21peGluc1ttaXhpbktleV0sICRlbGVtZW50LCBhcHBseUNvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuT25Jbml0V2l0aFBhcmFtZXRlcigkZWxlbWVudCwgY29udHJvbGxlcikge1xuICAgIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIsICRlbGVtZW50LCBjb250cm9sbGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVybFBhcmFtKGNvbnRyb2xsZXIsICRlbGVtZW50KSB7XG4gICAgcmV0dXJuIGdldERvbVRhZ1BhcmFtc1dpdGhMaXN0KGNvbnRyb2xsZXIuX3VybFBhcmFtcywgJGVsZW1lbnQpO1xufSJdLCJuYW1lcyI6WyJnZXRQYXJhbXNOYW1lT2ZGdW5jdGlvbiIsImNoZWNrSWZQYXJhbU51bWJlckJvb2xPclN0cmluZyIsIkRBVEFfQ09OVFJPTExFUl9LRVkiLCJnZXRQYXJhbUxpc3QiLCJwYXJhbU5hbWVMaXN0IiwiJGVsZW1lbnQiLCJyZXR1cm5MaXN0IiwiZGF0YSIsInJlc3RkYXRhIiwiYSIsImhhc093blByb3BlcnR5IiwiaW5jbHVkZXMiLCJpIiwibGVuZ3RoIiwiZGF0YV9uYW1lIiwicHVzaCIsInBhcnNlUGFyYW1OYW1lTGlzdCIsImxpc3QiLCJjb250cm9sbGVyIiwidmFsdWVzIiwidGVtcFZhbHVlIiwiZ2V0RG9tVGFnUGFyYW1zV2l0aExpc3QiLCJwYXJhbUxpc3QiLCJyZWdfcnVuT25Jbml0V2l0aFBhcmFtZXRlciIsImFwcGx5Q29udHJvbGxlciIsIm9uSW5pdCIsIl9vbl9pbml0X3BhcmFtcyIsImluaXRQYXJhbXMiLCJfcGFyZW50Q29udHJvbGxlciIsImFwcGx5IiwibWl4aW5LZXkiLCJfbWl4aW5zIiwicnVuT25Jbml0V2l0aFBhcmFtZXRlciIsImdldFVybFBhcmFtIiwiX3VybFBhcmFtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_params.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_server_call.js":
/*!*************************************************!*\
  !*** ./src/simpleDomControl/sdc_server_call.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callServer: () => (/* binding */ callServer),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   isConnected: () => (/* binding */ isConnected)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n\n\nlet IS_CONNECTED = false;\nlet IS_CONNECTING = false;\nlet SDC_SOCKET = null;\nlet OPEN_REQUESTS = {};\nfunction callServer(app, controller, parsedContentUrl, funcName, args) {\n  if (window.SERVER_CALL_VIA_WEB_SOCKET) {\n    return socketCallServer(app, controller, funcName, args);\n  } else {\n    return postCallServer(parsedContentUrl, funcName, args);\n  }\n}\nfunction isConnected() {\n  if (window.SERVER_CALL_VIA_WEB_SOCKET) {\n    return socketIsConnected();\n  } else {\n    return Promise.resolve(true);\n  }\n}\nfunction close() {\n  if (window.SERVER_CALL_VIA_WEB_SOCKET) {\n    socketClose();\n  }\n}\nfunction postCallServer(parsedContentUrl, funcName, args) {\n  if (typeof args !== 'object' && Array.isArray(args) && args === null) {\n    args = {\n      'arg0': args\n    };\n  }\n  args = {\n    'data': JSON.stringify(args),\n    '_sdc_func_name': funcName,\n    '_method': 'sdc_server_call'\n  };\n  return $.post({\n    url: parsedContentUrl,\n    data: args,\n    beforeSend: function (xhr, settings) {\n      xhr.setRequestHeader(\"X-CSRFToken\", window.CSRF_TOKEN);\n    }\n  }).then(res => {\n    const data = res['_return_data'];\n    _handle_response(data);\n    return data;\n  }).catch(res => {\n    const data = res.responseJSON;\n    data.is_error = true;\n    _handle_response(data);\n    throw res;\n  });\n}\nfunction socketCallServer(app, controller, funcName, args) {\n  let id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.uuidv4)();\n  isConnected().then(() => {\n    SDC_SOCKET.send(JSON.stringify({\n      event: 'sdc_call',\n      id: id,\n      controller: controller,\n      app: app,\n      function: funcName,\n      args: args\n    }));\n  });\n  return new Promise((resolve, reject) => {\n    OPEN_REQUESTS[id] = [resolve, reject];\n  });\n}\nfunction _connect() {\n  IS_CONNECTING = true;\n  return new Promise(resolve => {\n    if (window.location.protocol === \"https:\") {\n      SDC_SOCKET = new WebSocket(`wss://${window.location.host}/sdc_ws/ws/`);\n    } else {\n      SDC_SOCKET = new WebSocket(`ws://${window.location.host}/sdc_ws/ws/`);\n    }\n    SDC_SOCKET.onmessage = function (e) {\n      let data = JSON.parse(e.data);\n      _handle_response(data);\n    };\n    SDC_SOCKET.onclose = function () {\n      if (IS_CONNECTED) {\n        console.error('SDC Socket closed unexpectedly');\n      }\n      IS_CONNECTED = false;\n      for (const [key, value] of Object.entries(OPEN_REQUESTS)) {\n        value[1]({});\n        delete OPEN_REQUESTS[key];\n      }\n      setTimeout(() => {\n        _connect();\n      }, 1000);\n    };\n    SDC_SOCKET.onerror = function (err) {\n      console.error('Socket encountered error: ', err.message, 'Closing socket');\n      if (IS_CONNECTED) {\n        try {\n          SDC_SOCKET.close();\n        } catch (e) {}\n      }\n    };\n    SDC_SOCKET.onopen = function () {\n      IS_CONNECTED = true;\n      IS_CONNECTING = false;\n      resolve();\n    };\n  });\n}\nfunction _handle_response(data) {\n  if (!data) {\n    data = {};\n  }\n  if (data.is_error) {\n    if (data.msg || data.header) {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('pushErrorMsg', data.header || '', data.msg || '');\n    }\n    if (data.id && OPEN_REQUESTS[data.id]) {\n      OPEN_REQUESTS[data.id][1](data.data || null);\n      delete OPEN_REQUESTS[data.id];\n    }\n  } else {\n    if (data.msg || data.header) {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('pushMsg', data.header || '', data.msg || '');\n    }\n    if (data.type && data.type === 'sdc_recall') {\n      if (data.id && OPEN_REQUESTS[data.id]) {\n        OPEN_REQUESTS[data.id][0](data.data);\n        delete OPEN_REQUESTS[data.id];\n      }\n    } else if (data.type && data.type === 'sdc_event') {\n      let event = data.event;\n      if (event) {\n        (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)(event, data.payload);\n      }\n    } else if (data.type && data.type === 'sdc_redirect') {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('onNavLink', data.link);\n    }\n  }\n}\nfunction socketClose() {\n  if (IS_CONNECTED) {\n    IS_CONNECTED = false;\n    try {\n      SDC_SOCKET.close();\n    } catch (e) {}\n  }\n}\nfunction socketIsConnected() {\n  return new Promise(resolve => {\n    if (IS_CONNECTED) {\n      return resolve();\n    } else if (IS_CONNECTING) {\n      setTimeout(() => {\n        isConnected().then(() => {\n          resolve();\n        });\n      }, 200);\n    } else {\n      return resolve(_connect());\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2ltcGxlRG9tQ29udHJvbC9zZGNfc2VydmVyX2NhbGwuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBc0M7QUFDRTtBQUV4QyxJQUFJRSxZQUFZLEdBQUcsS0FBSztBQUN4QixJQUFJQyxhQUFhLEdBQUcsS0FBSztBQUN6QixJQUFJQyxVQUFVLEdBQUcsSUFBSTtBQUNyQixJQUFJQyxhQUFhLEdBQUcsQ0FBQyxDQUFDO0FBRWYsU0FBU0MsVUFBVUEsQ0FBQ0MsR0FBRyxFQUFFQyxVQUFVLEVBQUVDLGdCQUFnQixFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRTtFQUMxRSxJQUFJQyxNQUFNLENBQUNDLDBCQUEwQixFQUFFO0lBQ25DLE9BQU9DLGdCQUFnQixDQUFDUCxHQUFHLEVBQUVDLFVBQVUsRUFBRUUsUUFBUSxFQUFFQyxJQUFJLENBQUM7RUFDNUQsQ0FBQyxNQUFNO0lBQ0gsT0FBT0ksY0FBYyxDQUFDTixnQkFBZ0IsRUFBRUMsUUFBUSxFQUFFQyxJQUFJLENBQUM7RUFDM0Q7QUFFSjtBQUVPLFNBQVNLLFdBQVdBLENBQUEsRUFBRztFQUMxQixJQUFJSixNQUFNLENBQUNDLDBCQUEwQixFQUFFO0lBQ25DLE9BQU9JLGlCQUFpQixDQUFDLENBQUM7RUFDOUIsQ0FBQyxNQUFNO0lBQ0gsT0FBT0MsT0FBTyxDQUFDQyxPQUFPLENBQUMsSUFBSSxDQUFDO0VBQ2hDO0FBQ0o7QUFFTyxTQUFTQyxLQUFLQSxDQUFBLEVBQUc7RUFDcEIsSUFBSVIsTUFBTSxDQUFDQywwQkFBMEIsRUFBRTtJQUNuQ1EsV0FBVyxDQUFDLENBQUM7RUFDakI7QUFDSjtBQUVBLFNBQVNOLGNBQWNBLENBQUNOLGdCQUFnQixFQUFFQyxRQUFRLEVBQUVDLElBQUksRUFBRTtFQUN0RCxJQUFHLE9BQU9BLElBQUksS0FBSyxRQUFRLElBQUlXLEtBQUssQ0FBQ0MsT0FBTyxDQUFDWixJQUFJLENBQUMsSUFBSUEsSUFBSSxLQUFLLElBQUksRUFBRTtJQUNqRUEsSUFBSSxHQUFHO01BQUMsTUFBTSxFQUFFQTtJQUFJLENBQUM7RUFDekI7RUFDQUEsSUFBSSxHQUFHO0lBQ0gsTUFBTSxFQUFFYSxJQUFJLENBQUNDLFNBQVMsQ0FBQ2QsSUFBSSxDQUFDO0lBQzVCLGdCQUFnQixFQUFFRCxRQUFRO0lBQUUsU0FBUyxFQUFFO0VBQzNDLENBQUM7RUFDRCxPQUFPZ0IsQ0FBQyxDQUFDQyxJQUFJLENBQUM7SUFDVkMsR0FBRyxFQUFFbkIsZ0JBQWdCO0lBQ3JCb0IsSUFBSSxFQUFFbEIsSUFBSTtJQUNWbUIsVUFBVSxFQUFFLFNBQUFBLENBQVVDLEdBQUcsRUFBRUMsUUFBUSxFQUFFO01BQ2pDRCxHQUFHLENBQUNFLGdCQUFnQixDQUFDLGFBQWEsRUFBRXJCLE1BQU0sQ0FBQ3NCLFVBQVUsQ0FBQztJQUMxRDtFQUNKLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUVDLEdBQUcsSUFBSztJQUNiLE1BQU1QLElBQUksR0FBR08sR0FBRyxDQUFDLGNBQWMsQ0FBQztJQUNoQ0MsZ0JBQWdCLENBQUNSLElBQUksQ0FBQztJQUN0QixPQUFPQSxJQUFJO0VBQ2YsQ0FBQyxDQUFDLENBQUNTLEtBQUssQ0FBRUYsR0FBRyxJQUFLO0lBQ2QsTUFBTVAsSUFBSSxHQUFHTyxHQUFHLENBQUNHLFlBQVk7SUFDN0JWLElBQUksQ0FBQ1csUUFBUSxHQUFHLElBQUk7SUFDcEJILGdCQUFnQixDQUFDUixJQUFJLENBQUM7SUFDdEIsTUFBTU8sR0FBRztFQUNiLENBQUMsQ0FBQztBQUNOO0FBRUEsU0FBU3RCLGdCQUFnQkEsQ0FBQ1AsR0FBRyxFQUFFQyxVQUFVLEVBQUVFLFFBQVEsRUFBRUMsSUFBSSxFQUFFO0VBRXZELElBQUk4QixFQUFFLEdBQUd6QyxxREFBTSxDQUFDLENBQUM7RUFDakJnQixXQUFXLENBQUMsQ0FBQyxDQUFDbUIsSUFBSSxDQUFDLE1BQU07SUFDckIvQixVQUFVLENBQUNzQyxJQUFJLENBQUNsQixJQUFJLENBQUNDLFNBQVMsQ0FBQztNQUMzQmtCLEtBQUssRUFBRSxVQUFVO01BQ2pCRixFQUFFLEVBQUVBLEVBQUU7TUFDTmpDLFVBQVUsRUFBRUEsVUFBVTtNQUN0QkQsR0FBRyxFQUFFQSxHQUFHO01BQ1JxQyxRQUFRLEVBQUVsQyxRQUFRO01BQ2xCQyxJQUFJLEVBQUVBO0lBQ1YsQ0FBQyxDQUFDLENBQUM7RUFDUCxDQUFDLENBQUM7RUFFRixPQUFPLElBQUlPLE9BQU8sQ0FBQyxDQUFDQyxPQUFPLEVBQUUwQixNQUFNLEtBQUs7SUFDcEN4QyxhQUFhLENBQUNvQyxFQUFFLENBQUMsR0FBRyxDQUFDdEIsT0FBTyxFQUFFMEIsTUFBTSxDQUFDO0VBQ3pDLENBQUMsQ0FBQztBQUNOO0FBRUEsU0FBU0MsUUFBUUEsQ0FBQSxFQUFHO0VBQ2hCM0MsYUFBYSxHQUFHLElBQUk7RUFDcEIsT0FBTyxJQUFJZSxPQUFPLENBQUVDLE9BQU8sSUFBSztJQUM1QixJQUFJUCxNQUFNLENBQUNtQyxRQUFRLENBQUNDLFFBQVEsS0FBSyxRQUFRLEVBQUU7TUFDdkM1QyxVQUFVLEdBQUcsSUFBSTZDLFNBQVMsQ0FBQyxTQUFTckMsTUFBTSxDQUFDbUMsUUFBUSxDQUFDRyxJQUFJLGFBQWEsQ0FBQztJQUMxRSxDQUFDLE1BQU07TUFDSDlDLFVBQVUsR0FBRyxJQUFJNkMsU0FBUyxDQUFDLFFBQVFyQyxNQUFNLENBQUNtQyxRQUFRLENBQUNHLElBQUksYUFBYSxDQUFDO0lBQ3pFO0lBR0E5QyxVQUFVLENBQUMrQyxTQUFTLEdBQUcsVUFBVUMsQ0FBQyxFQUFFO01BQ2hDLElBQUl2QixJQUFJLEdBQUdMLElBQUksQ0FBQzZCLEtBQUssQ0FBQ0QsQ0FBQyxDQUFDdkIsSUFBSSxDQUFDO01BQzdCUSxnQkFBZ0IsQ0FBQ1IsSUFBSSxDQUFDO0lBQzFCLENBQUM7SUFFRHpCLFVBQVUsQ0FBQ2tELE9BQU8sR0FBRyxZQUFZO01BQzdCLElBQUlwRCxZQUFZLEVBQUU7UUFDZHFELE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLGdDQUFnQyxDQUFDO01BQ25EO01BQ0F0RCxZQUFZLEdBQUcsS0FBSztNQUNwQixLQUFLLE1BQU0sQ0FBQ3VELEdBQUcsRUFBRUMsS0FBSyxDQUFDLElBQUlDLE1BQU0sQ0FBQ0MsT0FBTyxDQUFDdkQsYUFBYSxDQUFDLEVBQUU7UUFDdERxRCxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDWixPQUFPckQsYUFBYSxDQUFDb0QsR0FBRyxDQUFDO01BQzdCO01BRUFJLFVBQVUsQ0FBQyxNQUFNO1FBQ2JmLFFBQVEsQ0FBQyxDQUFDO01BQ2QsQ0FBQyxFQUFFLElBQUksQ0FBQztJQUNaLENBQUM7SUFFRDFDLFVBQVUsQ0FBQzBELE9BQU8sR0FBRyxVQUFVQyxHQUFHLEVBQUU7TUFDaENSLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLDRCQUE0QixFQUFFTyxHQUFHLENBQUNDLE9BQU8sRUFBRSxnQkFBZ0IsQ0FBQztNQUMxRSxJQUFJOUQsWUFBWSxFQUFFO1FBQ2QsSUFBSTtVQUNBRSxVQUFVLENBQUNnQixLQUFLLENBQUMsQ0FBQztRQUN0QixDQUFDLENBQUMsT0FBT2dDLENBQUMsRUFBRSxDQUVaO01BQ0o7SUFDSixDQUFDO0lBRURoRCxVQUFVLENBQUM2RCxNQUFNLEdBQUcsWUFBWTtNQUM1Qi9ELFlBQVksR0FBRyxJQUFJO01BQ25CQyxhQUFhLEdBQUcsS0FBSztNQUNyQmdCLE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQztFQUNMLENBQUMsQ0FBQztBQUNOO0FBRUEsU0FBU2tCLGdCQUFnQkEsQ0FBQ1IsSUFBSSxFQUFFO0VBQzVCLElBQUcsQ0FBQ0EsSUFBSSxFQUFFO0lBQ05BLElBQUksR0FBRyxDQUFDLENBQUM7RUFDYjtFQUNBLElBQUlBLElBQUksQ0FBQ1csUUFBUSxFQUFFO0lBQ2YsSUFBSVgsSUFBSSxDQUFDcUMsR0FBRyxJQUFJckMsSUFBSSxDQUFDc0MsTUFBTSxFQUFFO01BQ3pCbEUsdURBQU8sQ0FBQyxjQUFjLEVBQUU0QixJQUFJLENBQUNzQyxNQUFNLElBQUksRUFBRSxFQUFFdEMsSUFBSSxDQUFDcUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztJQUM5RDtJQUNBLElBQUlyQyxJQUFJLENBQUNZLEVBQUUsSUFBSXBDLGFBQWEsQ0FBQ3dCLElBQUksQ0FBQ1ksRUFBRSxDQUFDLEVBQUU7TUFDbkNwQyxhQUFhLENBQUN3QixJQUFJLENBQUNZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDWixJQUFJLENBQUNBLElBQUksSUFBSSxJQUFJLENBQUM7TUFDNUMsT0FBT3hCLGFBQWEsQ0FBQ3dCLElBQUksQ0FBQ1ksRUFBRSxDQUFDO0lBQ2pDO0VBQ0osQ0FBQyxNQUFNO0lBQ0gsSUFBSVosSUFBSSxDQUFDcUMsR0FBRyxJQUFJckMsSUFBSSxDQUFDc0MsTUFBTSxFQUFFO01BQ3pCbEUsdURBQU8sQ0FBQyxTQUFTLEVBQUU0QixJQUFJLENBQUNzQyxNQUFNLElBQUksRUFBRSxFQUFFdEMsSUFBSSxDQUFDcUMsR0FBRyxJQUFJLEVBQUUsQ0FBQztJQUN6RDtJQUVBLElBQUlyQyxJQUFJLENBQUN1QyxJQUFJLElBQUl2QyxJQUFJLENBQUN1QyxJQUFJLEtBQUssWUFBWSxFQUFFO01BQ3pDLElBQUl2QyxJQUFJLENBQUNZLEVBQUUsSUFBSXBDLGFBQWEsQ0FBQ3dCLElBQUksQ0FBQ1ksRUFBRSxDQUFDLEVBQUU7UUFDbkNwQyxhQUFhLENBQUN3QixJQUFJLENBQUNZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDWixJQUFJLENBQUNBLElBQUksQ0FBQztRQUNwQyxPQUFPeEIsYUFBYSxDQUFDd0IsSUFBSSxDQUFDWSxFQUFFLENBQUM7TUFDakM7SUFDSixDQUFDLE1BQU0sSUFBSVosSUFBSSxDQUFDdUMsSUFBSSxJQUFJdkMsSUFBSSxDQUFDdUMsSUFBSSxLQUFLLFdBQVcsRUFBRTtNQUMvQyxJQUFJekIsS0FBSyxHQUFHZCxJQUFJLENBQUNjLEtBQUs7TUFDdEIsSUFBSUEsS0FBSyxFQUFFO1FBQ1AxQyx1REFBTyxDQUFDMEMsS0FBSyxFQUFFZCxJQUFJLENBQUN3QyxPQUFPLENBQUM7TUFDaEM7SUFFSixDQUFDLE1BQU0sSUFBSXhDLElBQUksQ0FBQ3VDLElBQUksSUFBSXZDLElBQUksQ0FBQ3VDLElBQUksS0FBSyxjQUFjLEVBQUU7TUFDbERuRSx1REFBTyxDQUFDLFdBQVcsRUFBRTRCLElBQUksQ0FBQ3lDLElBQUksQ0FBQztJQUNuQztFQUNKO0FBQ0o7QUFFQSxTQUFTakQsV0FBV0EsQ0FBQSxFQUFHO0VBQ25CLElBQUluQixZQUFZLEVBQUU7SUFDZEEsWUFBWSxHQUFHLEtBQUs7SUFDcEIsSUFBSTtNQUNBRSxVQUFVLENBQUNnQixLQUFLLENBQUMsQ0FBQztJQUN0QixDQUFDLENBQUMsT0FBT2dDLENBQUMsRUFBRSxDQUVaO0VBRUo7QUFDSjtBQUVBLFNBQVNuQyxpQkFBaUJBLENBQUEsRUFBRztFQUV6QixPQUFPLElBQUlDLE9BQU8sQ0FBRUMsT0FBTyxJQUFLO0lBQzVCLElBQUlqQixZQUFZLEVBQUU7TUFDZCxPQUFPaUIsT0FBTyxDQUFDLENBQUM7SUFDcEIsQ0FBQyxNQUFNLElBQUloQixhQUFhLEVBQUU7TUFDdEIwRCxVQUFVLENBQUMsTUFBTTtRQUNiN0MsV0FBVyxDQUFDLENBQUMsQ0FBQ21CLElBQUksQ0FBQyxNQUFNO1VBQ3JCaEIsT0FBTyxDQUFDLENBQUM7UUFDYixDQUFDLENBQUM7TUFDTixDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQ1gsQ0FBQyxNQUFNO01BQ0gsT0FBT0EsT0FBTyxDQUFDMkIsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QjtFQUNKLENBQUMsQ0FBQztBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2RjX2NsaWVudC8uL3NyYy9zaW1wbGVEb21Db250cm9sL3NkY19zZXJ2ZXJfY2FsbC5qcz9jM2UzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXVpZHY0fSBmcm9tIFwiLi9zZGNfdXRpbHMuanNcIjtcbmltcG9ydCB7dHJpZ2dlcn0gZnJvbSBcIi4vc2RjX2V2ZW50cy5qc1wiO1xuXG5sZXQgSVNfQ09OTkVDVEVEID0gZmFsc2U7XG5sZXQgSVNfQ09OTkVDVElORyA9IGZhbHNlO1xubGV0IFNEQ19TT0NLRVQgPSBudWxsXG5sZXQgT1BFTl9SRVFVRVNUUyA9IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gY2FsbFNlcnZlcihhcHAsIGNvbnRyb2xsZXIsIHBhcnNlZENvbnRlbnRVcmwsIGZ1bmNOYW1lLCBhcmdzKSB7XG4gICAgaWYgKHdpbmRvdy5TRVJWRVJfQ0FMTF9WSUFfV0VCX1NPQ0tFVCkge1xuICAgICAgICByZXR1cm4gc29ja2V0Q2FsbFNlcnZlcihhcHAsIGNvbnRyb2xsZXIsIGZ1bmNOYW1lLCBhcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcG9zdENhbGxTZXJ2ZXIocGFyc2VkQ29udGVudFVybCwgZnVuY05hbWUsIGFyZ3MpO1xuICAgIH1cblxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb25uZWN0ZWQoKSB7XG4gICAgaWYgKHdpbmRvdy5TRVJWRVJfQ0FMTF9WSUFfV0VCX1NPQ0tFVCkge1xuICAgICAgICByZXR1cm4gc29ja2V0SXNDb25uZWN0ZWQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKCkge1xuICAgIGlmICh3aW5kb3cuU0VSVkVSX0NBTExfVklBX1dFQl9TT0NLRVQpIHtcbiAgICAgICAgc29ja2V0Q2xvc2UoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHBvc3RDYWxsU2VydmVyKHBhcnNlZENvbnRlbnRVcmwsIGZ1bmNOYW1lLCBhcmdzKSB7XG4gICAgaWYodHlwZW9mIGFyZ3MgIT09ICdvYmplY3QnICYmIEFycmF5LmlzQXJyYXkoYXJncykgJiYgYXJncyA9PT0gbnVsbCkge1xuICAgICAgICBhcmdzID0geydhcmcwJzogYXJnc31cbiAgICB9XG4gICAgYXJncyA9IHtcbiAgICAgICAgJ2RhdGEnOiBKU09OLnN0cmluZ2lmeShhcmdzKSxcbiAgICAgICAgJ19zZGNfZnVuY19uYW1lJzogZnVuY05hbWUsICdfbWV0aG9kJzogJ3NkY19zZXJ2ZXJfY2FsbCdcbiAgICB9XG4gICAgcmV0dXJuICQucG9zdCh7XG4gICAgICAgIHVybDogcGFyc2VkQ29udGVudFVybCxcbiAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgYmVmb3JlU2VuZDogZnVuY3Rpb24gKHhociwgc2V0dGluZ3MpIHtcbiAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiWC1DU1JGVG9rZW5cIiwgd2luZG93LkNTUkZfVE9LRU4pO1xuICAgICAgICB9XG4gICAgfSkudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXNbJ19yZXR1cm5fZGF0YSddO1xuICAgICAgICBfaGFuZGxlX3Jlc3BvbnNlKGRhdGEpO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9KS5jYXRjaCgocmVzKSA9PiB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSByZXMucmVzcG9uc2VKU09OO1xuICAgICAgICBkYXRhLmlzX2Vycm9yID0gdHJ1ZTtcbiAgICAgICAgX2hhbmRsZV9yZXNwb25zZShkYXRhKTtcbiAgICAgICAgdGhyb3cgcmVzO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzb2NrZXRDYWxsU2VydmVyKGFwcCwgY29udHJvbGxlciwgZnVuY05hbWUsIGFyZ3MpIHtcblxuICAgIGxldCBpZCA9IHV1aWR2NCgpO1xuICAgIGlzQ29ubmVjdGVkKCkudGhlbigoKSA9PiB7XG4gICAgICAgIFNEQ19TT0NLRVQuc2VuZChKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBldmVudDogJ3NkY19jYWxsJyxcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IGNvbnRyb2xsZXIsXG4gICAgICAgICAgICBhcHA6IGFwcCxcbiAgICAgICAgICAgIGZ1bmN0aW9uOiBmdW5jTmFtZSxcbiAgICAgICAgICAgIGFyZ3M6IGFyZ3NcbiAgICAgICAgfSkpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgT1BFTl9SRVFVRVNUU1tpZF0gPSBbcmVzb2x2ZSwgcmVqZWN0XTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gX2Nvbm5lY3QoKSB7XG4gICAgSVNfQ09OTkVDVElORyA9IHRydWU7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24ucHJvdG9jb2wgPT09IFwiaHR0cHM6XCIpIHtcbiAgICAgICAgICAgIFNEQ19TT0NLRVQgPSBuZXcgV2ViU29ja2V0KGB3c3M6Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fS9zZGNfd3Mvd3MvYCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBTRENfU09DS0VUID0gbmV3IFdlYlNvY2tldChgd3M6Ly8ke3dpbmRvdy5sb2NhdGlvbi5ob3N0fS9zZGNfd3Mvd3MvYCk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIFNEQ19TT0NLRVQub25tZXNzYWdlID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gSlNPTi5wYXJzZShlLmRhdGEpO1xuICAgICAgICAgICAgX2hhbmRsZV9yZXNwb25zZShkYXRhKTtcbiAgICAgICAgfTtcblxuICAgICAgICBTRENfU09DS0VULm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoSVNfQ09OTkVDVEVEKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignU0RDIFNvY2tldCBjbG9zZWQgdW5leHBlY3RlZGx5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBJU19DT05ORUNURUQgPSBmYWxzZTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKE9QRU5fUkVRVUVTVFMpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVbMV0oe30pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBPUEVOX1JFUVVFU1RTW2tleV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIF9jb25uZWN0KCk7XG4gICAgICAgICAgICB9LCAxMDAwKTtcbiAgICAgICAgfTtcblxuICAgICAgICBTRENfU09DS0VULm9uZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTb2NrZXQgZW5jb3VudGVyZWQgZXJyb3I6ICcsIGVyci5tZXNzYWdlLCAnQ2xvc2luZyBzb2NrZXQnKTtcbiAgICAgICAgICAgIGlmIChJU19DT05ORUNURUQpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBTRENfU09DS0VULmNsb3NlKCk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIFNEQ19TT0NLRVQub25vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgSVNfQ09OTkVDVEVEID0gdHJ1ZTtcbiAgICAgICAgICAgIElTX0NPTk5FQ1RJTkcgPSBmYWxzZTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmZ1bmN0aW9uIF9oYW5kbGVfcmVzcG9uc2UoZGF0YSkge1xuICAgIGlmKCFkYXRhKSB7XG4gICAgICAgIGRhdGEgPSB7fTtcbiAgICB9XG4gICAgaWYgKGRhdGEuaXNfZXJyb3IpIHtcbiAgICAgICAgaWYgKGRhdGEubXNnIHx8IGRhdGEuaGVhZGVyKSB7XG4gICAgICAgICAgICB0cmlnZ2VyKCdwdXNoRXJyb3JNc2cnLCBkYXRhLmhlYWRlciB8fCAnJywgZGF0YS5tc2cgfHwgJycpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmlkICYmIE9QRU5fUkVRVUVTVFNbZGF0YS5pZF0pIHtcbiAgICAgICAgICAgIE9QRU5fUkVRVUVTVFNbZGF0YS5pZF1bMV0oZGF0YS5kYXRhIHx8IG51bGwpO1xuICAgICAgICAgICAgZGVsZXRlIE9QRU5fUkVRVUVTVFNbZGF0YS5pZF07XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZGF0YS5tc2cgfHwgZGF0YS5oZWFkZXIpIHtcbiAgICAgICAgICAgIHRyaWdnZXIoJ3B1c2hNc2cnLCBkYXRhLmhlYWRlciB8fCAnJywgZGF0YS5tc2cgfHwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEudHlwZSAmJiBkYXRhLnR5cGUgPT09ICdzZGNfcmVjYWxsJykge1xuICAgICAgICAgICAgaWYgKGRhdGEuaWQgJiYgT1BFTl9SRVFVRVNUU1tkYXRhLmlkXSkge1xuICAgICAgICAgICAgICAgIE9QRU5fUkVRVUVTVFNbZGF0YS5pZF1bMF0oZGF0YS5kYXRhKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgT1BFTl9SRVFVRVNUU1tkYXRhLmlkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgJiYgZGF0YS50eXBlID09PSAnc2RjX2V2ZW50Jykge1xuICAgICAgICAgICAgbGV0IGV2ZW50ID0gZGF0YS5ldmVudDtcbiAgICAgICAgICAgIGlmIChldmVudCkge1xuICAgICAgICAgICAgICAgIHRyaWdnZXIoZXZlbnQsIGRhdGEucGF5bG9hZCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIGlmIChkYXRhLnR5cGUgJiYgZGF0YS50eXBlID09PSAnc2RjX3JlZGlyZWN0Jykge1xuICAgICAgICAgICAgdHJpZ2dlcignb25OYXZMaW5rJywgZGF0YS5saW5rKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gc29ja2V0Q2xvc2UoKSB7XG4gICAgaWYgKElTX0NPTk5FQ1RFRCkge1xuICAgICAgICBJU19DT05ORUNURUQgPSBmYWxzZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIFNEQ19TT0NLRVQuY2xvc2UoKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuXG4gICAgICAgIH1cblxuICAgIH1cbn1cblxuZnVuY3Rpb24gc29ja2V0SXNDb25uZWN0ZWQoKSB7XG5cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgaWYgKElTX0NPTk5FQ1RFRCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgfSBlbHNlIGlmIChJU19DT05ORUNUSU5HKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBpc0Nvbm5lY3RlZCgpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAyMDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoX2Nvbm5lY3QoKSk7XG4gICAgICAgIH1cbiAgICB9KTtcbn0iXSwibmFtZXMiOlsidXVpZHY0IiwidHJpZ2dlciIsIklTX0NPTk5FQ1RFRCIsIklTX0NPTk5FQ1RJTkciLCJTRENfU09DS0VUIiwiT1BFTl9SRVFVRVNUUyIsImNhbGxTZXJ2ZXIiLCJhcHAiLCJjb250cm9sbGVyIiwicGFyc2VkQ29udGVudFVybCIsImZ1bmNOYW1lIiwiYXJncyIsIndpbmRvdyIsIlNFUlZFUl9DQUxMX1ZJQV9XRUJfU09DS0VUIiwic29ja2V0Q2FsbFNlcnZlciIsInBvc3RDYWxsU2VydmVyIiwiaXNDb25uZWN0ZWQiLCJzb2NrZXRJc0Nvbm5lY3RlZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2xvc2UiLCJzb2NrZXRDbG9zZSIsIkFycmF5IiwiaXNBcnJheSIsIkpTT04iLCJzdHJpbmdpZnkiLCIkIiwicG9zdCIsInVybCIsImRhdGEiLCJiZWZvcmVTZW5kIiwieGhyIiwic2V0dGluZ3MiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiQ1NSRl9UT0tFTiIsInRoZW4iLCJyZXMiLCJfaGFuZGxlX3Jlc3BvbnNlIiwiY2F0Y2giLCJyZXNwb25zZUpTT04iLCJpc19lcnJvciIsImlkIiwic2VuZCIsImV2ZW50IiwiZnVuY3Rpb24iLCJyZWplY3QiLCJfY29ubmVjdCIsImxvY2F0aW9uIiwicHJvdG9jb2wiLCJXZWJTb2NrZXQiLCJob3N0Iiwib25tZXNzYWdlIiwiZSIsInBhcnNlIiwib25jbG9zZSIsImNvbnNvbGUiLCJlcnJvciIsImtleSIsInZhbHVlIiwiT2JqZWN0IiwiZW50cmllcyIsInNldFRpbWVvdXQiLCJvbmVycm9yIiwiZXJyIiwibWVzc2FnZSIsIm9ub3BlbiIsIm1zZyIsImhlYWRlciIsInR5cGUiLCJwYXlsb2FkIiwibGluayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_server_call.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_socket.js":
/*!********************************************!*\
  !*** ./src/simpleDomControl/sdc_socket.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Model: () => (/* binding */ Model)\n/* harmony export */ });\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n\n\n\nconst MAX_FILE_UPLOAD = 25000;\nclass SubModel {\n  constructor(pk, model) {\n    this.pk = pk;\n    this._model = model;\n  }\n\n  /**\n   * SDC Model Name\n   * @param {string} model\n   */\n  set model(model) {\n    this._model = model;\n  }\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * Load the sub model.\n   *\n   * @param {AbstractSDC} controller\n   * @returns {Model}\n   */\n  load(controller) {\n    if (!this._model) {\n      throw new TypeError(\"Model is not set!!\");\n    }\n    return controller.newModel(this._model, {\n      pk: this.pk\n    });\n  }\n}\nconst ModelProxyHandler = {\n  get(target, key) {\n    const value = target[key] ?? undefined;\n    if (value instanceof SubModel) {\n      if (!value.pk && value.pk !== 0) {\n        return null;\n      }\n      const newVal = new Number(value.pk);\n      newVal.load = value.load.bind(value);\n      return newVal;\n    }\n    return value;\n  },\n  set(target, key, value) {\n    if (key in target) {\n      const oldVal = target[key];\n      if (oldVal instanceof SubModel) {\n        if (value.hasOwnProperty('pk')) {\n          oldVal.pk = value.pk;\n        } else {\n          oldVal.pk = value;\n        }\n      } else {\n        target[key] = value;\n      }\n    } else {\n      target[key] = value;\n    }\n    return true;\n  }\n};\nfunction parse_hidden_inputs(value) {\n  let isFloatReg = /^-?\\d+\\.?\\d+$/;\n  let isIntReg = /^-?\\d+$/;\n  let isBoolReg = /^(true|false)$/;\n  let isStringReg = /^(['][^']*['])|([\"][^\"]*[\"])$/;\n  if (value.toLowerCase().match(isBoolReg)) {\n    return value.toLowerCase() === 'true';\n  } else if (value === 'undefined') {\n    return undefined;\n  } else if (value.toLowerCase() === 'none') {\n    return null;\n  } else if (value.match(isIntReg)) {\n    return parseInt(value);\n  } else if (value.match(isFloatReg)) {\n    return parseFloat(value);\n  } else if (value.match(isStringReg)) {\n    return value.substring(1, value.length - 1);\n  }\n  return value;\n}\nclass Model {\n  /**\n   *\n   * @param model_name {string}\n   * @param model_query {json}\n   */\n  constructor(model_name, model_query = {}) {\n    this.values_list = [];\n    this.values = {};\n    this.model_name = model_name;\n    this.model_query = model_query;\n    this._is_connected = false;\n    this._is_conneting_process = false;\n    this._auto_reconnect = true;\n    this.socket = null;\n    this.open_request = {};\n    this.on_update = () => {};\n    this.on_create = () => {};\n    this.form_id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n  }\n  [Symbol.iterator]() {\n    let idx = -1;\n    return {\n      next: () => {\n        ++idx;\n        if (idx < this.values_list.length) {\n          return {\n            value: this.values_list[idx],\n            done: false\n          };\n        }\n        return {\n          value: null,\n          done: true\n        };\n      }\n    };\n  }\n  length() {\n    return this.values_list.length;\n  }\n  byPk(pk) {\n    if (pk !== null) {\n      pk = parseInt(pk);\n      if (isNaN(pk)) {\n        pk = -1;\n      }\n      let elem = this.values_list.find(elm => elm.pk === pk);\n      if (!elem) {\n        elem = new Proxy({\n          pk: pk\n        }, ModelProxyHandler);\n        this.values_list.push(elem);\n      }\n      return elem;\n    }\n    return {\n      pk: pk\n    };\n  }\n  filter(model_query) {\n    this.model_query = Object.assign({}, this.model_query, model_query);\n    return this;\n  }\n  load() {\n    return this.isConnected().then(() => {\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      return new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'load',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query\n          }\n        }));\n        this.open_request[id] = [resolve, reject];\n      });\n    });\n  }\n  listView(filter = {}, cb_resolve = null, cb_reject = null) {\n    let $div_list = $('<div class=\"container-fluid\">');\n    this.isConnected().then(() => {\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      this.socket.send(JSON.stringify({\n        event: 'model',\n        event_type: 'list_view',\n        event_id: id,\n        args: {\n          model_name: this.model_name,\n          model_query: this.model_query,\n          filter: filter\n        }\n      }));\n      this.open_request[id] = [data => {\n        $div_list.append(data.html);\n        _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_list);\n        cb_resolve && cb_resolve(data);\n      }, res => {\n        cb_reject && cb_reject(res);\n      }];\n    });\n    return $div_list;\n  }\n  detailView(pk = -1, cb_resolve = null, cb_reject = null) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    let $div_list = $('<div class=\"container-fluid\">');\n    let load_promise;\n    if (this.values_list.length !== 0) {\n      load_promise = this.isConnected();\n    } else {\n      load_promise = this.load();\n    }\n    load_promise.then(() => {\n      if (pk === -1) {\n        pk = this.values_list[0].pk;\n      }\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      this.socket.send(JSON.stringify({\n        event: 'model',\n        event_type: 'detail_view',\n        event_id: id,\n        args: {\n          model_name: this.model_name,\n          model_query: this.model_query,\n          pk: pk\n        }\n      }));\n      this.open_request[id] = [data => {\n        $div_list.append(data.html);\n        _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_list);\n        cb_resolve && cb_resolve(data);\n      }, res => {\n        cb_reject && cb_reject(res);\n      }];\n    });\n    return $div_list;\n  }\n  syncFormToModel($forms) {\n    return this.syncForm($forms);\n  }\n  syncModelToForm($forms) {\n    if (!$forms || !$forms.hasClass(this.form_id)) {\n      $forms = $(`.${this.form_id}`);\n    }\n    let self = this;\n    $forms.each(function () {\n      if (!this.hasAttribute('data-model_pk')) {\n        return;\n      }\n      let pk = $(this).data('model_pk');\n      let instance = self.byPk(pk);\n      for (let form_item of this.elements) {\n        let name = form_item.name;\n        if (name && name !== '') {\n          if (form_item.type === 'checkbox') {\n            form_item.checked = instance[name];\n          } else if (form_item.type === 'file' && instance[name] instanceof File) {\n            let container = new DataTransfer();\n            container.items.add(instance[name]);\n            form_item.files = container;\n          } else {\n            $(form_item).val(instance[name]);\n          }\n        }\n      }\n    });\n  }\n  syncForm($forms) {\n    if (!$forms || !$forms.hasClass(this.form_id)) {\n      $forms = $(`.${this.form_id}`);\n    }\n    const self = this;\n    let instances = [];\n    $forms.each(function () {\n      let $form = $(this);\n      let pk = $form.data('model_pk');\n      let instance = self.byPk(pk);\n      for (let form_item of this.elements) {\n        let name = form_item.name;\n        if (name && name !== '') {\n          if (form_item.type === 'hidden') {\n            instance[name] = parse_hidden_inputs($(form_item).val());\n          } else if (form_item.type === 'checkbox') {\n            instance[name] = form_item.checked;\n          } else if (form_item.type === 'file') {\n            instance[name] = form_item.files[0];\n          } else {\n            instance[name] = $(form_item).val();\n          }\n        }\n      }\n      instances.push(instance);\n      return instance;\n    });\n    if (this.values_list.length <= 1 && instances.length > 0) {\n      this.values = instances.at(-1);\n    }\n    return instances;\n  }\n  createForm(cb_resolve = null, cb_reject = null) {\n    let $div_form = $('<div class=\"container-fluid\">');\n    this.isConnected().then(() => {\n      this._getForm(null, 'create_form', null, $div_form, cb_resolve, cb_reject);\n    });\n    return $div_form;\n  }\n  editForm(pk = -1, cb_resolve = null, cb_reject = null) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    let load_promise;\n    if (this.values_list.length !== 0) {\n      load_promise = this.isConnected();\n    } else {\n      load_promise = this.load();\n    }\n    let $div_form = $('<div  class=\"container-fluid\">');\n    load_promise.then(() => {\n      if (pk <= -1) {\n        pk = this.values_list.at(pk).pk;\n      }\n      this._getForm(pk, 'edit_form', null, $div_form, cb_resolve, cb_reject);\n    });\n    return $div_form;\n  }\n  namedForm(pk = -1, formName, cb_resolve = null, cb_reject = null) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    let load_promise;\n    if (this.values_list.length !== 0) {\n      load_promise = this.isConnected();\n    } else {\n      load_promise = this.load();\n    }\n    let $div_form = $('<div  class=\"container-fluid\">');\n    load_promise.then(() => {\n      if (pk <= -1) {\n        pk = this.values_list.at(pk).pk;\n      }\n      this._getForm(pk, 'named_form', formName, $div_form, cb_resolve, cb_reject);\n    });\n    return $div_form;\n  }\n  _getForm(pk, event_type, formName, $div_form, cb_resolve, cb_reject) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    this.socket.send(JSON.stringify({\n      event: 'model',\n      event_type: event_type,\n      event_id: id,\n      args: {\n        model_name: this.model_name,\n        model_query: this.model_query,\n        pk: pk,\n        form_name: formName\n      }\n    }));\n    const className = pk === null || pk === -1 ? 'create' : 'edit';\n    this.open_request[id] = [data => {\n      $div_form.append(data.html);\n      let $form = $div_form.closest('form').addClass(`sdc-model-${className}-form sdc-model-form ${this.form_id}`).data('model', this).data('model_pk', pk);\n      if ($form.length > 0 && !$form[0].hasAttribute('sdc_submit')) {\n        $form.attr('sdc_submit', 'submitModelFormDistributor');\n      }\n      _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_form);\n      cb_resolve && cb_resolve(data);\n    }, res => {\n      cb_reject && cb_reject(res);\n    }];\n  }\n  new() {\n    return new Promise((resolve, reject) => {\n      const $form = $('<form>').append(this.createForm(() => {\n        this.syncFormToModel($form);\n        resolve();\n      }, reject));\n    });\n  }\n  save(pk = -1) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    return this.isConnected().then(() => {\n      let elem_list;\n      if (pk > -1) {\n        elem_list = [this.byPk(pk)];\n      } else {\n        elem_list = this.values_list;\n      }\n      let p_list = [];\n      elem_list.forEach(elem => {\n        const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n        p_list.push(new Promise((resolve, reject) => {\n          this._readFiles(elem).then(files => {\n            this.socket.send(JSON.stringify({\n              event: 'model',\n              event_type: 'save',\n              event_id: id,\n              args: {\n                model_name: this.model_name,\n                model_query: this.model_query,\n                data: elem,\n                files: files\n              }\n            }));\n            this.open_request[id] = [res => {\n              let data = typeof res.data.instance === 'string' ? JSON.parse(res.data.instance) : res.data.instance;\n              res.data.instance = this._parseServerRes(data);\n              resolve(res);\n            }, reject];\n          });\n        }));\n      });\n      return Promise.all(p_list);\n    });\n  }\n  create(values = this.values) {\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return this.isConnected().then(() => {\n      return new Promise((resolve, reject) => {\n        this._readFiles(values).then(files => {\n          this.socket.send(JSON.stringify({\n            event: 'model',\n            event_type: 'create',\n            event_id: id,\n            args: {\n              model_name: this.model_name,\n              model_query: this.model_query,\n              data: values,\n              files: files\n            }\n          }));\n          this.open_request[id] = [res => {\n            let data = typeof res.data.instance === 'string' ? JSON.parse(res.data.instance) : res.data.instance;\n            res.data.instance = this._parseServerRes(data)[0];\n            resolve(res);\n          }, reject];\n        });\n      });\n    });\n  }\n  delete(pk = -1) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    if (pk === -1) pk = this.values?.pk;\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return this.isConnected().then(() => {\n      return new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'delete',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query,\n            pk: pk\n          }\n        }));\n        this.open_request[id] = [resolve, reject];\n      });\n    });\n  }\n  isConnected() {\n    return new Promise((resolve, reject) => {\n      if (this._is_connected) {\n        resolve();\n      } else if (!this._is_conneting_process) {\n        this._is_conneting_process = true;\n        this.open_request['_connecting_process'] = [() => {}, () => {}];\n        this._connectToServer().then(() => {\n          resolve(this._checkConnection());\n        });\n      } else {\n        const [resolve_origin, reject_origin] = this.open_request['_connecting_process'];\n        this.open_request['_connecting_process'] = [() => {\n          resolve_origin();\n          resolve();\n        }, () => {\n          reject_origin();\n          reject();\n        }];\n      }\n    });\n  }\n  close() {\n    if (this.socket) {\n      this._auto_reconnect = false;\n      this.socket.onclose = () => {};\n      this.socket.close();\n      delete this['socket'];\n    }\n  }\n  clean() {\n    this.values_list = [];\n    this.values = {};\n    return this;\n  }\n  _readFiles(elem) {\n    let to_solve = [];\n    let files = {};\n    for (const [key, value] of Object.entries(elem)) {\n      if (value instanceof File) {\n        to_solve.push(new Promise((resolve, reject) => {\n          ((key, value) => {\n            let reader = new FileReader();\n            reader.onload = e => {\n              const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n              this.open_request[id] = [resolve, reject];\n              let result = e.target.result;\n              let number_of_chunks = parseInt(Math.ceil(result.length / MAX_FILE_UPLOAD));\n              files[key] = {\n                id: id,\n                file_name: value.name,\n                field_name: key,\n                content_length: value.size\n              };\n              for (let i = 0; i < number_of_chunks; ++i) {\n                this.socket.send(JSON.stringify({\n                  event: 'model',\n                  event_type: 'upload',\n                  event_id: id,\n                  args: {\n                    chunk: result.slice(MAX_FILE_UPLOAD * i, MAX_FILE_UPLOAD * (i + 1)),\n                    idx: i,\n                    number_of_chunks: number_of_chunks,\n                    file_name: value.name,\n                    field_name: key,\n                    content_length: value.size,\n                    content_type: value.type,\n                    model_name: this.model_name,\n                    model_query: this.model_query\n                  }\n                }));\n              }\n            };\n            reader.onerror = () => {\n              reject();\n            };\n            reader.readAsBinaryString(value);\n          })(key, value);\n        }));\n      }\n    }\n    return Promise.all(to_solve).then(() => {\n      return files;\n    });\n  }\n  _onMessage(e) {\n    let data = JSON.parse(e.data);\n    if (data.is_error) {\n      if (this.open_request.hasOwnProperty(data.event_id)) {\n        this.open_request[data.event_id][1](data);\n        delete this.open_request[data.event_id];\n      }\n      if (data.msg || data.header) {\n        (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('pushErrorMsg', data.header || '', data.msg || '');\n      }\n      if (data.type === 'connect') {\n        this.open_request['_connecting_process'][1](data);\n        delete this.open_request['_connecting_process'];\n        this._auto_reconnect = false;\n        this.socket.close();\n      }\n    } else {\n      if (data.msg || data.header) {\n        (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('pushMsg', data.header || '', data.msg || '');\n      }\n      if (data.type === 'connect') {\n        this._is_connected = true;\n        this._is_conneting_process = false;\n        this.open_request['_connecting_process'][0](data);\n        delete this.open_request['_connecting_process'];\n      } else if (data.type === 'load') {\n        const json_res = JSON.parse(data.args.data);\n        this.values_list = [];\n        data.args.data = this._parseServerRes(json_res);\n      } else if (data.type === 'on_update' || data.type === 'on_create') {\n        const json_res = JSON.parse(data.args.data);\n        let obj = this._parseServerRes(json_res);\n        let cb;\n        if (data.type === 'on_create') {\n          cb = this.on_create;\n        } else {\n          cb = this.on_update;\n        }\n        cb(obj);\n        data.args.data = obj;\n      }\n      let instance = data.data?.instance;\n      if (instance) {\n        data.data.instance = JSON.parse(data.data.instance);\n      }\n      if (this.open_request.hasOwnProperty(data.event_id)) {\n        this.open_request[data.event_id][0](data);\n        delete this.open_request[data.event_id];\n      }\n    }\n  }\n  _connectToServer() {\n    return new Promise(resolve => {\n      const model_identifier = `${this.model_name}` + (this.model_id > 0 ? `/${this.model_id}` : '');\n      if (window.location.protocol === \"https:\") {\n        this.socket = new WebSocket(`wss://${window.location.host}/sdc_ws/model/${model_identifier}`);\n      } else {\n        this.socket = new WebSocket(`ws://${window.location.host}/sdc_ws/model/${model_identifier}`);\n      }\n      this.socket.onmessage = this._onMessage.bind(this);\n      this.socket.onclose = e => {\n        console.error(`SDC Model (${this.model_name}, ${this.model_id}) Socket closed unexpectedly`);\n        this._is_connected = false;\n        for (const [_key, value] of Object.entries(this.open_request)) {\n          value[1](e);\n        }\n        this.open_request = {};\n        setTimeout(() => {\n          if (this._auto_reconnect) {\n            this._connectToServer().then(() => {});\n          }\n        }, 1000);\n      };\n      this.socket.onerror = err => {\n        console.error(`Model Socket encountered error: ${err} Closing socket`);\n        if (this._is_connected) {\n          try {\n            this.socket.close();\n          } catch (e) {}\n        }\n      };\n      this.socket.onopen = () => {\n        resolve();\n      };\n    });\n  }\n  _checkConnection() {\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return new Promise((resolve, reject) => {\n      this.socket.send(JSON.stringify({\n        event: 'model',\n        event_type: 'connect',\n        event_id: id,\n        args: {\n          model_name: this.model_name,\n          model_query: this.model_query\n        }\n      }));\n      this.open_request[id] = [resolve, reject];\n    });\n  }\n  _parseServerRes(res) {\n    let updated = [];\n    for (let json_data of res) {\n      const pk = json_data.pk;\n      const obj = this.byPk(pk);\n      for (const [k, v] of Object.entries(json_data.fields)) {\n        if (v && typeof v === 'object' && v['__is_sdc_model__']) {\n          obj[k] = new SubModel(v['pk'], v['model']);\n        } else {\n          obj[k] = v;\n        }\n      }\n      updated.push(obj);\n    }\n    if (this.values_list.length === 1) {\n      this.values = this.values_list.at(-1);\n    } else {\n      this.values = {};\n    }\n    return updated;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_socket.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_test_utils.js":
/*!************************************************!*\
  !*** ./src/simpleDomControl/sdc_test_utils.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   controllerFromTestHtml: () => (/* binding */ controllerFromTestHtml),\n/* harmony export */   getCsrfToken: () => (/* binding */ getCsrfToken),\n/* harmony export */   get_controller: () => (/* binding */ get_controller)\n/* harmony export */ });\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/**\n * @jest-environment jsdom\n */\n\n\nlet spy = [],\n  _originAjax;\nfunction setDefaults() {\n  if (!jest) throw new Error(\"JEST is not defined\");\n  if (spy.length === 0) {\n    _originAjax = $.ajax.bind($);\n    spy.push(jest.spyOn($, 'ajax'));\n    spy[0].mockImplementation(function (a) {\n      return _originAjax(a).then(html => {\n        return html;\n      }).catch(html => {\n        return html;\n      });\n    });\n  }\n}\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        return decodeURIComponent(cookie.substring(name.length + 1));\n      }\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the CSRF token\n */\nfunction getCsrfToken() {\n  return getCookie('csrftoken');\n}\n\n/**\n *\n * @param html{string} HTML: .\n * @param afterLifecycle{bool} Lifecycle Methode -> Reruns the controller after the root controller has run the \"onRefresh\" methode. This is optional.\n * @returns {Promise<Array<{AbstractSDC}>>}\n */\nasync function controllerFromTestHtml(html, afterLifecycle = null) {\n  setDefaults();\n  const $body = $('body');\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.updateJquery();\n  $body.safeEmpty().append(html);\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app._isInit = false;\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.cleanCache();\n  await _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.init_sdc();\n  let children = _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.rootController.iterateAllChildren();\n  if (!afterLifecycle) {\n    return children;\n  }\n  const origenRefresh = children[0].onRefresh;\n  const refreshSpy = jest.spyOn(children[0], 'onRefresh');\n  return new Promise(resolve => {\n    refreshSpy.mockImplementation(function () {\n      refreshSpy.mockRestore();\n      const res = origenRefresh.apply(children[0], arguments);\n      resolve(children);\n      return res;\n    });\n  });\n}\n\n/**\n * Returns a controller. This controller has been created by the using the normal SDC life cycle.\n *\n * @param tag_name{string} Controller tag name (snake-case)\n * @param init_arguments{object} object: Mockeds the tag data arguments.\n * @param origen_html{string} HTML: Mocked content of the content in your target HTML container.\n * @returns {Promise<{AbstractSDC}>}\n */\nasync function get_controller(tag_name, init_arguments = {}, origen_html = '') {\n  setDefaults();\n  const $body = $('body');\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.updateJquery();\n  $body.safeEmpty();\n  const $controller = $(`<${tag_name}>${origen_html}</${tag_name}>`);\n  for (const [key, value] of Object.entries(init_arguments)) {\n    $controller.data(key, value);\n  }\n  const $divContainer = $('<div></div>').append($controller);\n  $body.append($divContainer);\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app._isInit = false;\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.cleanCache();\n  await _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.init_sdc();\n  return _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.getController($controller);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_test_utils.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_utils.js":
/*!*******************************************!*\
  !*** ./src/simpleDomControl/sdc_utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   agileAggregation: () => (/* binding */ agileAggregation),\n/* harmony export */   camelCaseToTagName: () => (/* binding */ camelCaseToTagName),\n/* harmony export */   checkIfParamNumberBoolOrString: () => (/* binding */ checkIfParamNumberBoolOrString),\n/* harmony export */   clearErrorsInForm: () => (/* binding */ clearErrorsInForm),\n/* harmony export */   getBody: () => (/* binding */ getBody),\n/* harmony export */   getParamsNameOfFunction: () => (/* binding */ getParamsNameOfFunction),\n/* harmony export */   jqueryInsertAt: () => (/* binding */ jqueryInsertAt),\n/* harmony export */   promiseDummyFactory: () => (/* binding */ promiseDummyFactory),\n/* harmony export */   setErrorsInForm: () => (/* binding */ setErrorsInForm),\n/* harmony export */   tagNameToCamelCase: () => (/* binding */ tagNameToCamelCase),\n/* harmony export */   tagNameToReadableName: () => (/* binding */ tagNameToReadableName),\n/* harmony export */   uploadFileFormData: () => (/* binding */ uploadFileFormData),\n/* harmony export */   uuidv4: () => (/* binding */ uuidv4)\n/* harmony export */ });\n/**\n * Reference to the HTML body.\n * @type {*|jQuery|HTMLElement}\n * @private\n */\nlet _$body;\nconst arg_names_reg = /([^\\s,]+)/g;\nconst commend_reg = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n/**\n * getBody returns the $body jQuery object.\n *\n * @returns {*|jQuery|HTMLElement} - body reference.\n */\nfunction getBody() {\n  if (!_$body) {\n    _$body = $('body');\n  }\n  return _$body;\n}\n\n/**\n *\n * @param {function} func\n * @returns {RegExpMatchArray|*[]}\n */\nfunction getParamsNameOfFunction(func) {\n  var fnstr = func.toString().replace(commend_reg, '');\n  var result = fnstr.slice(fnstr.indexOf('(') + 1, fnstr.indexOf(')')).match(arg_names_reg);\n  if (!result) {\n    return [];\n  }\n  return result;\n}\n\n/**\n * promiseDummyFactory generates a simple promise which returns instantly.\n * @return {Promise} window.utils\n */\nfunction promiseDummyFactory() {\n  return new Promise(function (resolve) {\n    resolve();\n  });\n}\nfunction camelCaseToTagName(str) {\n  str = str.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);\n  str = str.replace(/[0-9]+/g, number => `-${number}`);\n  return str.replace(/^[-]/g, ``);\n}\nfunction tagNameToCamelCase(str) {\n  str = str.replace(/-./g, letter => `${letter[1].toUpperCase()}`);\n  return str;\n}\nfunction tagNameToReadableName(str) {\n  str = str.replace(/-./g, letter => ` ${letter[1].toUpperCase()}`).replace(/^./g, letter => `${letter.toUpperCase()}`);\n  return str;\n}\nconst copyProps = (targetClass, sourceClass) => {\n  let source = sourceClass;\n  let propNamesTarget = Object.getOwnPropertyNames(targetClass.prototype).concat(Object.getOwnPropertySymbols(targetClass.prototype));\n  while (source.name !== '') {\n    Object.getOwnPropertyNames(source.prototype).concat(Object.getOwnPropertySymbols(source.prototype)).forEach(prop => {\n      if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/)) {\n        return;\n      }\n      if (!propNamesTarget.includes(prop)) {\n        propNamesTarget.push(prop);\n        Object.defineProperty(targetClass.prototype, prop, Object.getOwnPropertyDescriptor(source.prototype, prop));\n      }\n    });\n    source = Object.getPrototypeOf(source);\n  }\n};\n\n/**\n *\n * @param {typeof AbstractSDC} baseClass\n * @param {typeof AbstractSDC} mixins\n * @returns {AbstractSDC}\n */\nfunction agileAggregation(baseClass, ...mixins) {\n  let base = {\n    [baseClass.name]: class {\n      constructor(..._args) {\n        let _mixins = {};\n        mixins.forEach(mixin => {\n          let newMixin;\n          Object.assign(this, newMixin = new mixin());\n          newMixin._tagName = mixin.prototype._tagName;\n          newMixin._isMixin = true;\n          _mixins[mixin.name] = newMixin;\n        });\n        Object.assign(this, new baseClass());\n        this._mixins = _mixins;\n      }\n      static get name() {\n        return baseClass.name;\n      }\n      static className() {\n        return this.name;\n      }\n      get mixins() {\n        return this._mixins;\n      }\n    }\n  }[baseClass.name];\n  copyProps(base, baseClass);\n  mixins.forEach(mixin => {\n    copyProps(base, mixin);\n  });\n  return base;\n}\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\nfunction uploadFileFormData(formData, url, method) {\n  return $.ajax({\n    url: url,\n    //Server script to process data\n    type: method || 'POST',\n    xhr: function () {\n      // Custom XMLHttpRequest\n      var myXhr = $.ajaxSettings.xhr();\n      if (myXhr.upload) {\n        // Check if upload property exists\n        myXhr.upload.addEventListener('progress', progressHandlingFunction, false); // For handling the progress of the upload\n      }\n      return myXhr;\n    },\n    //Form data\n    data: formData,\n    //Options to tell jQuery not to process data or worry about content-type.\n    cache: false,\n    contentType: false,\n    processData: false,\n    beforeSend: function (xhr, settings) {\n      if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n        xhr.setRequestHeader(\"X-CSRFToken\", window.CSRF_TOKEN);\n      }\n    }\n  });\n}\nfunction progressHandlingFunction(e) {\n  if (e.lengthComputable) {\n    var percentVal = Math.round(e.loaded / e.total * 100);\n    var $progressContainer = $('.progress-container');\n    if (percentVal === 100) {\n      $progressContainer.hide();\n    } else {\n      $progressContainer.show();\n    }\n    percentVal += '%';\n    $progressContainer.find('.progress-bar').css({\n      'width': percentVal\n    }).text(percentVal);\n  }\n}\nfunction checkIfParamNumberBoolOrString(paramElement, controller = null) {\n  if (typeof paramElement !== 'string') {\n    return paramElement;\n  }\n  if (controller && typeof controller[paramElement] !== 'undefined') {\n    if (typeof controller[paramElement] === 'function') {\n      return controller[paramElement].bind(controller);\n    }\n    return controller[paramElement];\n  }\n  let isFloatReg = /^-?\\d+\\.?\\d+$/;\n  let isIntReg = /^-?\\d+$/;\n  let isBoolReg = /^(true|false)$/;\n  let isStringReg = /^(['][^']*['])|([\"][^\"]*[\"])$/;\n  if (paramElement.match(isBoolReg)) {\n    return paramElement === 'true';\n  } else if (paramElement === 'undefined') {\n    return undefined;\n  } else if (paramElement.toLowerCase() === 'none') {\n    return null;\n  } else if (paramElement.match(isIntReg)) {\n    return parseInt(paramElement);\n  } else if (paramElement.match(isFloatReg)) {\n    return parseFloat(paramElement);\n  } else if (paramElement.match(isStringReg)) {\n    return paramElement.substr(1, paramElement.length - 2);\n  }\n  return paramElement;\n}\nfunction uuidv4() {\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\n}\nfunction clearErrorsInForm($form) {\n  $form.find('.has-error').removeClass('has-error').find('.alert-danger').remove();\n  $form.find('.non-field-errors').remove();\n}\nfunction setErrorsInForm($form, $resForm) {\n  $resForm = $('<div>').append($resForm);\n  $form.find('.has-error').removeClass('has-error').find('.alert-danger').safeRemove();\n  $form.find('.non-field-errors').safeRemove();\n  let $file_container = $resForm.find('input[type=file]').parent();\n  $form.find('input[type=file]').parent().each(function (index) {\n    $(this).replaceWith($file_container[index]);\n  });\n  let hasNoError = $resForm.find('.non-field-errors').insertAfter($form.find('.hidden-form-fields')).length === 0;\n  $resForm.find('.has-error').each(function () {\n    hasNoError = false;\n    let $resErrorField = $(this);\n    let className = $resErrorField.data('auto-id');\n    let $errorField = $form.find('.form-group.' + className);\n    $errorField.addClass('has-error');\n    $errorField.find('.form-input-container').append($resErrorField.find('.alert-danger'));\n  });\n  return hasNoError;\n}\nfunction jqueryInsertAt($container, index, $newElement) {\n  let lastIndex = $container.children().size();\n  if (index < lastIndex) {\n    $container.children().eq(index).before($newElement);\n  } else {\n    $container.append($newElement);\n  }\n  return this;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_utils.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_view.js":
/*!******************************************!*\
  !*** ./src/simpleDomControl/sdc_view.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTROLLER_CLASS: () => (/* binding */ CONTROLLER_CLASS),\n/* harmony export */   DATA_CONTROLLER_KEY: () => (/* binding */ DATA_CONTROLLER_KEY),\n/* harmony export */   cleanCache: () => (/* binding */ cleanCache),\n/* harmony export */   getController: () => (/* binding */ getController),\n/* harmony export */   loadFilesFromController: () => (/* binding */ loadFilesFromController),\n/* harmony export */   reconcile: () => (/* binding */ reconcile),\n/* harmony export */   reloadHTMLController: () => (/* binding */ reloadHTMLController),\n/* harmony export */   reloadMethodHTML: () => (/* binding */ reloadMethodHTML),\n/* harmony export */   replaceTagElementsInContainer: () => (/* binding */ replaceTagElementsInContainer),\n/* harmony export */   runControllerFillContent: () => (/* binding */ runControllerFillContent)\n/* harmony export */ });\n/* harmony import */ var _sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_controller.js */ \"./src/simpleDomControl/sdc_controller.js\");\n/* harmony import */ var _sdc_params_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_params.js */ \"./src/simpleDomControl/sdc_params.js\");\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n\n\n\n\n\n/**\n * List of HTML files.\n * @type {{}}\n */\nlet htmlFiles = {};\nconst DATA_CONTROLLER_KEY = '_controller_';\nconst CONTROLLER_CLASS = '_sdc_controller_';\nfunction cleanCache() {\n  htmlFiles = {};\n}\n\n/**\n * findSdcTgs Finds all registered tags in a container. But it ignores\n * registered tags in registered tags. It collects all those\n * doms and returns a list of objects containing also the tag name the dom and the tag\n * names of the super controller\n *\n * @param {$} $container - jQuery container\n * @param {Array<string>} tagNameList - a string list with tag names.\n * @param {AbstractSDC} parentController - controller in surrounding\n * @return {Array} - a array of objects with all register tags found\n */\nfunction findSdcTgs($container, tagNameList, parentController) {\n  if (!$container) {\n    return [];\n  }\n  let $children = $container.children();\n  let emptyList = [];\n  $children.each(function (_, element) {\n    let $element = $(element);\n    let tagName = $element.prop('tagName').toLowerCase().split('_');\n    if ($.inArray(tagName[0], tagNameList) >= 0) {\n      emptyList.push({\n        tag: tagName[0],\n        super: tagName.splice(1) || [],\n        dom: $element\n      });\n    } else if (tagName[0].startsWith('this.')) {\n      $element.addClass(`_bind_to_update_handler sdc_uuid_${parentController._uuid}`);\n    } else {\n      emptyList = emptyList.concat(findSdcTgs($element, tagNameList, parentController));\n    }\n  });\n  return emptyList;\n}\n\n/**\n * replacePlaceholderController fills the parameter of the content\n * url this function uses the tag parameter\n *\n * @param controller - controller object\n * @param url - the origin content URL\n * @param urlValues - values for the url placeholder. In same order!!\n * @returns {string} - the correct URL with prefix.\n */\nfunction replacePlaceholderController(controller, url, urlValues) {\n  for (let key_idx in controller._urlParams) {\n    if (controller._urlParams.hasOwnProperty(key_idx)) {\n      let key = controller._urlParams[key_idx];\n      let re = RegExp(\"%\\\\(\" + key + \"\\\\)\\\\w\", \"gm\");\n      url = url.replace(re, \"\" + urlValues.shift());\n    }\n  }\n  return url;\n}\n\n/**\n * loadHTMLFile loads the HTML content file from the server via ajax request.\n *\n * If the HTML file is loaded already the function takes no action.\n *\n * @param path - a content URL from the controller.\n * @param {object} args - get args.\n * @param tag - a normalized tag-name as string.\n * @param hardReload - true if the file has to be reloaded every time.\n * @returns {Promise<Boolean>} - waits for the file to be loaded.\n */\nfunction loadHTMLFile(path, args, tag, hardReload) {\n  if (!path) {\n    return Promise.resolve(false);\n  } else if (htmlFiles[tag]) {\n    return Promise.resolve(htmlFiles[tag]);\n  }\n  args.VERSION = _sdc_main_js__WEBPACK_IMPORTED_MODULE_2__.app.VERSION;\n  args._method = 'content';\n  return $.get(path, args).then(function (data) {\n    if (!hardReload) {\n      htmlFiles[tag] = data;\n    }\n    return data;\n  }).catch(function (err) {\n    if (err.status === 301) {\n      const data = err.responseJSON;\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_3__.trigger)('_RedirectOnView', data['url-link']);\n    }\n    (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_3__.trigger)('navLoaded', {\n      'controller_name': () => err.status\n    });\n    throw `<sdc-error data-code=\"${err.status}\">${err.responseText}</sdc-error>`;\n  });\n}\n\n/**\n * replaceAllTagElementsInContainer replaces all registered tags by the controller.\n * In this step the life-cycle starts.\n *\n * @param {jquery} $container - given container\n * @param {AbstractSDC} parentController - parent contoller surrounded the container\n */\nfunction replaceAllTagElementsInContainer($container, parentController) {\n  parentController = parentController || $container.data(DATA_CONTROLLER_KEY);\n  return replaceTagElementsInContainer(_sdc_main_js__WEBPACK_IMPORTED_MODULE_2__.app.tagNames, $container, parentController);\n}\n\n/**\n * parseContentUrl uses the content URL prefix to marge the\n * correct URL. Also parses the url parameter\n *\n * @param {AbstractSDC} controller - controller object\n * @returns {string} - the correct URL with prefix.\n */\nfunction parseContentUrl(controller) {\n  let url = controller.contentUrl;\n  if (controller && controller._urlParams.length === 0) {\n    let re = /%\\(([^)]+)\\)\\w/gm;\n    let matches;\n    controller._urlParams = [];\n    while (matches = re.exec(url)) {\n      controller._urlParams.push(matches[1]);\n      controller.contentReload = true;\n    }\n  }\n  let params = (0,_sdc_params_js__WEBPACK_IMPORTED_MODULE_1__.getUrlParam)(controller, controller.$container);\n  if (controller._urlParams.length) {\n    url = replacePlaceholderController(controller, url, params);\n  }\n  controller.parsedContentUrl = url;\n  return {\n    url: url,\n    args: params[params.length - 1]\n  };\n}\n\n/**\n *\n * @param {jquery} $elem\n * @return {AbstractSDC}\n */\nfunction getController($elem) {\n  if ($elem.hasClass(CONTROLLER_CLASS)) {\n    return $elem.data(`${DATA_CONTROLLER_KEY}`);\n  }\n  return $elem.closest(`.${CONTROLLER_CLASS}`).data(`${DATA_CONTROLLER_KEY}`);\n}\n\n/**\n * loadFilesFromController loads the content (HTML) of a\n * Controller. If you have an alternative content URL is registered, for this\n * controller the origin content URL is ignored.\n *\n * The content is saved as jQuery object to the controller.$content property of\n * the controller.\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n * @returns {Promise<jQuery>} - the promise waits to the files are loaded. it returns the jQuery object.\n */\nfunction loadFilesFromController(controller) {\n  let getElements = {\n    args: {}\n  };\n  if (controller.contentUrl) {\n    getElements = parseContentUrl(controller, controller.contentUrl);\n    controller.contentUrl = getElements.url;\n  }\n  return Promise.all([loadHTMLFile(controller.contentUrl, getElements.args, controller._tagName, controller.contentReload)]).then(function (results) {\n    let htmlFile = results[0];\n    if (htmlFile) {\n      try {\n        return $(htmlFile);\n      } catch {\n        return $('<div></div>').append(htmlFile);\n      }\n    }\n    return null;\n  });\n}\n\n/**\n * reloadHTMLController loads the content (HTML) of a\n * Controller. If you have an alternative content URL is registered, for this\n * controller the origin content URL is ignored.\n *\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n *\n * @returns {Promise<jQuery>} - the promise waits to the files are loaded. it returns the jQuery object.\n */\nfunction reloadHTMLController(controller) {\n  if (controller.contentUrl) {\n    let getElements = parseContentUrl(controller, controller.contentUrl);\n    controller.contentUrl = getElements.url;\n    return loadHTMLFile(controller.contentUrl, getElements.args, controller._tagName, controller.contentReload);\n  }\n  return new Promise(resolve => {\n    resolve($());\n  });\n}\n\n/**\n *\n * @param {jquery} $element\n * @param {string} tagName\n * @param {Array<string>} superTagNameList\n * @param {AbstractSDC} parentController\n * @returns {boolean}\n */\nfunction runReplaceTagElementsInContainer($element, tagName, superTagNameList, parentController) {\n  let controller = $element.data(DATA_CONTROLLER_KEY);\n  if (controller) {\n    return replaceAllTagElementsInContainer($element, controller);\n  }\n  controller = (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__.controllerFactory)(parentController, $element, tagName, superTagNameList);\n  $element.data(DATA_CONTROLLER_KEY, controller);\n  $element.addClass(CONTROLLER_CLASS);\n  return (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__.runControlFlowFunctions)(controller, $element);\n}\n\n/**\n * runControllerFillContent empties the registered tag and replaces it by the controller\n * content. It sets the CSS tags for the relation with the CSS files.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @param {jquery} $html - jQuery loaded content\n * @return {Promise}\n */\nfunction runControllerFillContent(controller, $html) {\n  if ($html && $html.length > 0) {\n    controller.$container.empty();\n    controller.$container.attr(controller._tagName, '');\n    for (let mixinKey in controller._mixins) {\n      controller.$container.attr(controller._mixins[mixinKey]._tagName, '');\n    }\n    controller.$container.append($html);\n  }\n  return replaceAllTagElementsInContainer(controller.$container, controller);\n}\n\n/**\n * replaceTagElementsInContainer Finds all registered tags in a container. But it ignores\n * registered tags in registered tags. For each registered tag it loads the content.\n * Afterwards it starts the life cycle of the controller. I the next step it starts the\n * procedure for the child elements of the controller tag.\n *\n * @param {Array<string>} tagList - list of all registered tags\n * @param {jquery} $container - jQuery container to find the tags\n * @param {AbstractSDC} parentController - controller in surrounding\n */\nfunction replaceTagElementsInContainer(tagList, $container, parentController) {\n  return new Promise(resolve => {\n    let tagDescriptionElements = findSdcTgs($container, tagList, parentController);\n    let tagCount = tagDescriptionElements.length;\n    if (tagCount === 0) {\n      return resolve();\n    }\n    for (let elementIndex = 0; elementIndex < tagDescriptionElements.length; elementIndex++) {\n      runReplaceTagElementsInContainer(tagDescriptionElements[elementIndex].dom, tagDescriptionElements[elementIndex].tag, tagDescriptionElements[elementIndex].super, parentController).then(() => {\n        tagCount--;\n        if (tagCount === 0) {\n          return resolve();\n        }\n      });\n    }\n  });\n}\nfunction reloadMethodHTML(controller, $container) {\n  return _reloadMethodHTML(controller, $container ?? controller.$container);\n}\nfunction _reloadMethodHTML(controller, $dom) {\n  const plist = [];\n  $dom.find(`._bind_to_update_handler.sdc_uuid_${controller._uuid}`).each(function () {\n    const $this = $(this);\n    let result = undefined;\n    if ($this.hasClass(`_with_handler`)) {\n      result = $this.data('handler');\n    } else {\n      let controller_handler = this.tagName.toLowerCase().replace(/^this./, '');\n      if (controller[controller_handler]) {\n        result = controller[controller_handler];\n      }\n    }\n    if (typeof result === 'function') {\n      result = result.bind(controller)($this.data());\n    }\n    if (result !== undefined) {\n      plist.push(Promise.resolve(result).then(x => {\n        let $newContent = $(`<div></div>`);\n        $newContent.append(x);\n        $newContent = $this.clone().empty().append($newContent);\n        return controller.reconcile($newContent, $this);\n      }));\n    }\n  });\n  return Promise.all(plist);\n}\nfunction getNodeKey(node) {\n  if (node[0].nodeType === 3) {\n    return `TEXT__${node[0].nodeValue}`;\n  }\n  const res = [node[0].tagName];\n  if (node[0].nodeName === 'INPUT') {\n    [['name', ''], ['type', 'text'], ['id', '']].forEach(([key, defaultValue]) => {\n      const attr = node.attr(key) ?? defaultValue;\n      if (attr) {\n        res.push(attr);\n      }\n    });\n  }\n  return res.join('__');\n}\nfunction reconcileTree($element, id = [], parent = null) {\n  id.push(getNodeKey($element));\n  const obj = {\n    $element,\n    id: id.join('::'),\n    depth: id.length,\n    idx: 0,\n    op: null,\n    parent\n  };\n  return [obj].concat($element.contents().toArray().map(x => reconcileTree($(x), id.slice(), obj)).flat());\n}\nfunction reconcile($virtualNode, $realNode) {\n  const $old = reconcileTree($realNode);\n  const $new = reconcileTree($virtualNode);\n  $old.map((x, i) => x.idx = i);\n  $new.map((x, i) => x.idx = i);\n  const depth = Math.max(...$new.concat($old).map(x => x.depth));\n  const op_steps = lcbDiff($old, $new, depth);\n  let opIdx = 0;\n  let toRemove = [];\n  op_steps.forEach(op_step => {\n    const {\n      op,\n      $element,\n      idx\n    } = op_step;\n    if (op.type === 'keep_counterpart') {\n      if (op.counterpart.idx + opIdx !== idx) {\n        const elemBefore = op_step.getBefore();\n        if (!elemBefore) {\n          op_step.getRealParent().$element.prepend(op.counterpart.$element);\n        } else {\n          op.counterpart.$element.insertAfter(elemBefore.$element);\n        }\n      }\n      syncAttributes(op.counterpart.$element, $element);\n      if ($element.hasClass(CONTROLLER_CLASS)) {\n        $element.data(DATA_CONTROLLER_KEY).$container = op.counterpart.$element;\n        $element.data(DATA_CONTROLLER_KEY, null);\n      }\n      toRemove.push($element);\n    } else if (op.type === 'delete') {\n      $element.safeRemove();\n      opIdx--;\n    } else if (op.type === 'insert_ignore') {\n      opIdx++;\n    } else if (op.type === 'insert') {\n      opIdx++;\n      const {\n        after,\n        target\n      } = op_step.op;\n      if (after) {\n        $element.insertAfter(after.$element);\n      } else if (target) {\n        target.$element.prepend($element);\n      }\n    }\n  });\n  toRemove.forEach($element => $element.safeRemove());\n}\nfunction syncAttributes($real, $virtual) {\n  const realAttrs = $real[0].attributes ?? [];\n  const virtualAttrs = $virtual[0].attributes ?? [];\n  // Remove missing attrs\n  [...realAttrs].forEach(attr => {\n    if (!$virtual.is(`[${attr.name}]`)) {\n      $real.removeAttr(attr.name);\n    }\n  });\n\n  // Add or update\n  [...virtualAttrs].forEach(attr => {\n    if (!attr.name.startsWith(`data`) && $real.attr(attr.name) !== attr.value) {\n      $real.attr(attr.name, attr.value);\n    }\n  });\n  Object.entries($virtual.data()).forEach(([key, value]) => {\n    $real.data(key, value);\n  });\n}\n\n/**\n * LCB (Longest Common Branch) finds matching branches and reserves them!\n *\n * @param oldNodes\n * @param newNodes\n * @param depth\n * @returns {*|*[]}\n */\nfunction lcbDiff(oldNodes, newNodes, depth) {\n  newNodes.filter(x => x.depth === depth && !x.op).forEach(newNode => {\n    const oldNode = oldNodes.find(tempOldNode => {\n      return !tempOldNode.op && tempOldNode.id === newNode.id;\n    });\n    if (oldNode) {\n      const keepTreeBranch = (oldNode, newNode) => {\n        oldNode.op = {\n          type: 'keep',\n          idx: newNode.idx\n        };\n        newNode.op = {\n          type: 'keep_counterpart',\n          counterpart: oldNode\n        };\n        oldNode = oldNode.parent;\n        if (!oldNode || oldNode.op) {\n          return;\n        }\n        newNode = newNode.parent;\n        keepTreeBranch(oldNode, newNode);\n      };\n      keepTreeBranch(oldNode, newNode);\n    }\n  });\n  if (depth > 1) {\n    return lcbDiff(oldNodes, newNodes, depth - 1);\n  }\n  oldNodes.forEach((x, i) => {\n    if (!x.op) {\n      const idx = (oldNodes[i - 1]?.op.idx ?? -1) + 1;\n      x.op = {\n        type: 'delete',\n        idx\n      };\n    }\n  });\n  function getRealParent(element) {\n    if (!element.parent) {\n      return null;\n    }\n    return element.parent.op.type === 'keep_counterpart' ? element.parent.op.counterpart : element.parent;\n  }\n  function getBefore(element, idx) {\n    const startDepth = element.depth;\n    while (idx >= 0 && element.depth >= startDepth) {\n      idx -= 1;\n      element = newNodes[idx];\n      if (element.depth === startDepth) {\n        return element.op.type === 'keep_counterpart' ? element.op.counterpart : element;\n      }\n    }\n    return null;\n  }\n  newNodes.forEach((x, i) => {\n    x.getBefore = () => getBefore(x, i);\n    x.getRealParent = () => getRealParent(x);\n    if (!x.op) {\n      const target = x.getRealParent();\n      const type = target?.op.type === 'insert' ? 'insert_ignore' : 'insert';\n      x.op = {\n        type,\n        target,\n        after: x.getBefore()\n      };\n    }\n  });\n  const tagged = [...oldNodes, ...newNodes];\n  return tagged.sort((a, b) => {\n    const aVal = a.op?.idx ?? a.idx;\n    const bVal = b.op?.idx ?? b.idx;\n    return aVal - bVal;\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_view.js\n");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval-source-map devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ var __webpack_exports__AbstractSDC = __webpack_exports__.AbstractSDC;
/******/ var __webpack_exports__allOff = __webpack_exports__.allOff;
/******/ var __webpack_exports__app = __webpack_exports__.app;
/******/ var __webpack_exports__checkIfParamNumberBoolOrString = __webpack_exports__.checkIfParamNumberBoolOrString;
/******/ var __webpack_exports__clearErrorsInForm = __webpack_exports__.clearErrorsInForm;
/******/ var __webpack_exports__controllerFactory = __webpack_exports__.controllerFactory;
/******/ var __webpack_exports__on = __webpack_exports__.on;
/******/ var __webpack_exports__runControlFlowFunctions = __webpack_exports__.runControlFlowFunctions;
/******/ var __webpack_exports__setErrorsInForm = __webpack_exports__.setErrorsInForm;
/******/ var __webpack_exports__setEvent = __webpack_exports__.setEvent;
/******/ var __webpack_exports__socketReconnect = __webpack_exports__.socketReconnect;
/******/ var __webpack_exports__test_utils = __webpack_exports__.test_utils;
/******/ var __webpack_exports__trigger = __webpack_exports__.trigger;
/******/ export { __webpack_exports__AbstractSDC as AbstractSDC, __webpack_exports__allOff as allOff, __webpack_exports__app as app, __webpack_exports__checkIfParamNumberBoolOrString as checkIfParamNumberBoolOrString, __webpack_exports__clearErrorsInForm as clearErrorsInForm, __webpack_exports__controllerFactory as controllerFactory, __webpack_exports__on as on, __webpack_exports__runControlFlowFunctions as runControlFlowFunctions, __webpack_exports__setErrorsInForm as setErrorsInForm, __webpack_exports__setEvent as setEvent, __webpack_exports__socketReconnect as socketReconnect, __webpack_exports__test_utils as test_utils, __webpack_exports__trigger as trigger };
/******/ 

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBQUE7U0FDQTs7U0FFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTs7U0FFQTtTQUNBOztTQUVBO1NBQ0E7U0FDQTs7Ozs7VUN0QkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSx5Q0FBeUMsd0NBQXdDO1VBQ2pGO1VBQ0E7VUFDQTs7Ozs7VUNQQTs7Ozs7VUNBQTtVQUNBO1VBQ0E7VUFDQSx1REFBdUQsaUJBQWlCO1VBQ3hFO1VBQ0EsZ0RBQWdELGFBQWE7VUFDN0Q7Ozs7O1NFTkE7U0FDQTtTQUNBO1NBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9iZWZvcmUtc3RhcnR1cCIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIiwid2VicGFjazovLy93ZWJwYWNrL2FmdGVyLXN0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGNhbid0IGJlIGlubGluZWQgYmVjYXVzZSB0aGUgZXZhbC1zb3VyY2UtbWFwIGRldnRvb2wgaXMgdXNlZC5cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
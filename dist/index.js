/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./simpleDomControl/AbstractSDC.js":
/*!*****************************************!*\
  !*** ./simpleDomControl/AbstractSDC.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractSDC: () => (/* binding */ AbstractSDC)\n/* harmony export */ });\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_events.js */ \"./simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_main.js */ \"./simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_socket.js */ \"./simpleDomControl/sdc_socket.js\");\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_utils.js */ \"./simpleDomControl/sdc_utils.js\");\n\n\n\n\nclass AbstractSDC {\n  constructor() {\n    this._uuid = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.uuidv4)();\n    this.contentUrl = '';\n    this.contentReload = false;\n    this.hasSubnavView = false;\n    this.events = [];\n    this.load_async = false;\n    this.isEventsSet = false;\n    this._allEvents = null;\n    this._urlParams = [];\n    this._models = [];\n\n    // ------------------ Old deprecated properties ----------------------\n    this._cssUrls = [];\n    this.afterShow = () => {\n      console.warn('afterShow is deprecated!!');\n    };\n    // -------------- End old deprecated properties ----------------------\n\n    /**\n     *\n     * @type {{string: AbstractSDC}}\n     */\n    this._mixins = {};\n\n    /**\n     * @type {string}\n     */\n    this._tagName = '';\n\n    /**\n     * @type {{string:AbstractSDC}}\n     */\n    this._childController = {};\n\n    /**\n     * @type {AbstractSDC}\n     */\n    this._parentController = null;\n\n    /**\n     * @type {boolean}\n     */\n    this._onLoadDone = false;\n\n    /**\n     * @type {jquery}\n     */\n    this.$container = null;\n\n    /**\n     *\n     * @type {boolean}\n     */\n    this._isMixin = false;\n  }\n\n  /**\n   *\n   * @param {string} method must be in {}\n   * @param {Array} args in arguments of\n   *\n   */\n  _runLifecycle(method, args) {\n    if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.DEBUG) {\n      console.debug(method, this._tagName);\n    }\n    let returnPromisses = [];\n    if (this._isMixin) {\n      return;\n    }\n    this._isMixin = true;\n    for (let mixinKey in this._mixins) {\n      let mixin = this._mixins[mixinKey];\n      if (typeof mixin[method] === 'function') {\n        returnPromisses.push(mixin[method].apply(this, args));\n      }\n    }\n    return Promise.all(returnPromisses).then(() => {\n      this._isMixin = false;\n    });\n  }\n  onInit() {\n    if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.DEBUG) {\n      console.DEBUG(Array.apply(null, arguments), this._tagName);\n    }\n  }\n  onLoad() {\n    return this._runLifecycle('onLoad', arguments);\n  }\n  willShow() {\n    return this._runLifecycle('willShow', arguments);\n  }\n  onRefresh() {\n    return this._runLifecycle('onRefresh', arguments);\n  }\n  onRemove() {\n    this._runLifecycle('onRemove', arguments);\n    return true;\n  }\n  remove() {\n    for (const model of this._models) {\n      model.close();\n    }\n    let _childController = this._childController;\n    for (let i in _childController) {\n      if (_childController.hasOwnProperty(i)) {\n        for (let cc of _childController[i]) {\n          if (!cc.remove()) {\n            return false;\n          }\n        }\n      }\n    }\n    if (!this.onRemove || this.onRemove()) {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_0__.allOff)(this);\n      const c_name = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.tagNameToCamelCase)(this._tagName);\n      if (this._parentController._childController[c_name]) {\n        let arr = this._parentController._childController[c_name];\n        for (let i = 0; i < arr.length; i++) {\n          if (arr[i] === this) {\n            arr.splice(i, 1);\n          }\n        }\n      }\n      this.$container.remove();\n      delete this;\n      return true;\n    }\n    return false;\n  }\n  controller_name() {\n    return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.tagNameToReadableName)(this._tagName);\n  }\n  addEvent(event, selector, handler) {\n    this.getEvents();\n    this._allEvents[event] = this._allEvents[event] || {};\n    this._allEvents[event][selector] = handler;\n  }\n  getEvents() {\n    if (this._allEvents) return this._allEvents;\n    let allEvents = [];\n    allEvents = allEvents.concat(this.events);\n    for (let mixinKey in this._mixins) {\n      let mixin = this._mixins[mixinKey];\n      if (Array.isArray(mixin.events)) {\n        allEvents = allEvents.concat(mixin.events);\n      }\n    }\n    return this._allEvents = Object.assign({}, ...allEvents);\n  }\n  post(url, args) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.post(this, url, args);\n  }\n  get(url, args) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.get(this, url, args);\n  }\n  submitForm(form, url, method) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.submitFormAndUpdateView(this, form, url, method);\n  }\n  serverCall(methode, args) {\n    let re = /sdc_view\\/([^/]+)/i;\n    let app = this.contentUrl.match(re);\n    if (!app || app.length < 2) {\n      console.error('To use the serverCall function the contentUrl must be set: ' + this.name);\n      return;\n    }\n    return (0,_sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__.callServer)(app[1], this._tagName, methode, args);\n  }\n\n  /**\n   *\n   * @param model_name {string}\n   * @param model_query {Object}\n   * @constructor\n   */\n  newModel(model_name, model_query = {}) {\n    let model = new _sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__.Model(model_name, model_query);\n    this._models.push(model);\n    return model;\n  }\n\n  /**\n   * Adapter to this.$container.find\n   * @param {string} domSelector\n   */\n  find(domSelector) {\n    return this.$container.find(domSelector);\n  }\n  refresh() {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.refresh(this.$container, this);\n  }\n  reload() {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.reloadController(this);\n  }\n\n  /**\n   * Model Form Events\n   */\n\n  _submitModelForm($form, e) {\n    let p_list = [];\n    if (!this._isMixin) {\n      e.stopPropagation();\n      e.preventDefault();\n      let model = $form.data('model');\n      const values = model.syncForm($form);\n      for (let instance_value of values) {\n        p_list.push(new Promise((resolve, reject) => {\n          let prom;\n          if (instance_value.pk !== null) {\n            prom = model.save(instance_value.pk);\n          } else {\n            prom = model.create(instance_value);\n          }\n          prom.then(res => {\n            (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.clearErrorsInForm)($form);\n            resolve(res);\n          }).catch(data => {\n            (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.setErrorsInForm)($form, $(data.html));\n            reject(data);\n          });\n        }));\n      }\n    }\n    return Promise.all(p_list).then(res => {\n      return Object.assign({}, ...res.flat());\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./simpleDomControl/AbstractSDC.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc.js":
/*!*********************************!*\
  !*** ./simpleDomControl/sdc.js ***!
  \*********************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractSDC: () => (/* reexport safe */ _AbstractSDC_js__WEBPACK_IMPORTED_MODULE_1__.AbstractSDC),\n/* harmony export */   allOff: () => (/* reexport safe */ _sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.allOff),\n/* harmony export */   app: () => (/* reexport safe */ _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app),\n/* harmony export */   checkIfParamNumberBoolOrString: () => (/* reexport safe */ _sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.checkIfParamNumberBoolOrString),\n/* harmony export */   clearErrorsInForm: () => (/* reexport safe */ _sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.clearErrorsInForm),\n/* harmony export */   on: () => (/* reexport safe */ _sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.on),\n/* harmony export */   setErrorsInForm: () => (/* reexport safe */ _sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.setErrorsInForm),\n/* harmony export */   setEvent: () => (/* reexport safe */ _sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.setEvent),\n/* harmony export */   trigger: () => (/* reexport safe */ _sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.trigger)\n/* harmony export */ });\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_main.js */ \"./simpleDomControl/sdc_main.js\");\n/* harmony import */ var _AbstractSDC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AbstractSDC.js */ \"./simpleDomControl/AbstractSDC.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_events.js */ \"./simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_utils.js */ \"./simpleDomControl/sdc_utils.js\");\n\n\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zaW1wbGVEb21Db250cm9sL3NkYy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQWtDO0FBQ1c7QUFDaUI7QUFDb0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGMvLi9zaW1wbGVEb21Db250cm9sL3NkYy5qcz80OTU2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7YXBwfSBmcm9tICcuL3NkY19tYWluLmpzJztcbmltcG9ydCB7QWJzdHJhY3RTREN9IGZyb20gJy4vQWJzdHJhY3RTREMuanMnO1xuaW1wb3J0IHtvbiwgdHJpZ2dlciwgYWxsT2ZmLCBzZXRFdmVudH0gZnJvbSAnLi9zZGNfZXZlbnRzLmpzJztcbmltcG9ydCB7Y2xlYXJFcnJvcnNJbkZvcm0sIHNldEVycm9yc0luRm9ybSwgY2hlY2tJZlBhcmFtTnVtYmVyQm9vbE9yU3RyaW5nfSBmcm9tICcuL3NkY191dGlscy5qcyc7XG5cbmV4cG9ydCB7XG4gICAgYXBwLCBBYnN0cmFjdFNEQywgb24sIHRyaWdnZXIsIGFsbE9mZiwgc2V0RXZlbnQsIGNsZWFyRXJyb3JzSW5Gb3JtLCBzZXRFcnJvcnNJbkZvcm0sIGNoZWNrSWZQYXJhbU51bWJlckJvb2xPclN0cmluZ1xufVxuIl0sIm5hbWVzIjpbImFwcCIsIkFic3RyYWN0U0RDIiwib24iLCJ0cmlnZ2VyIiwiYWxsT2ZmIiwic2V0RXZlbnQiLCJjbGVhckVycm9yc0luRm9ybSIsInNldEVycm9yc0luRm9ybSIsImNoZWNrSWZQYXJhbU51bWJlckJvb2xPclN0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc_controller.js":
/*!********************************************!*\
  !*** ./simpleDomControl/sdc_controller.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Global: () => (/* binding */ Global),\n/* harmony export */   controllerFactory: () => (/* binding */ controllerFactory),\n/* harmony export */   controllerList: () => (/* binding */ controllerList),\n/* harmony export */   runControlFlowFunctions: () => (/* binding */ runControlFlowFunctions)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./simpleDomControl/sdc_view.js\");\n/* harmony import */ var _sdc_params_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_params.js */ \"./simpleDomControl/sdc_params.js\");\n\n\n\nlet Global = {};\nlet controllerList = {};\nfunction prepareMixins(superTagNameList, tagName) {\n  superTagNameList = superTagNameList.concat(controllerList[tagName][1]);\n  superTagNameList = superTagNameList.filter((value, index, self) => {\n    return self.indexOf(value) === index;\n  });\n  let hasAdded = true;\n  while (hasAdded) {\n    hasAdded = false;\n    for (let tag of superTagNameList) {\n      for (let newTag of controllerList[tag][1]) {\n        if (!superTagNameList.includes(newTag)) {\n          superTagNameList.push(newTag);\n          hasAdded = true;\n        }\n      }\n    }\n  }\n  return superTagNameList;\n}\n\n/**\n * setParentController sets the parent controller as property: 'parentController'\n * to the child controller. Also it adds the child controller to the property list:\n * 'parentController' to the parent controller\n *\n * @param {AbstractSDC} parentController - js controller instance, controller of the parent DOM of the controllers DOM\n * @param {AbstractSDC} controller - js controller instance\n * @return {AbstractSDC} - parentController\n */\nfunction setParentController(parentController, controller) {\n  if (parentController) {\n    let controllerName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(controller._tagName);\n    if (!parentController._childController[controllerName]) {\n      parentController._childController[controllerName] = [];\n    }\n    parentController._childController[controllerName].push(controller);\n  }\n  return controller._parentController = parentController;\n}\n\n/**\n * controllerFactoryInstance it generates a controller instance\n * depending if the controller is registered as a global controller. It sets the\n * $container object to the jQuery representation of the tag.\n *\n * It handles the init parameter by the data values of the DOM.\n *\n * It handles the super extensions.\n *\n * @param {AbstractSDC} parentController - Controller of the parent DOM\n * @param {jquery} $element - The current DOM jQuery\n * @param {string} tagName - the registered tag name of the current DOM\n * @param {string} superTagNameList - tag names of super controller\n * @return {AbstractSDC} -  new Controller\n */\nfunction controllerFactoryInstance(parentController, $element, tagName, superTagNameList) {\n  let mixinControllerClass = [];\n  superTagNameList = prepareMixins(superTagNameList, tagName);\n  for (let superTagName of superTagNameList) {\n    mixinControllerClass.push(controllerList[superTagName][0]);\n  }\n  let controllerClass = controllerList[tagName][0];\n  let controller = new ((0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.agileAggregation)(controllerClass, ...mixinControllerClass))();\n  controller._tagName = tagName;\n  setParentController(parentController, controller);\n  controller.$container = $element;\n  (0,_sdc_params_js__WEBPACK_IMPORTED_MODULE_2__.runOnInitWithParameter)($element, controller);\n  return controller;\n}\n\n/**\n * controllerFactory it either generates a controller or takes a globe instance\n * depending if the controller is registered as a global controller. It sets the\n * $container object to the jQuery representation of the tag.\n *\n * Remember Global controller can not have a super controller!\n *\n * @param {AbstractSDC} parentController - Controller of the parent DOM\n * @param {jquery} $element - The current DOM jQuery\n * @param {string} tagName - the registered tag name of the current DOM\n * @param {string} superTagNameList - tag names of super controller\n * @return {AbstractSDC} -  new Controller\n */\nfunction controllerFactory(parentController, $element, tagName, superTagNameList) {\n  let gTagName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(tagName);\n  if (Global[gTagName]) {\n    let controller = Global[gTagName];\n    setParentController(parentController, controller);\n    controller.$container = $element;\n    return controller;\n  }\n  return controllerFactoryInstance(parentController, $element, tagName, superTagNameList);\n}\n\n/**\n * runControllerShow first runs onLoad and fill content for all sub\n * controller. Only if all the sub controller are loaded the willShow\n * control flow function gets called.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @param {jquery} $html - jQuery loaded content\n * @return {Promise<*>} - return of the onLoad function\n */\nfunction runControllerShow(controller, $html) {\n  return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.runControllerFillContent)(controller, $html).then(function (args) {\n    args = args || true;\n    if (controller.willShow) {\n      let loadPromiseOrContent = controller.willShow();\n      if (loadPromiseOrContent instanceof Promise) {\n        return loadPromiseOrContent.then(function () {\n          return args;\n        });\n      }\n    }\n    return args;\n  });\n}\n\n/**\n * runControllerLoad Calls the onLoad function of the controller.\n * This function is called before the HTML is set to the page.\n * The parameter is a list of children of the tag and the registered tag.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @return {Promise<*>} - return of the onLoad function\n */\nfunction runControllerLoad(controller) {\n  return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.loadFilesFromController)(controller).then(html => {\n    if (!controller.onLoad || controller._onLoadDone) {\n      return html;\n    }\n    controller._onLoadDone = true;\n    let loadPromise = controller.onLoad(html);\n    return (loadPromise || (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)()).then(() => {\n      return html;\n    });\n  });\n}\n\n/**\n * runControlFlowFunctions runs the control flow functions:\n * 1. onLoad()\n * 2. fill content\n * 3. willShow(dom parameter)\n * 4. refresh()\n *\n * @param controller\n */\nfunction runControlFlowFunctions(controller) {\n  const prom_controller = runControllerLoad(controller).then(function ($html) {\n    return runControllerShow(controller, $html);\n  }).then(() => {\n    return controller.refresh && controller.refresh();\n  });\n  if (controller.load_async) {\n    return Promise.resolve();\n  }\n  return prom_controller;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc_controller.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc_dom_events.js":
/*!********************************************!*\
  !*** ./simpleDomControl/sdc_dom_events.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STD_EVENT_LIST: () => (/* binding */ STD_EVENT_LIST),\n/* harmony export */   initEvents: () => (/* binding */ initEvents),\n/* harmony export */   setControllerEvents: () => (/* binding */ setControllerEvents),\n/* harmony export */   windowEventHandler: () => (/* binding */ windowEventHandler)\n/* harmony export */ });\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_view.js */ \"./simpleDomControl/sdc_view.js\");\n\nconst STD_EVENT_LIST = Object.keys(window).filter(key => /^on/.test(key)).map(x => x.slice(2));\nfunction windowEventHandler(event) {\n  let ev_type = event.type;\n  if (event.hasOwnProperty('namespace') && event.namespace && event.namespace.length) ev_type += `.${event.namespace}`;\n  let $elm = $(event.target);\n  let controller = null;\n  let is_done = false;\n  let is_last_elem = false;\n  event.stopImmediatePropagation = () => is_last_elem = true;\n  event.stopPropagation = () => is_last_elem = is_done = true;\n  while ($elm.length) {\n    let attrs = $elm.attr(`sdc_${ev_type}`);\n    if (attrs) {\n      if (!controller) {\n        controller = (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_0__.getController)($elm);\n        if (!controller) return;\n      }\n      while (controller) {\n        attrs.split(' ').forEach(attr => {\n          if (is_done) return;\n          let handler = null;\n          if (typeof attr === 'function') {\n            handler = attr;\n          } else if (typeof controller[attr] === 'function') {\n            handler = controller[attr];\n          } else if (typeof attr === 'string' && attr.startsWith('this.event_')) {\n            handler = controller.getEvents()[ev_type];\n            if (!handler) {\n              return;\n            }\n            handler = handler[attr.slice('this.event_'.length)];\n            if (!handler) {\n              return;\n            }\n          }\n          handler && handler.call(controller, $elm, event);\n        });\n        if (is_last_elem) return;\n        controller = controller._parentController;\n      }\n    }\n    if (is_done) return;\n    $elm = $elm.parent();\n  }\n  return {\n    res: true\n  };\n}\n\n/**\n *\n */\nfunction initEvents() {\n  const $window = $(window);\n  STD_EVENT_LIST.forEach(ev_type => {\n    $window.on(ev_type, windowEventHandler);\n  });\n}\n\n/**\n *\n * @param {AbstractSDC} controller\n */\nfunction setControllerEvents(controller) {\n  if (controller.isEventsSet) {\n    return;\n  }\n  const events = controller.getEvents();\n  for (let ev_type in events) {\n    if (events.hasOwnProperty(ev_type)) {\n      let eventList = events[ev_type];\n      for (let domSelector in eventList) {\n        if (eventList.hasOwnProperty(domSelector)) {\n          controller.find(domSelector).each(function () {\n            let $elements = $(this);\n            let event_list = $elements.attr(`sdc_${ev_type}`) || null;\n            if (!event_list) event_list = [];else event_list = event_list.split(' ');\n            const new_key = `this.event_${domSelector}`;\n            if (event_list.indexOf(new_key) === -1) {\n              event_list.push(new_key);\n              $elements.attr(`sdc_${ev_type}`, event_list.join(' '));\n            }\n          });\n        }\n      }\n    }\n  }\n\n  //controller.isEventsSet = true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc_dom_events.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc_events.js":
/*!****************************************!*\
  !*** ./simpleDomControl/sdc_events.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allOff: () => (/* binding */ allOff),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   setEvent: () => (/* binding */ setEvent),\n/* harmony export */   trigger: () => (/* binding */ trigger)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./simpleDomControl/sdc_utils.js\");\n\n\n/**\n * A list of handler (controller) for the registered events.\n * @type {{}}\n */\nlet handlerList = {};\n\n/**\n * eventList is a map connection the event to a responsing function name.\n * @type {{}}\n */\nlet eventList = {};\n\n/**\n * on is a function to register a controller to a event. The controller has to\n * implement the the handler function. The handler functions by default has the same\n * name as the event. You can use the app.events.setEvent function to register a\n * event with a different named function.\n *\n * @param {string} name - the event name String\n * @param {AbstractSDC} controller -  a instance of a JavaScript controller object.\n */\nfunction on(name, controller) {\n  setEvent(name);\n  if (!eventList.hasOwnProperty(name)) {\n    return console.log('No event: ' + name, controller);\n  }\n  let funcName = eventList[name];\n  if (!controller[funcName]) {\n    return console.log('No event handler: ' + name, controller);\n  }\n  handlerList[name].push(controller);\n}\n\n/**\n * setEvent allows you to register a event with a function with a different\n * name as the event.\n *\n * @param {string} name - event name\n * @param {string} functionName - function name\n */\nfunction setEvent(name, functionName) {\n  if (!functionName) {\n    functionName = name;\n  }\n  if (!eventList[name]) {\n    eventList[name] = functionName;\n    handlerList[name] = [];\n  }\n}\n\n/**\n * allOff is to remove all events of the controller instance\n * ! important before destroying the instance.\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n */\nfunction allOff(controller) {\n  for (let eventName in handlerList) {\n    if (handlerList.hasOwnProperty(eventName)) {\n      for (let i = handlerList[eventName].length; i >= 0; i--) {\n        if (controller === handlerList[eventName][i]) {\n          handlerList[eventName].splice(i, 1);\n        }\n      }\n    }\n  }\n}\n\n/**\n * trigger triggers the event. The handler function of all registered\n * controller gets called. The returned Promise returns a list with all\n * returned values.\n *\n * @param {string} name - event name\n * @returns {Promise<object>} - waits to return all return values of the handler\n */\nfunction trigger(name) {\n  let args = Array.apply(null, arguments);\n  name = args.shift();\n  if (!handlerList.hasOwnProperty(name) || !eventList.hasOwnProperty(name)) {\n    return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)();\n  }\n  let handler = handlerList[name];\n  let funcName = eventList[name];\n  let list = [];\n  for (let i = 0; i < handler.length; i++) {\n    let return_val = handler[i][funcName].apply(handler[i], args);\n    if (typeof return_val !== \"undefined\") {\n      list.push(return_val);\n    }\n  }\n  return Promise.all(list);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFHUyxPQUFPLENBQUNSLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUU7SUFDckMsSUFBSVcsVUFBVSxHQUFHRixPQUFPLENBQUNULENBQUMsQ0FBQyxDQUFDTCxRQUFRLENBQUMsQ0FBQ1csS0FBSyxDQUFDRyxPQUFPLENBQUNULENBQUMsQ0FBQyxFQUFFSSxJQUFJLENBQUM7SUFDN0QsSUFBSSxPQUFPTyxVQUFVLEtBQUssV0FBVyxFQUFFO01BQ25DRCxJQUFJLENBQUNkLElBQUksQ0FBQ2UsVUFBVSxDQUFDO0lBQ3pCO0VBQ0o7RUFFQSxPQUFPQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0gsSUFBSSxDQUFDO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2RjLy4vc2ltcGxlRG9tQ29udHJvbC9zZGNfZXZlbnRzLmpzPzIxMmYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtwcm9taXNlRHVtbXlGYWN0b3J5fSBmcm9tIFwiLi9zZGNfdXRpbHMuanNcIjtcblxuXG4vKipcbiAqIEEgbGlzdCBvZiBoYW5kbGVyIChjb250cm9sbGVyKSBmb3IgdGhlIHJlZ2lzdGVyZWQgZXZlbnRzLlxuICogQHR5cGUge3t9fVxuICovXG5sZXQgaGFuZGxlckxpc3QgPSB7fTtcblxuLyoqXG4gKiBldmVudExpc3QgaXMgYSBtYXAgY29ubmVjdGlvbiB0aGUgZXZlbnQgdG8gYSByZXNwb25zaW5nIGZ1bmN0aW9uIG5hbWUuXG4gKiBAdHlwZSB7e319XG4gKi9cbmxldCBldmVudExpc3QgPSB7fTtcblxuLyoqXG4gKiBvbiBpcyBhIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGEgY29udHJvbGxlciB0byBhIGV2ZW50LiBUaGUgY29udHJvbGxlciBoYXMgdG9cbiAqIGltcGxlbWVudCB0aGUgdGhlIGhhbmRsZXIgZnVuY3Rpb24uIFRoZSBoYW5kbGVyIGZ1bmN0aW9ucyBieSBkZWZhdWx0IGhhcyB0aGUgc2FtZVxuICogbmFtZSBhcyB0aGUgZXZlbnQuIFlvdSBjYW4gdXNlIHRoZSBhcHAuZXZlbnRzLnNldEV2ZW50IGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGFcbiAqIGV2ZW50IHdpdGggYSBkaWZmZXJlbnQgbmFtZWQgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSB0aGUgZXZlbnQgbmFtZSBTdHJpbmdcbiAqIEBwYXJhbSB7QWJzdHJhY3RTREN9IGNvbnRyb2xsZXIgLSAgYSBpbnN0YW5jZSBvZiBhIEphdmFTY3JpcHQgY29udHJvbGxlciBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbihuYW1lLCBjb250cm9sbGVyKSB7XG4gICAgc2V0RXZlbnQobmFtZSk7XG4gICAgaWYgKCFldmVudExpc3QuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdObyBldmVudDogJyArIG5hbWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cblxuICAgIGxldCBmdW5jTmFtZSA9IGV2ZW50TGlzdFtuYW1lXTtcbiAgICBpZiAoIWNvbnRyb2xsZXJbZnVuY05hbWVdKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnTm8gZXZlbnQgaGFuZGxlcjogJyArIG5hbWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cblxuICAgIGhhbmRsZXJMaXN0W25hbWVdLnB1c2goY29udHJvbGxlcik7XG59XG5cbi8qKlxuICogc2V0RXZlbnQgYWxsb3dzIHlvdSB0byByZWdpc3RlciBhIGV2ZW50IHdpdGggYSBmdW5jdGlvbiB3aXRoIGEgZGlmZmVyZW50XG4gKiBuYW1lIGFzIHRoZSBldmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jdGlvbk5hbWUgLSBmdW5jdGlvbiBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFdmVudChuYW1lLCBmdW5jdGlvbk5hbWUpIHtcbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRMaXN0W25hbWVdKSB7XG4gICAgICAgIGV2ZW50TGlzdFtuYW1lXSA9IGZ1bmN0aW9uTmFtZTtcbiAgICAgICAgaGFuZGxlckxpc3RbbmFtZV0gPSBbXTtcbiAgICB9XG59XG5cbi8qKlxuICogYWxsT2ZmIGlzIHRvIHJlbW92ZSBhbGwgZXZlbnRzIG9mIHRoZSBjb250cm9sbGVyIGluc3RhbmNlXG4gKiAhIGltcG9ydGFudCBiZWZvcmUgZGVzdHJveWluZyB0aGUgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFNEQ30gY29udHJvbGxlciAtIGEgaW5zdGFuY2Ugb2YgYSBKYXZhU2NyaXB0IGNvbnRyb2xsZXIgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsT2ZmKGNvbnRyb2xsZXIpIHtcbiAgICBmb3IgKGxldCBldmVudE5hbWUgaW4gaGFuZGxlckxpc3QpIHtcbiAgICAgICAgaWYgKGhhbmRsZXJMaXN0Lmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBoYW5kbGVyTGlzdFtldmVudE5hbWVdLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlciA9PT0gaGFuZGxlckxpc3RbZXZlbnROYW1lXVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyTGlzdFtldmVudE5hbWVdLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogdHJpZ2dlciB0cmlnZ2VycyB0aGUgZXZlbnQuIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIG9mIGFsbCByZWdpc3RlcmVkXG4gKiBjb250cm9sbGVyIGdldHMgY2FsbGVkLiBUaGUgcmV0dXJuZWQgUHJvbWlzZSByZXR1cm5zIGEgbGlzdCB3aXRoIGFsbFxuICogcmV0dXJuZWQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gZXZlbnQgbmFtZVxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gLSB3YWl0cyB0byByZXR1cm4gYWxsIHJldHVybiB2YWx1ZXMgb2YgdGhlIGhhbmRsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIobmFtZSkge1xuICAgIGxldCBhcmdzID0gQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBuYW1lID0gYXJncy5zaGlmdCgpO1xuICAgIGlmKCFoYW5kbGVyTGlzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCAhZXZlbnRMaXN0Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlRHVtbXlGYWN0b3J5KCk7XG4gICAgfVxuICAgIGxldCBoYW5kbGVyID0gaGFuZGxlckxpc3RbbmFtZV07XG4gICAgbGV0IGZ1bmNOYW1lID0gZXZlbnRMaXN0W25hbWVdO1xuXG4gICAgbGV0IGxpc3QgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcmV0dXJuX3ZhbCA9IGhhbmRsZXJbaV1bZnVuY05hbWVdLmFwcGx5KGhhbmRsZXJbaV0sIGFyZ3MpO1xuICAgICAgICBpZiAodHlwZW9mIHJldHVybl92YWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChyZXR1cm5fdmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChsaXN0KTtcbn0iXSwibmFtZXMiOlsicHJvbWlzZUR1bW15RmFjdG9yeSIsImhhbmRsZXJMaXN0IiwiZXZlbnRMaXN0Iiwib24iLCJuYW1lIiwiY29udHJvbGxlciIsInNldEV2ZW50IiwiaGFzT3duUHJvcGVydHkiLCJjb25zb2xlIiwibG9nIiwiZnVuY05hbWUiLCJwdXNoIiwiZnVuY3Rpb25OYW1lIiwiYWxsT2ZmIiwiZXZlbnROYW1lIiwiaSIsImxlbmd0aCIsInNwbGljZSIsInRyaWdnZXIiLCJhcmdzIiwiQXJyYXkiLCJhcHBseSIsImFyZ3VtZW50cyIsInNoaWZ0IiwiaGFuZGxlciIsImxpc3QiLCJyZXR1cm5fdmFsIiwiUHJvbWlzZSIsImFsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc_events.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc_main.js":
/*!**************************************!*\
  !*** ./simpleDomControl/sdc_main.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   app: () => (/* binding */ app)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./simpleDomControl/sdc_view.js\");\n/* harmony import */ var _AbstractSDC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractSDC.js */ \"./simpleDomControl/AbstractSDC.js\");\n/* harmony import */ var _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_controller.js */ \"./simpleDomControl/sdc_controller.js\");\n/* harmony import */ var _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sdc_dom_events.js */ \"./simpleDomControl/sdc_dom_events.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sdc_events.js */ \"./simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_socket_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sdc_socket.js */ \"./simpleDomControl/sdc_socket.js\");\n\n\n\n\n\n\n\nlet app = {\n  CSRF_TOKEN: window.CSRF_TOKEN || '',\n  LANGUAGE_CODE: window.LANGUAGE_CODE || 'en',\n  DEBUG: window.DEBUG || false,\n  VERSION: window.VERSION || '0.0',\n  tagNames: [],\n  Global: _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.Global,\n  rootController: null,\n  init_sdc: () => {\n    const old_trigger = $.fn.trigger;\n    $.fn.trigger = function (event) {\n      const ev_type = {}.hasOwnProperty.call(event, \"type\") ? event.type : event;\n      if (!_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.STD_EVENT_LIST.includes(ev_type)) {\n        _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.STD_EVENT_LIST.push(ev_type);\n        $(window).on(ev_type, _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.windowEventHandler);\n      }\n      return old_trigger.call(this, event);\n    };\n    $.fn.safeReplace = function ($elem) {\n      return app.safeReplace($(this), $elem);\n    };\n    $.fn.safeEmpty = function () {\n      return app.safeEmpty($(this));\n    };\n    $.fn.safeRemove = function () {\n      return app.safeRemove($(this));\n    };\n    (0,_sdc_socket_js__WEBPACK_IMPORTED_MODULE_6__.isConnected)();\n    (0,_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.initEvents)();\n    app.rootController = app.rootController || new _AbstractSDC_js__WEBPACK_IMPORTED_MODULE_2__.AbstractSDC();\n    app.tagNames = Object.keys(_sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList);\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.replaceTagElementsInContainer)(app.tagNames, (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.getBody)(), app.rootController);\n  },\n  controllerToTag: Controller => {\n    let tagName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.camelCaseToTagName)(Controller.name);\n    return tagName.replace(/-controller$/, '');\n  },\n  /**\n   *\n   * @param {AbstractSDC} Controller\n   */\n  registerGlobal: Controller => {\n    let tagName = app.controllerToTag(Controller);\n    let globalController = new Controller();\n    _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName] = [globalController, []];\n    globalController._tagName = tagName;\n    _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.Global[(0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(tagName)] = globalController;\n  },\n  cleanCache: () => {\n    (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.cleanCache)();\n  },\n  /**\n   *\n   * @param {AbstractSDC} Controller\n   */\n  register: Controller => {\n    let tagName = app.controllerToTag(Controller);\n    _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName] = [Controller, []];\n    Controller.prototype._tagName = tagName;\n    return {\n      /**\n       *\n       * @param {Array<string>} mixins Controller tag names\n       */\n      addMixin: (...mixins) => {\n        for (let mixin of mixins) {\n          let mixinName;\n          if (typeof mixin === \"string\") {\n            mixinName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.camelCaseToTagName)(mixin);\n          } else if (mixin) {\n            mixinName = app.controllerToTag(mixin);\n          }\n          _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName][1].push(mixinName);\n        }\n      }\n    };\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @return {Promise}\n   */\n  post: (controller, url, args) => {\n    if (!args) {\n      args = {};\n    }\n    args.CSRF_TOKEN = app.CSRF_TOKEN;\n    return app.ajax(controller, url, params, $.post);\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @return {Promise}\n   */\n  get: (controller, url, args) => {\n    return app.ajax(controller, url, args, $.get);\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @param {function} method $.get or $.post\n   * @return {Promise}\n   */\n  ajax: (controller, url, args, method) => {\n    if (!args) {\n      args = {};\n    }\n    args.VERSION = app.VERSION;\n    args._method = args._method || 'api';\n    const p = new Promise((resolve, reject) => {\n      return method(url, args).then((a, b, c) => {\n        resolve(a, b, c);\n        if (a.status === 'redirect') {\n          (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_5__.trigger)('onNavLink', a['url-link']);\n        } else {\n          p.then(() => {\n            app.refresh(controller.$container);\n          });\n        }\n      }).catch(reject);\n    });\n    return p;\n  },\n  submitFormAndUpdateView: (controller, form, url, method) => {\n    let formData = new FormData(form);\n    const p = new Promise((resolve, reject) => {\n      (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.uploadFileFormData)(formData, url || form.action, method || form.method).then((a, b, c) => {\n        resolve(a, b, c);\n        if (a.status === 'redirect') {\n          if (a['url-link']) {\n            (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_5__.trigger)('onNavLink', a['url-link']);\n          } else {\n            window.location.href = a['url'];\n          }\n        } else {\n          p.then(() => {\n            app.refresh(controller.$container);\n          });\n        }\n      }).catch(reject);\n    });\n    return p;\n  },\n  submitForm: (form, url, method) => {\n    let formData = new FormData(form);\n    return new Promise((resolve, reject) => {\n      (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.uploadFileFormData)(formData, url || form.action, method || form.method).then(resolve).catch(reject);\n    });\n  },\n  /**\n   *\n   * @param {jquery} $elem\n   * @return {AbstractSDC}\n   */\n  getController: $elem => (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.getController)($elem),\n  /**\n   * safeEmpty removes all content of a dom\n   * and deletes all child controller safely.\n   *\n   * @param $elem - jQuery DOM container to be emptyed\n   */\n  safeEmpty: $elem => {\n    let $children = $elem.children();\n    $children.each(function (_, element) {\n      let $element = $(element);\n      app.safeRemove($element);\n    });\n    return $elem;\n  },\n  /**\n   * safeReplace removes all content of a dom\n   * and deletes all child controller safely.\n   *\n   * @param $elem - jQuery DOM to be repleaced\n   * @param $new - jQuery new DOM container\n   */\n  safeReplace: ($elem, $new) => {\n    $new.insertBefore($elem);\n    return app.safeRemove($elem);\n  },\n  /**\n   * safeRemove removes a dom and deletes all child controller safely.\n   *\n   * @param $elem - jQuery Dom\n   */\n  safeRemove: $elem => {\n    $elem.each(function () {\n      let $this = $(this);\n      if ($this.data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`)) {\n        $this.data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`).remove();\n      }\n    });\n    $elem.find(`.${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.CONTROLLER_CLASS}`).each(function () {\n      const controller = $(this).data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`);\n      controller && controller.remove();\n    });\n    return $elem.remove();\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @return {Promise<jQuery>}\n   */\n  reloadController: controller => {\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.reloadHTMLController)(controller).then(html => {\n      let $html = $(html);\n      controller._childController = {};\n      (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.replaceTagElementsInContainer)(app.tagNames, $html, controller).then(() => {\n        app.safeEmpty(controller.$container);\n        controller.$container.append($html);\n        app.refresh(controller.$container, controller);\n      });\n    });\n  },\n  /**\n   *\n   * @param {jquery} $container\n   * @param {AbstractSDC} leafController\n   * @return {Promise<jQuery>}\n   */\n  refresh: ($container, leafController) => {\n    if (!leafController) {\n      leafController = app.getController($container);\n    }\n    if (!leafController) {\n      return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)();\n    }\n    let controller = leafController;\n    let controllerList = [];\n    while (controller) {\n      controller.isEventsSet = false;\n      controllerList.unshift(controller);\n      controller = controller._parentController;\n    }\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.replaceTagElementsInContainer)(app.tagNames, leafController.$container, leafController).then(() => {\n      for (let con of controllerList) {\n        (0,_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.setControllerEvents)(con);\n        con.onRefresh($container);\n      }\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc_main.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc_params.js":
/*!****************************************!*\
  !*** ./simpleDomControl/sdc_params.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUrlParam: () => (/* binding */ getUrlParam),\n/* harmony export */   runOnInitWithParameter: () => (/* binding */ runOnInitWithParameter)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./simpleDomControl/sdc_view.js\");\n\n\nfunction getParamList(paramNameList, $element) {\n  let returnList;\n  if (!paramNameList) {\n    paramNameList = [];\n  }\n  let data = $element.data();\n  let restdata = {};\n  for (let a in data) {\n    if (data.hasOwnProperty(a) && a !== _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY && !paramNameList.includes(a)) {\n      restdata[a] = data[a];\n    }\n  }\n  returnList = [];\n  for (let i = 0; i < paramNameList.length; i++) {\n    let data_name = paramNameList[i];\n    if (data.hasOwnProperty(data_name)) {\n      returnList.push(data[data_name]);\n    } else {\n      returnList.push('undefined');\n    }\n  }\n  returnList.push(restdata);\n  return returnList;\n}\nfunction parseParamNameList(list, controller = null) {\n  let values = [];\n  for (let i = 0; i < list.length; i++) {\n    let tempValue = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.checkIfParamNumberBoolOrString)(list[i], controller);\n    values.push(tempValue);\n  }\n  return values;\n}\nfunction getDomTagParamsWithList(paramNameList, $element, controller = null) {\n  let paramList = getParamList(paramNameList, $element);\n  return parseParamNameList(paramList, controller);\n}\n\n/**\n *\n * @param {AbstractSDC} controller\n * @param {jquery} $element\n * @param applyController\n * @returns {boolean}\n */\nfunction reg_runOnInitWithParameter(controller, $element, applyController) {\n  if (!controller) {\n    return false;\n  } else if (typeof controller.onInit !== 'function') {\n    return false;\n  }\n  let paramNameList;\n  if (typeof controller._on_init_params === 'function') {\n    paramNameList = controller._on_init_params();\n  } else {\n    paramNameList = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.getParamsNameOfFunction)(controller.onInit);\n  }\n  let initParams = getDomTagParamsWithList(paramNameList, $element, applyController._parentController);\n  controller.onInit.apply(applyController, initParams);\n  if (applyController === controller) {\n    for (let mixinKey in controller._mixins) {\n      reg_runOnInitWithParameter(controller._mixins[mixinKey], $element, applyController);\n    }\n  }\n}\nfunction runOnInitWithParameter($element, controller) {\n  reg_runOnInitWithParameter(controller, $element, controller);\n}\nfunction getUrlParam(controller, $element) {\n  return getDomTagParamsWithList(controller._urlParams, $element);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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akIsYUFBYSxFQUFFQyxRQUFRLEVBQUVtQixlQUFlLENBQUNJLGlCQUFpQixDQUFDO0VBQ3BHVixVQUFVLENBQUNPLE1BQU0sQ0FBQ0ksS0FBSyxDQUFDTCxlQUFlLEVBQUVHLFVBQVUsQ0FBQztFQUNwRCxJQUFHSCxlQUFlLEtBQUtOLFVBQVUsRUFBRTtJQUMvQixLQUFLLElBQUlZLFFBQVEsSUFBSVosVUFBVSxDQUFDYSxPQUFPLEVBQUU7TUFDckNSLDBCQUEwQixDQUFDTCxVQUFVLENBQUNhLE9BQU8sQ0FBQ0QsUUFBUSxDQUFDLEVBQUV6QixRQUFRLEVBQUVtQixlQUFlLENBQUM7SUFDdkY7RUFDSjtBQUNKO0FBRU8sU0FBU1Esc0JBQXNCQSxDQUFDM0IsUUFBUSxFQUFFYSxVQUFVLEVBQUU7RUFDekRLLDBCQUEwQixDQUFDTCxVQUFVLEVBQUViLFFBQVEsRUFBRWEsVUFBVSxDQUFDO0FBQ2hFO0FBRU8sU0FBU2UsV0FBV0EsQ0FBQ2YsVUFBVSxFQUFFYixRQUFRLEVBQUU7RUFDOUMsT0FBT2dCLHVCQUF1QixDQUFDSCxVQUFVLENBQUNnQixVQUFVLEVBQUU3QixRQUFRLENBQUM7QUFDbkUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGMvLi9zaW1wbGVEb21Db250cm9sL3NkY19wYXJhbXMuanM/ZjllNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldFBhcmFtc05hbWVPZkZ1bmN0aW9uLCBjaGVja0lmUGFyYW1OdW1iZXJCb29sT3JTdHJpbmd9IGZyb20gXCIuL3NkY191dGlscy5qc1wiO1xuaW1wb3J0IHtEQVRBX0NPTlRST0xMRVJfS0VZfSBmcm9tIFwiLi9zZGNfdmlldy5qc1wiO1xuXG5cblxuXG5mdW5jdGlvbiBnZXRQYXJhbUxpc3QocGFyYW1OYW1lTGlzdCwgJGVsZW1lbnQpIHtcbiAgICBsZXQgcmV0dXJuTGlzdDtcbiAgICBpZiAoIXBhcmFtTmFtZUxpc3QpIHtcbiAgICAgICAgcGFyYW1OYW1lTGlzdCA9IFtdO1xuICAgIH1cblxuICAgIGxldCBkYXRhID0gJGVsZW1lbnQuZGF0YSgpO1xuICAgIGxldCByZXN0ZGF0YSA9IHt9O1xuICAgIGZvcihsZXQgYSBpbiBkYXRhKSB7XG4gICAgICAgIGlmKGRhdGEuaGFzT3duUHJvcGVydHkoYSkgJiYgYSAhPT0gREFUQV9DT05UUk9MTEVSX0tFWSAmJiAhcGFyYW1OYW1lTGlzdC5pbmNsdWRlcyhhKSkge1xuICAgICAgICAgICAgcmVzdGRhdGFbYV0gPSBkYXRhW2FdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuTGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1OYW1lTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZGF0YV9uYW1lID0gcGFyYW1OYW1lTGlzdFtpXTtcblxuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShkYXRhX25hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm5MaXN0LnB1c2goZGF0YVtkYXRhX25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybkxpc3QucHVzaCgndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm5MaXN0LnB1c2gocmVzdGRhdGEpXG4gICAgcmV0dXJuIHJldHVybkxpc3Q7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUGFyYW1OYW1lTGlzdChsaXN0LCBjb250cm9sbGVyID0gbnVsbCkge1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdGVtcFZhbHVlID0gY2hlY2tJZlBhcmFtTnVtYmVyQm9vbE9yU3RyaW5nKGxpc3RbaV0sIGNvbnRyb2xsZXIpO1xuICAgICAgICB2YWx1ZXMucHVzaCh0ZW1wVmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIGdldERvbVRhZ1BhcmFtc1dpdGhMaXN0KHBhcmFtTmFtZUxpc3QsICRlbGVtZW50LCBjb250cm9sbGVyPW51bGwpIHtcbiAgICBsZXQgcGFyYW1MaXN0ID0gZ2V0UGFyYW1MaXN0KHBhcmFtTmFtZUxpc3QsICRlbGVtZW50KTtcbiAgICByZXR1cm4gcGFyc2VQYXJhbU5hbWVMaXN0KHBhcmFtTGlzdCwgY29udHJvbGxlcik7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RTREN9IGNvbnRyb2xsZXJcbiAqIEBwYXJhbSB7anF1ZXJ5fSAkZWxlbWVudFxuICogQHBhcmFtIGFwcGx5Q29udHJvbGxlclxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIsICRlbGVtZW50LCBhcHBseUNvbnRyb2xsZXIpIHtcbiAgICBpZiAoIWNvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29udHJvbGxlci5vbkluaXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBwYXJhbU5hbWVMaXN0O1xuICAgIGlmKHR5cGVvZiBjb250cm9sbGVyLl9vbl9pbml0X3BhcmFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwYXJhbU5hbWVMaXN0ID0gY29udHJvbGxlci5fb25faW5pdF9wYXJhbXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbU5hbWVMaXN0ID0gZ2V0UGFyYW1zTmFtZU9mRnVuY3Rpb24oY29udHJvbGxlci5vbkluaXQpO1xuICAgIH1cblxuXG4gICAgbGV0IGluaXRQYXJhbXMgPSBnZXREb21UYWdQYXJhbXNXaXRoTGlzdChwYXJhbU5hbWVMaXN0LCAkZWxlbWVudCwgYXBwbHlDb250cm9sbGVyLl9wYXJlbnRDb250cm9sbGVyKTtcbiAgICBjb250cm9sbGVyLm9uSW5pdC5hcHBseShhcHBseUNvbnRyb2xsZXIsIGluaXRQYXJhbXMpO1xuICAgIGlmKGFwcGx5Q29udHJvbGxlciA9PT0gY29udHJvbGxlcikge1xuICAgICAgICBmb3IgKGxldCBtaXhpbktleSBpbiBjb250cm9sbGVyLl9taXhpbnMpIHtcbiAgICAgICAgICAgIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIuX21peGluc1ttaXhpbktleV0sICRlbGVtZW50LCBhcHBseUNvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuT25Jbml0V2l0aFBhcmFtZXRlcigkZWxlbWVudCwgY29udHJvbGxlcikge1xuICAgIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIsICRlbGVtZW50LCBjb250cm9sbGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVybFBhcmFtKGNvbnRyb2xsZXIsICRlbGVtZW50KSB7XG4gICAgcmV0dXJuIGdldERvbVRhZ1BhcmFtc1dpdGhMaXN0KGNvbnRyb2xsZXIuX3VybFBhcmFtcywgJGVsZW1lbnQpO1xufSJdLCJuYW1lcyI6WyJnZXRQYXJhbXNOYW1lT2ZGdW5jdGlvbiIsImNoZWNrSWZQYXJhbU51bWJlckJvb2xPclN0cmluZyIsIkRBVEFfQ09OVFJPTExFUl9LRVkiLCJnZXRQYXJhbUxpc3QiLCJwYXJhbU5hbWVMaXN0IiwiJGVsZW1lbnQiLCJyZXR1cm5MaXN0IiwiZGF0YSIsInJlc3RkYXRhIiwiYSIsImhhc093blByb3BlcnR5IiwiaW5jbHVkZXMiLCJpIiwibGVuZ3RoIiwiZGF0YV9uYW1lIiwicHVzaCIsInBhcnNlUGFyYW1OYW1lTGlzdCIsImxpc3QiLCJjb250cm9sbGVyIiwidmFsdWVzIiwidGVtcFZhbHVlIiwiZ2V0RG9tVGFnUGFyYW1zV2l0aExpc3QiLCJwYXJhbUxpc3QiLCJyZWdfcnVuT25Jbml0V2l0aFBhcmFtZXRlciIsImFwcGx5Q29udHJvbGxlciIsIm9uSW5pdCIsIl9vbl9pbml0X3BhcmFtcyIsImluaXRQYXJhbXMiLCJfcGFyZW50Q29udHJvbGxlciIsImFwcGx5IiwibWl4aW5LZXkiLCJfbWl4aW5zIiwicnVuT25Jbml0V2l0aFBhcmFtZXRlciIsImdldFVybFBhcmFtIiwiX3VybFBhcmFtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc_params.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc_socket.js":
/*!****************************************!*\
  !*** ./simpleDomControl/sdc_socket.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Model: () => (/* binding */ Model),\n/* harmony export */   callServer: () => (/* binding */ callServer),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   isConnected: () => (/* binding */ isConnected)\n/* harmony export */ });\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_main.js */ \"./simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_events.js */ \"./simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_utils.js */ \"./simpleDomControl/sdc_utils.js\");\n\n\n\nlet IS_CONNECTED = false;\nlet IS_CONNECTING = false;\nlet SDC_SOCKET = null;\nconst MAX_FILE_UPLOAD = 25000;\nlet OPEN_REQUESTS = {};\nfunction callServer(app, controller, funcName, args) {\n  let id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n  isConnected().then(() => {\n    SDC_SOCKET.send(JSON.stringify({\n      event: 'sdc_call',\n      id: id,\n      controller: controller,\n      app: app,\n      function: funcName,\n      args: args\n    }));\n  });\n  return new Promise((resolve, reject) => {\n    OPEN_REQUESTS[id] = [resolve, reject];\n  });\n}\nfunction _connect() {\n  IS_CONNECTING = true;\n  return new Promise(resolve => {\n    if (window.location.protocol === \"https:\") {\n      SDC_SOCKET = new WebSocket(`wss://${window.location.host}/sdc_ws/ws/`);\n    } else {\n      SDC_SOCKET = new WebSocket(`ws://${window.location.host}/sdc_ws/ws/`);\n    }\n    SDC_SOCKET.onmessage = function (e) {\n      let data = JSON.parse(e.data);\n      if (data.is_error) {\n        if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.Global.sdcAlertMessenger && (data.msg || data.header)) {\n          _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.Global.sdcAlertMessenger.pushErrorMsg(data.header || '', data.msg || '');\n        }\n        if (OPEN_REQUESTS[data.id]) {\n          OPEN_REQUESTS[data.id][1](data.data);\n          delete OPEN_REQUESTS[data.id];\n        }\n      } else {\n        if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.Global.sdcAlertMessenger && (data.msg || data.header)) {\n          _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.Global.sdcAlertMessenger.pushMsg(data.header || '', data.msg || '');\n        }\n        if (data.type && data.type === 'sdc_recall') {\n          if (OPEN_REQUESTS[data.id]) {\n            OPEN_REQUESTS[data.id][0](data.data);\n            delete OPEN_REQUESTS[data.id];\n          }\n        } else if (data.type && data.type === 'sdc_event') {\n          let event = data.event;\n          if (event) {\n            (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)(event, data.payload);\n          }\n        } else if (data.type && data.type === 'sdc_redirect') {\n          (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('onNavLink', data.link);\n        }\n      }\n    };\n    SDC_SOCKET.onclose = function () {\n      console.error('SDC Socket closed unexpectedly');\n      IS_CONNECTED = false;\n      for (const [key, value] of Object.entries(OPEN_REQUESTS)) {\n        value[1]({});\n        delete OPEN_REQUESTS[key];\n      }\n      setTimeout(() => {\n        _connect();\n      }, 1000);\n    };\n    SDC_SOCKET.onerror = function (err) {\n      console.error('Socket encountered error: ', err.message, 'Closing socket');\n      if (IS_CONNECTED) {\n        try {\n          SDC_SOCKET.close();\n        } catch (e) {}\n      }\n    };\n    SDC_SOCKET.onopen = function () {\n      IS_CONNECTED = true;\n      IS_CONNECTING = false;\n      resolve();\n    };\n  });\n}\nfunction close() {\n  if (IS_CONNECTED) {\n    IS_CONNECTED = false;\n    try {\n      SDC_SOCKET.close();\n    } catch (e) {}\n  }\n}\nfunction parse_hidden_inputs(value) {\n  let isFloatReg = /^-?\\d+\\.?\\d+$/;\n  let isIntReg = /^-?\\d+$/;\n  let isBoolReg = /^(true|false)$/;\n  let isStringReg = /^(['][^']*['])|([\"][^\"]*[\"])$/;\n  if (value.toLowerCase().match(isBoolReg)) {\n    return value.toLowerCase() === 'true';\n  } else if (value === 'undefined') {\n    return undefined;\n  } else if (value.toLowerCase() === 'none') {\n    return null;\n  } else if (value.match(isIntReg)) {\n    return parseInt(value);\n  } else if (value.match(isFloatReg)) {\n    return parseFloat(value);\n  } else if (value.match(isStringReg)) {\n    return value.substring(1, value.length - 1);\n  }\n  return value;\n}\nfunction isConnected() {\n  return new Promise(resolve => {\n    if (IS_CONNECTED) {\n      return resolve();\n    } else if (IS_CONNECTING) {\n      setTimeout(() => {\n        isConnected().then(() => {\n          resolve();\n        });\n      }, 200);\n    } else {\n      return resolve(_connect());\n    }\n  });\n}\nclass Model {\n  /**\n   *\n   * @param model_name {string}\n   * @param model_query {json}\n   */\n  constructor(model_name, model_query = {}) {\n    this.values_list = [];\n    this.values = {};\n    this.model_name = model_name;\n    this.model_query = model_query;\n    this._is_connected = false;\n    this._is_conneting_process = false;\n    this._auto_reconnect = true;\n    this.socket = null;\n    this.open_request = {};\n    this.on_update = () => {};\n    this.on_create = () => {};\n    this.form_id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n  }\n  [Symbol.iterator]() {\n    let idx = 0;\n    return {\n      next: function () {\n        if (idx < this.values_list) {\n          ++idx;\n          return {\n            value: this.values_list[idx],\n            done: false\n          };\n        }\n        return {\n          value: null,\n          done: true\n        };\n      }\n    };\n  }\n  byPk(pk) {\n    if (pk !== null) {\n      let elem = this.values_list.find(elm => elm.pk === pk);\n      if (!elem) {\n        elem = {\n          pk: pk\n        };\n        this.values_list.push(elem);\n      }\n      return elem;\n    }\n    return {\n      pk: pk\n    };\n  }\n  filter(model_query) {\n    this.model_query = Object.assign({}, this.model_query, model_query);\n    return this;\n  }\n  load() {\n    return this.isConnected().then(() => {\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      return new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'load',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query\n          }\n        }));\n        this.open_request[id] = [resolve, reject];\n      });\n    });\n  }\n  listView(filter = {}, cb_resolve = null, cb_reject = null) {\n    let $div_list = $('<div class=\"container-fluid\">');\n    this.isConnected().then(() => {\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'list_view',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query,\n            filter: filter\n          }\n        }));\n        this.open_request[id] = [data => {\n          $div_list.append(data.html);\n          _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_list);\n          cb_resolve && cb_resolve(data);\n          resolve(data);\n        }, res => {\n          cb_reject && cb_reject(res);\n          reject(res);\n        }];\n      });\n    });\n    return $div_list;\n  }\n  detailView(pk = -1, cb_resolve = null, cb_reject = null) {\n    let $div_list = $('<div class=\"container-fluid\">');\n    let load_promise;\n    if (this.values_list.length !== 0) {\n      load_promise = this.isConnected();\n    } else {\n      load_promise = this.load();\n    }\n    load_promise.then(() => {\n      if (pk === -1) {\n        pk = this.values_list[0].pk;\n      }\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'detail_view',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query,\n            pk: pk\n          }\n        }));\n        this.open_request[id] = [data => {\n          $div_list.append(data.html);\n          _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_list);\n          cb_resolve && cb_resolve(data);\n          resolve(data);\n        }, res => {\n          cb_reject && cb_reject(res);\n          reject(res);\n        }];\n      });\n    });\n    return $div_list;\n  }\n  syncFormToModel($forms) {\n    return this.syncForm($forms);\n  }\n  syncModelToForm($forms) {\n    if (!$forms || !$forms.hasClass(this.form_id)) {\n      $forms = $(`.${this.form_id}`);\n    }\n    let self = this;\n    $forms.each(function () {\n      if (!this.hasAttribute('data-model_pk')) {\n        return;\n      }\n      let pk = $(this).data('model_pk');\n      let instance = self.byPk(pk);\n      for (let form_item of this.elements) {\n        let name = form_item.name;\n        if (name && name !== '') {\n          if (form_item.type === 'checkbox') {\n            form_item.checked = instance[name];\n          } else if (form_item.type === 'file' && instance[name] instanceof File) {\n            let container = new DataTransfer();\n            container.items.add(file);\n            form_item.files = container;\n          } else {\n            $(form_item).val(instance[name]);\n          }\n        }\n      }\n    });\n  }\n  syncForm($forms) {\n    if (!$forms || !$forms.hasClass(this.form_id)) {\n      $forms = $(`.${this.form_id}`);\n    }\n    const self = this;\n    let instances = [];\n    $forms.each(function () {\n      let $form = $(this);\n      let pk = $form.data('model_pk');\n      let instance = self.byPk(pk);\n      for (let form_item of this.elements) {\n        let name = form_item.name;\n        if (name && name !== '') {\n          if (form_item.type === 'hidden') {\n            instance[name] = parse_hidden_inputs($(form_item).val());\n          } else if (form_item.type === 'checkbox') {\n            instance[name] = form_item.checked;\n          } else if (form_item.type === 'file') {\n            instance[name] = form_item.files[0];\n          } else {\n            instance[name] = $(form_item).val();\n          }\n        }\n      }\n      instances.push(instance);\n      return instance;\n    });\n    if (this.values_list.length <= 1 && instances.length > 0) {\n      this.values = instances.at(-1);\n    }\n    return instances;\n  }\n  createForm(cb_resolve = null, cb_reject = null) {\n    let $div_form = $('<div class=\"container-fluid\">');\n    this.isConnected().then(() => {\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'create_form',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query\n          }\n        }));\n        this.open_request[id] = [data => {\n          $div_form.append(data.html);\n          let $form = $div_form.closest('form').addClass(`sdc-model-create-form sdc-model-form ${this.form_id}`).data('model', this).data('model_pk', null);\n          if (!$form[0].hasAttribute('sdc_submit')) {\n            $form.attr('sdc_submit', 'submitModelForm');\n          }\n          _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_form);\n          cb_resolve && cb_resolve(data);\n          resolve(data);\n        }, res => {\n          cb_reject && cb_reject(res);\n          reject(res);\n        }];\n      });\n    });\n    return $div_form;\n  }\n  editForm(pk = -1, cb_resolve = null, cb_reject = null) {\n    let load_promise;\n    if (this.values_list.length !== 0) {\n      load_promise = this.isConnected();\n    } else {\n      load_promise = this.load();\n    }\n    let $div_form = $('<div  class=\"container-fluid\">');\n    load_promise.then(() => {\n      if (pk <= -1) {\n        pk = this.values_list.at(pk).pk;\n      }\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'edit_form',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query,\n            pk: pk\n          }\n        }));\n        this.open_request[id] = [data => {\n          $div_form.append(data.html);\n          let $form = $div_form.closest('form').addClass(`sdc-model-edit-form sdc-model-form ${this.form_id}`).data('model', this).data('model_pk', pk);\n          if (!$form[0].hasAttribute('sdc_submit')) {\n            $form.attr('sdc_submit', 'submitModelForm');\n          }\n          _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_form);\n          cb_resolve && cb_resolve(data);\n          resolve(data);\n        }, res => {\n          cb_reject && cb_reject(res);\n          reject(res);\n        }];\n      });\n    });\n    return $div_form;\n  }\n  new() {\n    return new Promise((resolve, reject) => {\n      const $form = $('<form>').append(this.createForm(() => {\n        this.syncFormToModel($form);\n        resolve();\n      }, reject));\n    });\n  }\n  save(pk = -1) {\n    return this.isConnected().then(() => {\n      let elem_list;\n      if (pk > -1) {\n        elem_list = [this.byPk(pk)];\n      } else {\n        elem_list = this.values_list;\n      }\n      let p_list = [];\n      elem_list.forEach(elem => {\n        const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n        p_list.push(new Promise((resolve, reject) => {\n          this.socket.send(JSON.stringify({\n            event: 'model',\n            event_type: 'save',\n            event_id: id,\n            args: {\n              model_name: this.model_name,\n              model_query: this.model_query,\n              data: elem\n            }\n          }));\n          this.open_request[id] = [res => {\n            let data = JSON.parse(res.data.instance);\n            this._parseServerRes(data);\n            resolve(res);\n          }, reject];\n        }));\n      });\n      return Promise.all(p_list);\n    });\n  }\n  create(values = this.values) {\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return this.isConnected().then(() => {\n      return new Promise((resolve, reject) => {\n        this._readFiles(values).then(files => {\n          this.socket.send(JSON.stringify({\n            event: 'model',\n            event_type: 'create',\n            event_id: id,\n            args: {\n              model_name: this.model_name,\n              model_query: this.model_query,\n              data: values,\n              files: files\n            }\n          }));\n          this.open_request[id] = [res => {\n            let data = JSON.parse(res.data.instance);\n            this._parseServerRes(data);\n            resolve(res);\n          }, reject];\n        });\n      });\n    });\n  }\n  delete(pk = -1) {\n    if (pk === -1) pk = this.values?.pk;\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return this.isConnected().then(() => {\n      return new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'delete',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query,\n            pk: pk\n          }\n        }));\n        this.open_request[id] = [resolve, reject];\n      });\n    });\n  }\n  isConnected() {\n    return new Promise((resolve, reject) => {\n      if (this._is_connected) {\n        resolve();\n      } else if (!this._is_conneting_process) {\n        this._is_conneting_process = true;\n        this.open_request['_connecting_process'] = [() => {}, () => {}];\n        this._connectToServer().then(() => {\n          resolve(this._checkConnection());\n        });\n      } else {\n        const [resolve_origin, reject_origin] = this.open_request['_connecting_process'];\n        this.open_request['_connecting_process'] = [() => {\n          resolve_origin();\n          resolve();\n        }, () => {\n          reject_origin();\n          reject();\n        }];\n      }\n    });\n  }\n  close() {\n    if (this.socket) {\n      this._auto_reconnect = false;\n      this.socket.onclose = () => {};\n      this.socket.close();\n      delete this['socket'];\n    }\n  }\n  _readFiles(elem) {\n    let to_solve = [];\n    let files = {};\n    for (const [key, value] of Object.entries(elem)) {\n      if (value instanceof File) {\n        to_solve.push(new Promise((resolve, reject) => {\n          ((key, value) => {\n            let reader = new FileReader();\n            reader.onload = e => {\n              const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n              this.open_request[id] = [resolve, reject];\n              let result = e.target.result;\n              let number_of_chunks = parseInt(Math.ceil(result.length / MAX_FILE_UPLOAD));\n              files[key] = {\n                id: id,\n                file_name: value.name,\n                field_name: key,\n                content_length: value.size\n              };\n              for (let i = 0; i < number_of_chunks; ++i) {\n                this.socket.send(JSON.stringify({\n                  event: 'model',\n                  event_type: 'upload',\n                  event_id: id,\n                  args: {\n                    chunk: result.slice(MAX_FILE_UPLOAD * i, MAX_FILE_UPLOAD * (i + 1)),\n                    idx: i,\n                    number_of_chunks: number_of_chunks,\n                    file_name: value.name,\n                    field_name: key,\n                    content_length: value.size,\n                    content_type: value.type,\n                    model_name: this.model_name,\n                    model_query: this.model_query\n                  }\n                }));\n              }\n            };\n            reader.onerror = () => {\n              reject();\n            };\n            reader.readAsBinaryString(value);\n          })(key, value);\n        }));\n      }\n    }\n    return Promise.all(to_solve).then(() => {\n      return files;\n    });\n  }\n  _onMessage(e) {\n    let data = JSON.parse(e.data);\n    if (data.is_error) {\n      if (this.open_request.hasOwnProperty(data.event_id)) {\n        this.open_request[data.event_id][1](data);\n        delete this.open_request[data.event_id];\n      }\n      if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.Global.sdcAlertMessenger && (data.msg || data.header)) {\n        _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.Global.sdcAlertMessenger.pushErrorMsg(data.header || '', data.msg || '');\n      }\n      if (data.type === 'connect') {\n        this.open_request['_connecting_process'][1](data);\n        delete this.open_request['_connecting_process'];\n        this._auto_reconnect = false;\n        this.socket.close();\n      }\n    } else {\n      if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.Global.sdcAlertMessenger && (data.msg || data.header)) {\n        _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.Global.sdcAlertMessenger.pushMsg(data.header || '', data.msg || '');\n      }\n      if (data.type === 'connect') {\n        this._is_connected = true;\n        this._is_conneting_process = false;\n        this.open_request['_connecting_process'][0](data);\n        delete this.open_request['_connecting_process'];\n      } else if (data.type === 'load') {\n        const json_res = JSON.parse(data.args.data);\n        this.values_list = [];\n        this._parseServerRes(json_res);\n      } else if (data.type === 'on_update' || data.type === 'on_create') {\n        const json_res = JSON.parse(data.args.data);\n        let obj = this._parseServerRes(json_res);\n        let cb;\n        if (data.type === 'on_create') {\n          cb = this.on_create;\n        } else {\n          cb = this.on_update;\n        }\n        cb(obj);\n      }\n      if (this.open_request.hasOwnProperty(data.event_id)) {\n        this.open_request[data.event_id][0](data);\n        delete this.open_request[data.event_id];\n      }\n    }\n  }\n  _connectToServer() {\n    return new Promise(resolve => {\n      const model_identifier = `${this.model_name}` + (this.model_id > 0 ? `/${this.model_id}` : '');\n      if (window.location.protocol === \"https:\") {\n        this.socket = new WebSocket(`wss://${window.location.host}/sdc_ws/model/${model_identifier}`);\n      } else {\n        this.socket = new WebSocket(`ws://${window.location.host}/sdc_ws/model/${model_identifier}`);\n      }\n      this.socket.onmessage = this._onMessage.bind(this);\n      this.socket.onclose = e => {\n        console.error(`SDC Model (${this.model_name}, ${this.model_id}) Socket closed unexpectedly`);\n        this._is_connected = false;\n        for (const [key, value] of Object.entries(this.open_request)) {\n          value[1](e);\n        }\n        this.open_request = {};\n        setTimeout(() => {\n          if (this._auto_reconnect) {\n            this._connectToServer().then(() => {});\n          }\n        }, 1000);\n      };\n      this.socket.onerror = err => {\n        console.error(`Model Socket encountered error: ${err} Closing socket`);\n        if (this._is_connected) {\n          try {\n            this.socket.close();\n          } catch (e) {}\n        }\n      };\n      this.socket.onopen = () => {\n        resolve();\n      };\n    });\n  }\n  _checkConnection() {\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return new Promise((resolve, reject) => {\n      this.socket.send(JSON.stringify({\n        event: 'model',\n        event_type: 'connect',\n        event_id: id,\n        args: {\n          model_name: this.model_name,\n          model_query: this.model_query\n        }\n      }));\n      this.open_request[id] = [resolve, reject];\n    });\n  }\n  _parseServerRes(res) {\n    let updated = [];\n    for (let json_data of res) {\n      const pk = json_data.pk;\n      const obj = this.byPk(pk);\n      for (const [k, v] of Object.entries(json_data.fields)) {\n        //if(v && typeof v === 'object' && v['__is_sdc_model__']) {\n        //    obj[k] = new Model(v['model'], {'pk': v['pk']})\n        //} else {\n        obj[k] = v;\n        //}\n      }\n\n      updated.push(obj);\n    }\n    if (this.values_list.length === 1) {\n      this.values = this.values_list.at(-1);\n    } else {\n      this.values = {};\n    }\n    return updated;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc_socket.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc_utils.js":
/*!***************************************!*\
  !*** ./simpleDomControl/sdc_utils.js ***!
  \***************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   agileAggregation: () => (/* binding */ agileAggregation),\n/* harmony export */   camelCaseToTagName: () => (/* binding */ camelCaseToTagName),\n/* harmony export */   checkIfParamNumberBoolOrString: () => (/* binding */ checkIfParamNumberBoolOrString),\n/* harmony export */   clearErrorsInForm: () => (/* binding */ clearErrorsInForm),\n/* harmony export */   getBody: () => (/* binding */ getBody),\n/* harmony export */   getParamsNameOfFunction: () => (/* binding */ getParamsNameOfFunction),\n/* harmony export */   promiseDummyFactory: () => (/* binding */ promiseDummyFactory),\n/* harmony export */   setErrorsInForm: () => (/* binding */ setErrorsInForm),\n/* harmony export */   tagNameToCamelCase: () => (/* binding */ tagNameToCamelCase),\n/* harmony export */   tagNameToReadableName: () => (/* binding */ tagNameToReadableName),\n/* harmony export */   uploadFileFormData: () => (/* binding */ uploadFileFormData),\n/* harmony export */   uuidv4: () => (/* binding */ uuidv4)\n/* harmony export */ });\n/**\n * Reference to the HTML body.\n * @type {*|jQuery|HTMLElement}\n * @private\n */\nlet _$body;\nconst arg_names_reg = /([^\\s,]+)/g;\nconst commend_reg = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n/**\n * getBody returns the $body jQuery object.\n *\n * @returns {*|jQuery|HTMLElement} - body reference.\n */\nfunction getBody() {\n  if (!_$body) {\n    _$body = $('body');\n  }\n  return _$body;\n}\n\n/**\n *\n * @param {function} func\n * @returns {RegExpMatchArray|*[]}\n */\nfunction getParamsNameOfFunction(func) {\n  var fnstr = func.toString().replace(commend_reg, '');\n  var result = fnstr.slice(fnstr.indexOf('(') + 1, fnstr.indexOf(')')).match(arg_names_reg);\n  if (!result) {\n    return [];\n  }\n  return result;\n}\n\n/**\n * promiseDummyFactory generates a simple promise which returns instantly.\n * @return {Promise} window.utils\n */\nfunction promiseDummyFactory() {\n  return new Promise(function (resolve) {\n    resolve();\n  });\n}\nfunction camelCaseToTagName(str) {\n  str = str.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);\n  str = str.replace(/[0-9]+/g, number => `-${number}`);\n  return str.replace(/^[-]/g, ``);\n}\nfunction tagNameToCamelCase(str) {\n  str = str.replace(/-./g, letter => `${letter[1].toUpperCase()}`);\n  return str;\n}\nfunction tagNameToReadableName(str) {\n  str = str.replace(/-./g, letter => ` ${letter[1].toUpperCase()}`).replace(/^./g, letter => `${letter.toUpperCase()}`);\n  return str;\n}\nconst copyProps = (targetClass, sourceClass) => {\n  let source = sourceClass;\n  let propNamesTarget = Object.getOwnPropertyNames(targetClass.prototype).concat(Object.getOwnPropertySymbols(targetClass.prototype));\n  while (source.name !== '') {\n    Object.getOwnPropertyNames(source.prototype).concat(Object.getOwnPropertySymbols(source.prototype)).forEach(prop => {\n      if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/)) {\n        return;\n      }\n      if (!propNamesTarget.includes(prop)) {\n        propNamesTarget.push(prop);\n        Object.defineProperty(targetClass.prototype, prop, Object.getOwnPropertyDescriptor(source.prototype, prop));\n      }\n    });\n    source = Object.getPrototypeOf(source);\n  }\n};\n\n/**\n *\n * @param {AbstractSDC} baseClass\n * @param {AbstractSDC} mixins\n * @returns {AbstractSDC}\n */\nfunction agileAggregation(baseClass, ...mixins) {\n  let base = class _Combined {\n    constructor(...args) {\n      let _mixins = {};\n      mixins.forEach(mixin => {\n        let newMixin;\n        Object.assign(this, newMixin = new mixin());\n        newMixin._tagName = mixin.prototype._tagName;\n        newMixin._isMixin = true;\n        _mixins[mixin.name] = newMixin;\n      });\n      Object.assign(this, new baseClass());\n      this._mixins = _mixins;\n    }\n    get mixins() {\n      return this._mixins;\n    }\n  };\n  copyProps(base, baseClass);\n  mixins.forEach(mixin => {\n    copyProps(base, mixin);\n  });\n  return base;\n}\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\nfunction uploadFileFormData(formData, url, method) {\n  return $.ajax({\n    url: url,\n    //Server script to process data\n    type: method || 'POST',\n    xhr: function () {\n      // Custom XMLHttpRequest\n      var myXhr = $.ajaxSettings.xhr();\n      if (myXhr.upload) {\n        // Check if upload property exists\n        myXhr.upload.addEventListener('progress', progressHandlingFunction, false); // For handling the progress of the upload\n      }\n\n      return myXhr;\n    },\n    //Form data\n    data: formData,\n    //Options to tell jQuery not to process data or worry about content-type.\n    cache: false,\n    contentType: false,\n    processData: false,\n    beforeSend: function (xhr, settings) {\n      if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n        xhr.setRequestHeader(\"X-CSRFToken\", window.CSRF_TOKEN);\n      }\n    }\n  });\n}\nfunction progressHandlingFunction(e) {\n  if (e.lengthComputable) {\n    var percentVal = Math.round(e.loaded / e.total * 100);\n    var $progressContainer = $('.progress-container');\n    if (percentVal === 100) {\n      $progressContainer.hide();\n    } else {\n      $progressContainer.show();\n    }\n    percentVal += '%';\n    $progressContainer.find('.progress-bar').css({\n      'width': percentVal\n    }).text(percentVal);\n  }\n}\nfunction checkIfParamNumberBoolOrString(paramElement, controller = null) {\n  if (typeof paramElement !== 'string') {\n    return paramElement;\n  }\n  if (controller && typeof controller[paramElement] !== 'undefined') {\n    if (typeof controller[paramElement] === 'function') {\n      return controller[paramElement].bind(controller);\n    }\n    return controller[paramElement];\n  }\n  let isFloatReg = /^-?\\d+\\.?\\d+$/;\n  let isIntReg = /^-?\\d+$/;\n  let isBoolReg = /^(true|false)$/;\n  let isStringReg = /^(['][^']*['])|([\"][^\"]*[\"])$/;\n  if (paramElement.match(isBoolReg)) {\n    return paramElement === 'true';\n  } else if (paramElement === 'undefined') {\n    return undefined;\n  } else if (paramElement.toLowerCase() === 'none') {\n    return null;\n  } else if (paramElement.match(isIntReg)) {\n    return parseInt(paramElement);\n  } else if (paramElement.match(isFloatReg)) {\n    return parseFloat(paramElement);\n  } else if (paramElement.match(isStringReg)) {\n    return paramElement.substr(1, paramElement.length - 2);\n  }\n  return paramElement;\n}\nfunction uuidv4() {\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\n}\nfunction clearErrorsInForm($form) {\n  $form.find('.has-error').removeClass('has-error').find('.alert-danger').remove();\n  $form.find('.non-field-errors').remove();\n}\nfunction setErrorsInForm($form, $resForm) {\n  $resForm = $('<div>').append($resForm);\n  $form.find('.has-error').removeClass('has-error').find('.alert-danger').safeRemove();\n  $form.find('.non-field-errors').safeRemove();\n  let $file_container = $resForm.find('input[type=file]').parent();\n  $form.find('input[type=file]').parent().each(function (index) {\n    $(this).replaceWith($file_container[index]);\n  });\n  let hasNoError = $resForm.find('.non-field-errors').insertAfter($form.find('.hidden-form-fields')).length === 0;\n  $resForm.find('.has-error').each(function () {\n    hasNoError = false;\n    let $resErrorField = $(this);\n    let className = $resErrorField.data('auto-id');\n    let $errorField = $form.find('.form-group.' + className);\n    $errorField.addClass('has-error');\n    $errorField.find('.form-input-container').append($resErrorField.find('.alert-danger'));\n  });\n  return hasNoError;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc_utils.js\n");

/***/ }),

/***/ "./simpleDomControl/sdc_view.js":
/*!**************************************!*\
  !*** ./simpleDomControl/sdc_view.js ***!
  \**************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTROLLER_CLASS: () => (/* binding */ CONTROLLER_CLASS),\n/* harmony export */   DATA_CONTROLLER_KEY: () => (/* binding */ DATA_CONTROLLER_KEY),\n/* harmony export */   cleanCache: () => (/* binding */ cleanCache),\n/* harmony export */   getController: () => (/* binding */ getController),\n/* harmony export */   loadFilesFromController: () => (/* binding */ loadFilesFromController),\n/* harmony export */   reloadHTMLController: () => (/* binding */ reloadHTMLController),\n/* harmony export */   replaceTagElementsInContainer: () => (/* binding */ replaceTagElementsInContainer),\n/* harmony export */   runControllerFillContent: () => (/* binding */ runControllerFillContent)\n/* harmony export */ });\n/* harmony import */ var _sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_controller.js */ \"./simpleDomControl/sdc_controller.js\");\n/* harmony import */ var _sdc_params_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_params.js */ \"./simpleDomControl/sdc_params.js\");\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_main.js */ \"./simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_events.js */ \"./simpleDomControl/sdc_events.js\");\n\n\n\n\n\n/**\n * List of HTML files.\n * @type {{}}\n */\nlet htmlFiles = {};\nconst DATA_CONTROLLER_KEY = '_controller_';\nconst CONTROLLER_CLASS = '_sdc_controller_';\nfunction cleanCache() {\n  htmlFiles = {};\n}\n/**\n * findSdcTgs Finds all registered tags in a container. But it ignores\n * registered tags in registered tags. It collects all those\n * doms and returns a list of objects containing also the tag name the dom and the tag\n * names of the super controller\n *\n * @param {jquery} $container - jQuery container\n * @param {Array<string>} tagNameList - a string list with tag names.\n * @return {Array} - a array of objects with all register tags found\n */\nfunction findSdcTgs($container, tagNameList) {\n  if (!$container) {\n    return [];\n  }\n  let $children = $container.children();\n  let emptyList = [];\n  $children.each(function (_, element) {\n    let $element = $(element);\n    let tagName = $element.prop('tagName').toLowerCase().split('_');\n    if ($.inArray(tagName[0], tagNameList) >= 0) {\n      emptyList.push({\n        tag: tagName[0],\n        super: tagName.splice(1) || [],\n        dom: $element\n      });\n    } else {\n      emptyList = emptyList.concat(findSdcTgs($element, tagNameList));\n    }\n  });\n  return emptyList;\n}\n\n/**\n * replacePlaceholderController fills the parameter of the content\n * url this function uses the tag parameter\n *\n * @param controller - controller object\n * @param url - the origin content URL\n * @param urlValues - values for the url placeholder. In same order!!\n * @returns {string} - the correct URL with prefix.\n */\nfunction replacePlaceholderController(controller, url, urlValues) {\n  for (let key_idx in controller._urlParams) {\n    if (controller._urlParams.hasOwnProperty(key_idx)) {\n      let key = controller._urlParams[key_idx];\n      let re = RegExp(\"%\\\\(\" + key + \"\\\\)\\\\w\", \"gm\");\n      url = url.replace(re, \"\" + urlValues.shift());\n    }\n  }\n  return url;\n}\n\n/**\n * loadHTMLFile loads the HTML content file from the server via ajax request.\n *\n * If the HTML file is loaded already the function takes no action.\n *\n * @param path - a content URL from the controller.\n * @param {object} args - get args.\n * @param tag - a normalized tag-name as string.\n * @param hardReload - true if the file has to be reloaded every time.\n * @returns {Promise<Boolean>} - waits for the file to be loaded.\n */\nfunction loadHTMLFile(path, args, tag, hardReload) {\n  if (!path) {\n    return Promise.resolve(false);\n  } else if (htmlFiles[tag]) {\n    return Promise.resolve(htmlFiles[tag]);\n  }\n  args.VERSION = _sdc_main_js__WEBPACK_IMPORTED_MODULE_2__.app.VERSION;\n  args._method = 'content';\n  return $.get(path, args).then(function (data) {\n    if (data.status === \"redirect\") {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_3__.trigger)('onNavLink', data['url-link']);\n      return \"<sdc-error data-code='403'></sdc-error>\";\n    }\n    if (!hardReload) {\n      htmlFiles[tag] = data;\n    }\n    return data;\n  }).catch(function (err) {\n    console.error(err);\n    return err.responseText;\n  });\n}\n\n/**\n * replaceAllTagElementsInContainer replaces all registered tags by the controller.\n * In this step the life-cycle starts.\n *\n * @param {jquery} $container - given container\n * @param {AbstractSDC} parentController - parent contoller surrounded the container\n */\nfunction replaceAllTagElementsInContainer($container, parentController) {\n  parentController = parentController || $container.data(DATA_CONTROLLER_KEY);\n  return replaceTagElementsInContainer(_sdc_main_js__WEBPACK_IMPORTED_MODULE_2__.app.tagNames, $container, parentController);\n}\n\n/**\n * parseContentUrl uses the content URL prefix to marge the\n * correct URL. Also parses the url parameter\n *\n * @param {AbstractSDC} controller - controller object\n * @returns {string} - the correct URL with prefix.\n */\nfunction parseContentUrl(controller) {\n  let url = controller.contentUrl;\n  if (controller && controller._urlParams.length === 0) {\n    let re = /%\\(([^)]+)\\)\\w/gm;\n    let matches;\n    controller._urlParams = [];\n    while (matches = re.exec(url)) {\n      controller._urlParams.push(matches[1]);\n      controller.contentReload = true;\n    }\n  }\n  let params = (0,_sdc_params_js__WEBPACK_IMPORTED_MODULE_1__.getUrlParam)(controller, controller.$container);\n  if (controller._urlParams.length) {\n    url = replacePlaceholderController(controller, url, params);\n  }\n  controller.parsedContentUrl = url;\n  return {\n    url: url,\n    args: params[params.length - 1]\n  };\n}\n\n/**\n *\n * @param {jquery} $elem\n * @return {AbstractSDC}\n */\nfunction getController($elem) {\n  if ($elem.hasClass(CONTROLLER_CLASS)) {\n    return $elem.data(`${DATA_CONTROLLER_KEY}`);\n  }\n  return $elem.closest(`.${CONTROLLER_CLASS}`).data(`${DATA_CONTROLLER_KEY}`);\n}\n\n/**\n * loadFilesFromController loads the content (HTML) of a\n * Controller. If you have an alternative content URL is registered, for this\n * controller the origin content URL is ignored.\n *\n * The content is saved as jQuery object to the controller.$content property of\n * the controller.\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n * @returns {Promise<jQuery>} - the promise waits to the files are loaded. it returns the jQuery object.\n */\nfunction loadFilesFromController(controller) {\n  let getElements = {\n    args: {}\n  };\n  if (controller.contentUrl) {\n    getElements = parseContentUrl(controller, controller.contentUrl);\n    controller.contentUrl = getElements.url;\n  }\n  return Promise.all([loadHTMLFile(controller.contentUrl, getElements.args, controller._tagName, controller.contentReload)]).then(function (results) {\n    let htmlFile = results[0];\n    if (htmlFile) {\n      return $(htmlFile);\n    }\n    return null;\n  }).catch(function (err) {\n    console.error(\"loadFiles-catch\", err);\n  });\n}\n\n/**\n * reloadHTMLController loads the content (HTML) of a\n * Controller. If you have an alternative content URL is registered, for this\n * controller the origin content URL is ignored.\n *\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n *\n * @returns {Promise<jQuery>} - the promise waits to the files are loaded. it returns the jQuery object.\n */\nfunction reloadHTMLController(controller) {\n  if (controller.contentUrl) {\n    let getElements = parseContentUrl(controller, controller.contentUrl);\n    controller.contentUrl = getElements.url;\n    return loadHTMLFile(controller.contentUrl, getElements.args, controller._tagName, controller.contentReload);\n  }\n  return new Promise(resolve => {\n    resolve($());\n  });\n}\n\n/**\n *\n * @param {jquery} $element\n * @param {string} tagName\n * @param {Array<string>} superTagNameList\n * @param {AbstractSDC} parentController\n * @returns {boolean}\n */\nfunction runReplaceTagElementsInContainer($element, tagName, superTagNameList, parentController) {\n  let controller = $element.data(DATA_CONTROLLER_KEY);\n  if (controller) {\n    return replaceAllTagElementsInContainer($element, controller);\n  }\n  controller = (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__.controllerFactory)(parentController, $element, tagName, superTagNameList);\n  $element.data(DATA_CONTROLLER_KEY, controller);\n  $element.addClass(CONTROLLER_CLASS);\n  return (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__.runControlFlowFunctions)(controller, $element);\n}\n\n/**\n * runControllerFillContent empties the registered tag and replaces it by the controller\n * content. It sets the CSS tags for the relation with the CSS files.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @param {jquery} $html - jQuery loaded content\n * @return {Promise}\n */\nfunction runControllerFillContent(controller, $html) {\n  if ($html && $html.length > 0) {\n    controller.$container.empty();\n    controller.$container.attr(controller._tagName, '');\n    for (let mixinKey in controller._mixins) {\n      controller.$container.attr(controller._mixins[mixinKey]._tagName, '');\n    }\n    controller.$container.append($html);\n  }\n  return replaceAllTagElementsInContainer(controller.$container, controller);\n}\n\n/**\n * replaceTagElementsInContainer Finds all registered tags in a container. But it ignores\n * registered tags in registered tags. For each registered tag it loads the content.\n * Afterwards it starts the life cycle of the controller. I the next step it starts the\n * procedure for the child elements of the controller tag.\n *\n * @param tagList - list of all registered tags\n * @param $container - jQuery container to find the tags\n * @param parentController - controller in surrounding\n */\nfunction replaceTagElementsInContainer(tagList, $container, parentController) {\n  return new Promise(resolve => {\n    let tagDescriptionElements = findSdcTgs($container, tagList);\n    let tagCount = tagDescriptionElements.length;\n    if (tagCount === 0) {\n      return resolve();\n    }\n    for (let elementIndex = 0; elementIndex < tagDescriptionElements.length; elementIndex++) {\n      runReplaceTagElementsInContainer(tagDescriptionElements[elementIndex].dom, tagDescriptionElements[elementIndex].tag, tagDescriptionElements[elementIndex].super, parentController).then(() => {\n        tagCount--;\n        if (tagCount === 0) {\n          return resolve();\n        }\n      });\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./simpleDomControl/sdc_view.js\n");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval-source-map devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./simpleDomControl/sdc.js");
/******/ var __webpack_exports__AbstractSDC = __webpack_exports__.AbstractSDC;
/******/ var __webpack_exports__allOff = __webpack_exports__.allOff;
/******/ var __webpack_exports__app = __webpack_exports__.app;
/******/ var __webpack_exports__checkIfParamNumberBoolOrString = __webpack_exports__.checkIfParamNumberBoolOrString;
/******/ var __webpack_exports__clearErrorsInForm = __webpack_exports__.clearErrorsInForm;
/******/ var __webpack_exports__on = __webpack_exports__.on;
/******/ var __webpack_exports__setErrorsInForm = __webpack_exports__.setErrorsInForm;
/******/ var __webpack_exports__setEvent = __webpack_exports__.setEvent;
/******/ var __webpack_exports__trigger = __webpack_exports__.trigger;
/******/ export { __webpack_exports__AbstractSDC as AbstractSDC, __webpack_exports__allOff as allOff, __webpack_exports__app as app, __webpack_exports__checkIfParamNumberBoolOrString as checkIfParamNumberBoolOrString, __webpack_exports__clearErrorsInForm as clearErrorsInForm, __webpack_exports__on as on, __webpack_exports__setErrorsInForm as setErrorsInForm, __webpack_exports__setEvent as setEvent, __webpack_exports__trigger as trigger };
/******/ 

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQUFBO1NBQ0E7O1NBRUE7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7O1NBRUE7U0FDQTs7U0FFQTtTQUNBO1NBQ0E7Ozs7O1VDdEJBO1VBQ0E7VUFDQTtVQUNBO1VBQ0EseUNBQXlDLHdDQUF3QztVQUNqRjtVQUNBO1VBQ0E7Ozs7O1VDUEE7Ozs7O1VDQUE7VUFDQTtVQUNBO1VBQ0EsdURBQXVELGlCQUFpQjtVQUN4RTtVQUNBLGdEQUFnRCxhQUFhO1VBQzdEOzs7OztTRU5BO1NBQ0E7U0FDQTtTQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYmVmb3JlLXN0YXJ0dXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svc3RhcnR1cCIsIndlYnBhY2s6Ly8vd2VicGFjay9hZnRlci1zdGFydHVwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiIiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBjYW4ndCBiZSBpbmxpbmVkIGJlY2F1c2UgdGhlIGV2YWwtc291cmNlLW1hcCBkZXZ0b29sIGlzIHVzZWQuXG52YXIgX193ZWJwYWNrX2V4cG9ydHNfXyA9IF9fd2VicGFja19yZXF1aXJlX18oXCIuL3NpbXBsZURvbUNvbnRyb2wvc2RjLmpzXCIpO1xuIiwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractSDC: () => (/* reexport safe */ _simpleDomControl_AbstractSDC_js__WEBPACK_IMPORTED_MODULE_1__.AbstractSDC),\n/* harmony export */   allOff: () => (/* reexport safe */ _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.allOff),\n/* harmony export */   app: () => (/* reexport safe */ _simpleDomControl_sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app),\n/* harmony export */   checkIfParamNumberBoolOrString: () => (/* reexport safe */ _simpleDomControl_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.checkIfParamNumberBoolOrString),\n/* harmony export */   clearErrorsInForm: () => (/* reexport safe */ _simpleDomControl_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.clearErrorsInForm),\n/* harmony export */   controllerFactory: () => (/* reexport safe */ _simpleDomControl_sdc_controller_js__WEBPACK_IMPORTED_MODULE_4__.controllerFactory),\n/* harmony export */   on: () => (/* reexport safe */ _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.on),\n/* harmony export */   runControlFlowFunctions: () => (/* reexport safe */ _simpleDomControl_sdc_controller_js__WEBPACK_IMPORTED_MODULE_4__.runControlFlowFunctions),\n/* harmony export */   setErrorsInForm: () => (/* reexport safe */ _simpleDomControl_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__.setErrorsInForm),\n/* harmony export */   setEvent: () => (/* reexport safe */ _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.setEvent),\n/* harmony export */   socketReconnect: () => (/* binding */ socketReconnect),\n/* harmony export */   test_utils: () => (/* binding */ test_utils),\n/* harmony export */   trigger: () => (/* reexport safe */ _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__.trigger)\n/* harmony export */ });\n/* harmony import */ var _simpleDomControl_sdc_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./simpleDomControl/sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/* harmony import */ var _simpleDomControl_AbstractSDC_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./simpleDomControl/AbstractSDC.js */ \"./src/simpleDomControl/AbstractSDC.js\");\n/* harmony import */ var _simpleDomControl_sdc_events_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./simpleDomControl/sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n/* harmony import */ var _simpleDomControl_sdc_utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./simpleDomControl/sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _simpleDomControl_sdc_controller_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./simpleDomControl/sdc_controller.js */ \"./src/simpleDomControl/sdc_controller.js\");\n/* harmony import */ var _simpleDomControl_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./simpleDomControl/sdc_server_call.js */ \"./src/simpleDomControl/sdc_server_call.js\");\n/* harmony import */ var _simpleDomControl_sdc_test_utils_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./simpleDomControl/sdc_test_utils.js */ \"./src/simpleDomControl/sdc_test_utils.js\");\n\n\n\n\n\n\n\nconst socketReconnect = _simpleDomControl_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_5__.close;\nconst test_utils = {\n  get_controller: _simpleDomControl_sdc_test_utils_js__WEBPACK_IMPORTED_MODULE_6__.get_controller,\n  getCsrfToken: _simpleDomControl_sdc_test_utils_js__WEBPACK_IMPORTED_MODULE_6__.getCsrfToken\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBbUQ7QUFDVztBQUNpQjtBQUNvQztBQUNuQjtBQUNyQztBQUNzQjtBQUVqRixNQUFNYyxlQUFlLEdBQUdILHVFQUFLO0FBQzdCLE1BQU1JLFVBQVUsR0FBRztFQUFDSCxjQUFjO0VBQUVDLFlBQVlBLCtFQUFBQTtBQUFBLENBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGNfY2xpZW50Ly4vc3JjL2luZGV4LmpzP2I2MzUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthcHB9IGZyb20gJy4vc2ltcGxlRG9tQ29udHJvbC9zZGNfbWFpbi5qcyc7XG5pbXBvcnQge0Fic3RyYWN0U0RDfSBmcm9tICcuL3NpbXBsZURvbUNvbnRyb2wvQWJzdHJhY3RTREMuanMnO1xuaW1wb3J0IHtvbiwgdHJpZ2dlciwgYWxsT2ZmLCBzZXRFdmVudH0gZnJvbSAnLi9zaW1wbGVEb21Db250cm9sL3NkY19ldmVudHMuanMnO1xuaW1wb3J0IHtjbGVhckVycm9yc0luRm9ybSwgc2V0RXJyb3JzSW5Gb3JtLCBjaGVja0lmUGFyYW1OdW1iZXJCb29sT3JTdHJpbmd9IGZyb20gJy4vc2ltcGxlRG9tQ29udHJvbC9zZGNfdXRpbHMuanMnO1xuaW1wb3J0IHtjb250cm9sbGVyRmFjdG9yeSwgcnVuQ29udHJvbEZsb3dGdW5jdGlvbnN9IGZyb20gJy4vc2ltcGxlRG9tQ29udHJvbC9zZGNfY29udHJvbGxlci5qcyc7XG5pbXBvcnQge2Nsb3NlfSBmcm9tICcuL3NpbXBsZURvbUNvbnRyb2wvc2RjX3NlcnZlcl9jYWxsLmpzJ1xuaW1wb3J0IHtnZXRfY29udHJvbGxlciwgZ2V0Q3NyZlRva2VufSBmcm9tICcuL3NpbXBsZURvbUNvbnRyb2wvc2RjX3Rlc3RfdXRpbHMuanMnXG5cbmNvbnN0IHNvY2tldFJlY29ubmVjdCA9IGNsb3NlXG5jb25zdCB0ZXN0X3V0aWxzID0ge2dldF9jb250cm9sbGVyLCBnZXRDc3JmVG9rZW59O1xuXG5leHBvcnQge1xuICAgIGFwcCwgQWJzdHJhY3RTREMsIG9uLCB0cmlnZ2VyLCBhbGxPZmYsIHNldEV2ZW50LCBjbGVhckVycm9yc0luRm9ybSwgc2V0RXJyb3JzSW5Gb3JtLCBjaGVja0lmUGFyYW1OdW1iZXJCb29sT3JTdHJpbmcsXG4gICAgY29udHJvbGxlckZhY3RvcnksIHJ1bkNvbnRyb2xGbG93RnVuY3Rpb25zLCBzb2NrZXRSZWNvbm5lY3QsIHRlc3RfdXRpbHNcbn1cbiJdLCJuYW1lcyI6WyJhcHAiLCJBYnN0cmFjdFNEQyIsIm9uIiwidHJpZ2dlciIsImFsbE9mZiIsInNldEV2ZW50IiwiY2xlYXJFcnJvcnNJbkZvcm0iLCJzZXRFcnJvcnNJbkZvcm0iLCJjaGVja0lmUGFyYW1OdW1iZXJCb29sT3JTdHJpbmciLCJjb250cm9sbGVyRmFjdG9yeSIsInJ1bkNvbnRyb2xGbG93RnVuY3Rpb25zIiwiY2xvc2UiLCJnZXRfY29udHJvbGxlciIsImdldENzcmZUb2tlbiIsInNvY2tldFJlY29ubmVjdCIsInRlc3RfdXRpbHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/simpleDomControl/AbstractSDC.js":
/*!*********************************************!*\
  !*** ./src/simpleDomControl/AbstractSDC.js ***!
  \*********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractSDC: () => (/* binding */ AbstractSDC)\n/* harmony export */ });\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_socket.js */ \"./src/simpleDomControl/sdc_socket.js\");\n/* harmony import */ var _sdc_server_call_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_server_call.js */ \"./src/simpleDomControl/sdc_server_call.js\");\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n\n\n\n\n\nclass AbstractSDC {\n  constructor() {\n    this._uuid = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.uuidv4)();\n    this.contentUrl = '';\n    this.contentReload = false;\n    this.events = [];\n    this.load_async = false;\n    this._isEventsSet = false;\n    this._allEvents = null;\n    this._urlParams = [];\n    this._models = [];\n\n    // ------------------ Old deprecated properties ----------------------\n    this._cssUrls = [];\n    this.afterShow = () => {\n      console.warn('afterShow is deprecated!!');\n    };\n    // -------------- End old deprecated properties ----------------------\n\n    /**\n     *\n     * @type {{string: AbstractSDC}}\n     */\n    this._mixins = {};\n\n    /**\n     * @type {string}\n     */\n    this._tagName = '';\n\n    /**\n     * @type {{string:AbstractSDC}}\n     */\n    this._childController = {};\n\n    /**\n     * @type {AbstractSDC}\n     */\n    this._parentController = null;\n\n    /**\n     * @type {boolean}\n     */\n    this._onLoadDone = false;\n\n    /**\n     * @type {jquery}\n     */\n    this.$container = null;\n\n    /**\n     *\n     * @type {boolean}\n     */\n    this._isMixin = false;\n  }\n\n  /**\n   *\n   * @param {string} method must be in {}\n   * @param {Array} args in arguments of\n   *\n   */\n  _runLifecycle(method, args) {\n    if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.DEBUG) {\n      console.debug(method, this._tagName);\n    }\n    let returnPromisses = [];\n    if (this._isMixin) {\n      return;\n    }\n    this._isMixin = true;\n    for (let mixinKey in this._mixins) {\n      let mixin = this._mixins[mixinKey];\n      if (typeof mixin[method] === 'function') {\n        returnPromisses.push(mixin[method].apply(this, args));\n      }\n    }\n    return Promise.all(returnPromisses).then(() => {\n      this._isMixin = false;\n    });\n  }\n  onInit() {\n    if (_sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.DEBUG) {\n      console.DEBUG(Array.apply(null, arguments), this._tagName);\n    }\n  }\n  get parentController() {\n    return this._parentController;\n  }\n  get childController() {\n    return this._childController;\n  }\n  onLoad() {\n    return this._runLifecycle('onLoad', arguments);\n  }\n  willShow() {\n    return this._runLifecycle('willShow', arguments);\n  }\n  onRefresh() {\n    return this._runLifecycle('onRefresh', arguments);\n  }\n  onRemove() {\n    this._runLifecycle('onRemove', arguments);\n    return true;\n  }\n  remove() {\n    for (const model of this._models) {\n      model.close();\n    }\n    let _childController = this._childController;\n    for (let i in _childController) {\n      if (_childController.hasOwnProperty(i)) {\n        for (let cc of _childController[i]) {\n          if (!cc.remove()) {\n            return false;\n          }\n        }\n      }\n    }\n    if (!this.onRemove || this.onRemove()) {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_0__.allOff)(this);\n      const c_name = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.tagNameToCamelCase)(this._tagName);\n      if (this._parentController._childController[c_name]) {\n        let arr = this._parentController._childController[c_name];\n        for (let i = 0; i < arr.length; i++) {\n          if (arr[i] === this) {\n            arr.splice(i, 1);\n          }\n        }\n      }\n      this.$container.remove();\n      delete this;\n      return true;\n    }\n    return false;\n  }\n  controller_name() {\n    return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.tagNameToReadableName)(this._tagName);\n  }\n  addEvent(event, selector, handler) {\n    this.getEvents();\n    this._allEvents[event] = this._allEvents[event] || {};\n    this._allEvents[event][selector] = handler;\n  }\n  getEvents() {\n    if (this._allEvents) return this._allEvents;\n    let allEvents = [];\n    allEvents = allEvents.concat(this.events);\n    for (let mixinKey in this._mixins) {\n      let mixin = this._mixins[mixinKey];\n      if (Array.isArray(mixin.events)) {\n        allEvents = allEvents.concat(mixin.events);\n      }\n    }\n    return this._allEvents = _.merge(...allEvents);\n  }\n  post(url, args) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.post(this, url, args);\n  }\n  get(url, args) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.get(this, url, args);\n  }\n  submitForm(form, url, method) {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.submitFormAndUpdateView(this, form, url, method);\n  }\n  serverCall(methode, args) {\n    let re = /sdc_view\\/([^/]+)/i;\n    let app = this.contentUrl.match(re);\n    if (!app || app.length < 2) {\n      console.error('To use the serverCall function the contentUrl must be set: ' + this.name);\n      return;\n    }\n    return (0,_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_3__.callServer)(app[1], this._tagName, this.parsedContentUrl, methode, args);\n  }\n\n  /**\n   *\n   * @param model_name {string | Number}\n   * @param model_query {Object}\n   * @constructor\n   */\n  newModel(model_name, model_query = {}) {\n    if (model_name instanceof Number && model_name.hasOwnProperty('load')) {\n      return model_name.load(this);\n    }\n    const model = new _sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__.Model(model_name, model_query);\n    this._models.push(model);\n    return model;\n  }\n\n  /**\n   *\n   * @param model_name {string}\n   * @param model_query {Object}\n   * @param values {Object}\n   * @constructor\n   */\n  updateModel(model_name, model_query = {}, values) {\n    let model = new _sdc_socket_js__WEBPACK_IMPORTED_MODULE_2__.Model(model_name, model_query);\n    return model.load().then(() => {\n      model.values |= values;\n      model.save().then(() => {\n        model.close();\n        return model.values;\n      });\n    });\n  }\n\n  /**\n   * Adapter to this.$container.find\n   * @param {string} domSelector\n   */\n  find(domSelector) {\n    return this.$container.find(domSelector);\n  }\n  refresh() {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.refresh(this.$container, this);\n  }\n  reload() {\n    return _sdc_main_js__WEBPACK_IMPORTED_MODULE_1__.app.reloadController(this);\n  }\n  submitModelFormDistributor($form, e) {\n    if (typeof this._submitModelForm === 'function') {\n      return this._submitModelForm($form, e);\n    }\n    if (typeof this.submitModelForm === 'function') {\n      return this.submitModelForm($form, e);\n    }\n    return this.defaultSubmitModelForm($form, e);\n  }\n  iterateAllChildren() {\n    let _childController = this._childController;\n    let res = [];\n    for (let i in _childController) {\n      if (_childController.hasOwnProperty(i)) {\n        for (let cc of _childController[i]) {\n          res.push(cc);\n          res.push(...cc.iterateAllChildren());\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * Model Form Events\n   */\n  defaultSubmitModelForm($form, e) {\n    let p_list = [];\n    if (!this._isMixin) {\n      e.stopPropagation();\n      e.preventDefault();\n      let model = $form.data('model');\n      const values = model.syncForm($form);\n      for (let instance_value of values) {\n        p_list.push(new Promise((resolve, reject) => {\n          let prom;\n          if (instance_value.pk !== null && instance_value.pk >= 0) {\n            prom = model.save(instance_value.pk);\n          } else {\n            prom = model.create(instance_value);\n          }\n          prom.then(res => {\n            (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.clearErrorsInForm)($form);\n            this.submit_model_form_success && this.submit_model_form_success(res[0]);\n            for (const controller of this.iterateAllChildren()) {\n              controller.submit_model_form_success && controller.submit_model_form_success(res[0]);\n            }\n            resolve(res);\n          }).catch(data => {\n            (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_4__.setErrorsInForm)($form, $(data.html));\n            this.submit_model_form_error && this.submit_model_form_error(data);\n            for (const controller of this.iterateAllChildren()) {\n              controller.submit_model_form_error && controller.submit_model_form_error(data);\n            }\n            reject(data);\n          });\n        }));\n      }\n    }\n    return Promise.all(p_list).then(res => {\n      return Object.assign({}, ...res.flat());\n    });\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/AbstractSDC.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_controller.js":
/*!************************************************!*\
  !*** ./src/simpleDomControl/sdc_controller.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Global: () => (/* binding */ Global),\n/* harmony export */   controllerFactory: () => (/* binding */ controllerFactory),\n/* harmony export */   controllerList: () => (/* binding */ controllerList),\n/* harmony export */   runControlFlowFunctions: () => (/* binding */ runControlFlowFunctions),\n/* harmony export */   runRefresh: () => (/* binding */ runRefresh),\n/* harmony export */   tagList: () => (/* binding */ tagList)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./src/simpleDomControl/sdc_view.js\");\n/* harmony import */ var _sdc_params_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_params.js */ \"./src/simpleDomControl/sdc_params.js\");\n\n\n\nlet Global = {};\nlet controllerList = {};\nfunction tagList() {\n  return Object.keys(controllerList);\n}\nfunction prepareMixins(superTagNameList, tagName) {\n  superTagNameList = superTagNameList.concat(controllerList[tagName][1]);\n  superTagNameList = superTagNameList.filter((value, index, self) => {\n    return self.indexOf(value) === index;\n  });\n  let hasAdded = true;\n  while (hasAdded) {\n    hasAdded = false;\n    for (let tag of superTagNameList) {\n      for (let newTag of controllerList[tag][1]) {\n        if (!superTagNameList.includes(newTag)) {\n          superTagNameList.push(newTag);\n          hasAdded = true;\n        }\n      }\n    }\n  }\n  return superTagNameList;\n}\n\n/**\n * setParentController sets the parent controller as property: 'parentController'\n * to the child controller. Also, it adds the child controller to the property list:\n * 'parentController' to the parent controller\n *\n * @param {AbstractSDC} parentController - js controller instance, controller of the parent DOM of the controllers DOM\n * @param {AbstractSDC} controller - js controller instance\n * @return {AbstractSDC} - parentController\n */\nfunction setParentController(parentController, controller) {\n  if (parentController) {\n    let controllerName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(controller._tagName);\n    if (!parentController._childController[controllerName]) {\n      parentController._childController[controllerName] = [];\n    }\n    parentController._childController[controllerName].push(controller);\n  }\n  return controller._parentController = parentController;\n}\n\n/**\n * controllerFactoryInstance it generates a controller instance\n * depending if the controller is registered as a global controller. It sets the\n * $container object to the jQuery representation of the tag.\n *\n * It handles the init parameter by the data values of the DOM.\n *\n * It handles the super extensions.\n *\n * @param {AbstractSDC} parentController - Controller of the parent DOM\n * @param {jquery} $element - The current DOM jQuery\n * @param {string} tagName - the registered tag name of the current DOM\n * @param {string} superTagNameList - tag names of super controller\n * @return {AbstractSDC} -  new Controller\n */\nfunction controllerFactoryInstance(parentController, $element, tagName, superTagNameList) {\n  let mixinControllerClass = [];\n  superTagNameList = prepareMixins(superTagNameList, tagName);\n  for (let superTagName of superTagNameList) {\n    mixinControllerClass.push(controllerList[superTagName][0]);\n  }\n  let controllerClass = controllerList[tagName][0];\n  let controller = new ((0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.agileAggregation)(controllerClass, ...mixinControllerClass))();\n  controller._tagName = tagName;\n  setParentController(parentController, controller);\n  controller.$container = $element;\n  (0,_sdc_params_js__WEBPACK_IMPORTED_MODULE_2__.runOnInitWithParameter)($element, controller);\n  return controller;\n}\n\n/**\n * controllerFactory it either generates a controller or takes a globe instance\n * depending if the controller is registered as a global controller. It sets the\n * $container object to the jQuery representation of the tag.\n *\n * Remember Global controller can not have a super controller!\n *\n * @param {AbstractSDC} parentController - Controller of the parent DOM\n * @param {jquery} $element - The current DOM jQuery\n * @param {string} tagName - the registered tag name of the current DOM\n * @param {string} superTagNameList - tag names of super controller\n * @return {AbstractSDC} -  new Controller\n */\nfunction controllerFactory(parentController, $element, tagName, superTagNameList) {\n  let gTagName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(tagName);\n  if (Global[gTagName]) {\n    let controller = Global[gTagName];\n    setParentController(parentController, controller);\n    controller.$container = $element;\n    return controller;\n  }\n  return controllerFactoryInstance(parentController, $element, tagName, superTagNameList);\n}\n\n/**\n * runControllerShow first runs onLoad and fill content for all sub\n * controller. Only if all the sub controller are loaded the willShow\n * control flow function gets called.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @param {jquery} $html - jQuery loaded content\n * @return {Promise<*>} - return of the onLoad function\n */\nfunction runControllerShow(controller, $html) {\n  return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.runControllerFillContent)(controller, $html).then(function (args) {\n    args = args || true;\n    if (controller.willShow) {\n      let loadPromiseOrContent = controller.willShow();\n      if (loadPromiseOrContent instanceof Promise) {\n        return loadPromiseOrContent.then(function () {\n          return args;\n        });\n      }\n    }\n    return args;\n  });\n}\n\n/**\n * runControllerLoad Calls the onLoad function of the controller.\n * This function is called before the HTML is set to the page.\n * The parameter is a list of children of the tag and the registered tag.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @return {Promise<*>} - return of the onLoad function\n */\nfunction runControllerLoad(controller) {\n  return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.loadFilesFromController)(controller).then(html => {\n    if (!controller.onLoad || controller._onLoadDone) {\n      return html;\n    }\n    controller._onLoadDone = true;\n    let loadPromise = controller.onLoad(html);\n    return (loadPromise || (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)()).then(() => {\n      return html;\n    });\n  });\n}\n\n/**\n * runControlFlowFunctions runs the control flow functions:\n * 1. onLoad()\n * 2. fill content\n * 3. willShow(dom parameter)\n * 4. refresh()\n *\n * @param controller\n */\nfunction runControlFlowFunctions(controller) {\n  const prom_controller = runControllerLoad(controller).then(function ($html) {\n    return runControllerShow(controller, $html);\n  }).then(() => {\n    return runRefresh(controller);\n  }).catch(function ($html) {\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.runControllerFillContent)(controller, $html);\n  });\n  if (controller.load_async) {\n    return Promise.resolve();\n  }\n  return prom_controller;\n}\n\n/**\n *\n * @param {AbstractSDC} controller\n */\nfunction runRefresh(controller) {\n  return controller.refresh && controller.refresh();\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_controller.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_dom_events.js":
/*!************************************************!*\
  !*** ./src/simpleDomControl/sdc_dom_events.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   STD_EVENT_BLACK_LIST: () => (/* binding */ STD_EVENT_BLACK_LIST),\n/* harmony export */   STD_EVENT_LIST: () => (/* binding */ STD_EVENT_LIST),\n/* harmony export */   initEvents: () => (/* binding */ initEvents),\n/* harmony export */   setControllerEvents: () => (/* binding */ setControllerEvents),\n/* harmony export */   windowEventHandler: () => (/* binding */ windowEventHandler)\n/* harmony export */ });\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_view.js */ \"./src/simpleDomControl/sdc_view.js\");\n\nconst STD_EVENT_BLACK_LIST = ['onbeforeunload'];\nconst STD_EVENT_LIST = Object.keys(window).filter(key => /^on/.test(key) && !STD_EVENT_BLACK_LIST.includes(key)).map(x => x.slice(2));\nfunction windowEventHandler(event) {\n  let ev_type = event.type;\n  if (event.hasOwnProperty('namespace') && event.namespace && event.namespace.length) ev_type += `.${event.namespace}`;\n  let $elm = $(event.target);\n  let controller = null;\n  let is_done = false;\n  let is_last_elem = false;\n  event.stopImmediatePropagation = () => is_last_elem = true;\n  event.stopPropagation = () => is_last_elem = is_done = true;\n  while ($elm.length) {\n    let attrs = $elm.attr(`sdc_${ev_type}`);\n    if (attrs) {\n      if (!controller) {\n        controller = (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_0__.getController)($elm);\n        if (!controller) return;\n      }\n      while (controller) {\n        attrs.split(' ').forEach(attr => {\n          if (is_done) return;\n          let handler = null;\n          if (typeof attr === 'function') {\n            handler = attr;\n          } else if (typeof controller[attr] === 'function') {\n            handler = controller[attr];\n          } else if (typeof attr === 'string' && attr.startsWith('this.event_')) {\n            handler = controller.getEvents()[ev_type];\n            if (!handler) {\n              return;\n            }\n            handler = handler[attr.slice('this.event_'.length)];\n            if (!handler) {\n              return;\n            }\n          }\n          handler && handler.call(controller, $elm, event);\n        });\n        if (is_last_elem) return;\n        controller = controller._parentController;\n      }\n    }\n    if (is_done) return;\n    $elm = $elm.parent();\n  }\n  return {\n    res: true\n  };\n}\n\n/**\n *\n */\nfunction initEvents() {\n  const $window = $(window);\n  STD_EVENT_LIST.forEach(ev_type => {\n    $window.off(ev_type).on(ev_type, windowEventHandler);\n  });\n}\n\n/**\n *\n * @param {AbstractSDC} controller\n */\nfunction setControllerEvents(controller) {\n  if (controller._isEventsSet) {\n    return;\n  }\n  const events = controller.getEvents();\n  for (let ev_type in events) {\n    if (events.hasOwnProperty(ev_type)) {\n      let eventList = events[ev_type];\n      for (let domSelector in eventList) {\n        if (eventList.hasOwnProperty(domSelector)) {\n          controller.find(domSelector).each(function () {\n            let $elements = $(this);\n            let event_list = $elements.attr(`sdc_${ev_type}`) || null;\n            if (!event_list) event_list = [];else event_list = event_list.split(' ');\n            const new_key = `this.event_${domSelector}`;\n            if (event_list.indexOf(new_key) === -1) {\n              event_list.push(new_key);\n              $elements.attr(`sdc_${ev_type}`, event_list.join(' '));\n            }\n          });\n        }\n      }\n    }\n  }\n  // TODO: Is it needed\n  //controller._isEventsSet = true;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_dom_events.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_events.js":
/*!********************************************!*\
  !*** ./src/simpleDomControl/sdc_events.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   allOff: () => (/* binding */ allOff),\n/* harmony export */   on: () => (/* binding */ on),\n/* harmony export */   setEvent: () => (/* binding */ setEvent),\n/* harmony export */   trigger: () => (/* binding */ trigger)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n\n\n/**\n * A list of handler (controller) for the registered events.\n * @type {{}}\n */\nlet handlerList = {};\n\n/**\n * eventList is a map connection the event to a responsing function name.\n * @type {{}}\n */\nlet eventList = {};\n\n/**\n * on is a function to register a controller to a event. The controller has to\n * implement the the handler function. The handler functions by default has the same\n * name as the event. You can use the app.events.setEvent function to register a\n * event with a different named function.\n *\n * @param {string} name - the event name String\n * @param {AbstractSDC} controller -  a instance of a JavaScript controller object.\n */\nfunction on(name, controller) {\n  setEvent(name);\n  if (!eventList.hasOwnProperty(name)) {\n    return console.log('No event: ' + name, controller);\n  }\n  let funcName = eventList[name];\n  if (!controller[funcName]) {\n    return console.log('No event handler: ' + name, controller);\n  }\n  handlerList[name].push(controller);\n}\n\n/**\n * setEvent allows you to register a event with a function with a different\n * name as the event.\n *\n * @param {string} name - event name\n * @param {string} functionName - function name\n */\nfunction setEvent(name, functionName) {\n  if (!functionName) {\n    functionName = name;\n  }\n  if (!eventList[name]) {\n    eventList[name] = functionName;\n    handlerList[name] = [];\n  }\n}\n\n/**\n * allOff is to remove all events of the controller instance\n * ! important before destroying the instance.\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n */\nfunction allOff(controller) {\n  for (let eventName in handlerList) {\n    if (handlerList.hasOwnProperty(eventName)) {\n      for (let i = handlerList[eventName].length; i >= 0; i--) {\n        if (controller === handlerList[eventName][i]) {\n          handlerList[eventName].splice(i, 1);\n        }\n      }\n    }\n  }\n}\n\n/**\n * trigger triggers the event. The handler function of all registered\n * controller gets called. The returned Promise returns a list with all\n * returned values.\n *\n * @param {string} name - event name\n * @returns {Promise<object>} - waits to return all return values of the handler\n */\nfunction trigger(name) {\n  let args = Array.apply(null, arguments);\n  name = args.shift();\n  if (!handlerList.hasOwnProperty(name) || !eventList.hasOwnProperty(name)) {\n    return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)();\n  }\n  let handler = handlerList[name];\n  let funcName = eventList[name];\n  let list = [];\n  for (let i = 0; i < handler.length; i++) {\n    let return_val = handler[i][funcName].apply(handler[i], args);\n    if (typeof return_val !== \"undefined\") {\n      list.push(return_val);\n    }\n  }\n  return Promise.all(list);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUMsR0FBR1MsT0FBTyxDQUFDUixNQUFNLEVBQUVELENBQUMsRUFBRSxFQUFFO0lBQ3JDLElBQUlXLFVBQVUsR0FBR0YsT0FBTyxDQUFDVCxDQUFDLENBQUMsQ0FBQ0wsUUFBUSxDQUFDLENBQUNXLEtBQUssQ0FBQ0csT0FBTyxDQUFDVCxDQUFDLENBQUMsRUFBRUksSUFBSSxDQUFDO0lBQzdELElBQUksT0FBT08sVUFBVSxLQUFLLFdBQVcsRUFBRTtNQUNuQ0QsSUFBSSxDQUFDZCxJQUFJLENBQUNlLFVBQVUsQ0FBQztJQUN6QjtFQUNKO0VBRUEsT0FBT0MsT0FBTyxDQUFDQyxHQUFHLENBQUNILElBQUksQ0FBQztBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL3NkY19jbGllbnQvLi9zcmMvc2ltcGxlRG9tQ29udHJvbC9zZGNfZXZlbnRzLmpzPzhiODgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtwcm9taXNlRHVtbXlGYWN0b3J5fSBmcm9tIFwiLi9zZGNfdXRpbHMuanNcIjtcblxuXG4vKipcbiAqIEEgbGlzdCBvZiBoYW5kbGVyIChjb250cm9sbGVyKSBmb3IgdGhlIHJlZ2lzdGVyZWQgZXZlbnRzLlxuICogQHR5cGUge3t9fVxuICovXG5sZXQgaGFuZGxlckxpc3QgPSB7fTtcblxuLyoqXG4gKiBldmVudExpc3QgaXMgYSBtYXAgY29ubmVjdGlvbiB0aGUgZXZlbnQgdG8gYSByZXNwb25zaW5nIGZ1bmN0aW9uIG5hbWUuXG4gKiBAdHlwZSB7e319XG4gKi9cbmxldCBldmVudExpc3QgPSB7fTtcblxuLyoqXG4gKiBvbiBpcyBhIGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGEgY29udHJvbGxlciB0byBhIGV2ZW50LiBUaGUgY29udHJvbGxlciBoYXMgdG9cbiAqIGltcGxlbWVudCB0aGUgdGhlIGhhbmRsZXIgZnVuY3Rpb24uIFRoZSBoYW5kbGVyIGZ1bmN0aW9ucyBieSBkZWZhdWx0IGhhcyB0aGUgc2FtZVxuICogbmFtZSBhcyB0aGUgZXZlbnQuIFlvdSBjYW4gdXNlIHRoZSBhcHAuZXZlbnRzLnNldEV2ZW50IGZ1bmN0aW9uIHRvIHJlZ2lzdGVyIGFcbiAqIGV2ZW50IHdpdGggYSBkaWZmZXJlbnQgbmFtZWQgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSB0aGUgZXZlbnQgbmFtZSBTdHJpbmdcbiAqIEBwYXJhbSB7QWJzdHJhY3RTREN9IGNvbnRyb2xsZXIgLSAgYSBpbnN0YW5jZSBvZiBhIEphdmFTY3JpcHQgY29udHJvbGxlciBvYmplY3QuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBvbihuYW1lLCBjb250cm9sbGVyKSB7XG4gICAgc2V0RXZlbnQobmFtZSk7XG4gICAgaWYgKCFldmVudExpc3QuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCdObyBldmVudDogJyArIG5hbWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cblxuICAgIGxldCBmdW5jTmFtZSA9IGV2ZW50TGlzdFtuYW1lXTtcbiAgICBpZiAoIWNvbnRyb2xsZXJbZnVuY05hbWVdKSB7XG4gICAgICAgIHJldHVybiBjb25zb2xlLmxvZygnTm8gZXZlbnQgaGFuZGxlcjogJyArIG5hbWUsIGNvbnRyb2xsZXIpO1xuICAgIH1cblxuICAgIGhhbmRsZXJMaXN0W25hbWVdLnB1c2goY29udHJvbGxlcik7XG59XG5cbi8qKlxuICogc2V0RXZlbnQgYWxsb3dzIHlvdSB0byByZWdpc3RlciBhIGV2ZW50IHdpdGggYSBmdW5jdGlvbiB3aXRoIGEgZGlmZmVyZW50XG4gKiBuYW1lIGFzIHRoZSBldmVudC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSAtIGV2ZW50IG5hbWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBmdW5jdGlvbk5hbWUgLSBmdW5jdGlvbiBuYW1lXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFdmVudChuYW1lLCBmdW5jdGlvbk5hbWUpIHtcbiAgICBpZiAoIWZ1bmN0aW9uTmFtZSkge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBuYW1lO1xuICAgIH1cblxuICAgIGlmICghZXZlbnRMaXN0W25hbWVdKSB7XG4gICAgICAgIGV2ZW50TGlzdFtuYW1lXSA9IGZ1bmN0aW9uTmFtZTtcbiAgICAgICAgaGFuZGxlckxpc3RbbmFtZV0gPSBbXTtcbiAgICB9XG59XG5cbi8qKlxuICogYWxsT2ZmIGlzIHRvIHJlbW92ZSBhbGwgZXZlbnRzIG9mIHRoZSBjb250cm9sbGVyIGluc3RhbmNlXG4gKiAhIGltcG9ydGFudCBiZWZvcmUgZGVzdHJveWluZyB0aGUgaW5zdGFuY2UuXG4gKlxuICogQHBhcmFtIHtBYnN0cmFjdFNEQ30gY29udHJvbGxlciAtIGEgaW5zdGFuY2Ugb2YgYSBKYXZhU2NyaXB0IGNvbnRyb2xsZXIgb2JqZWN0LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWxsT2ZmKGNvbnRyb2xsZXIpIHtcbiAgICBmb3IgKGxldCBldmVudE5hbWUgaW4gaGFuZGxlckxpc3QpIHtcbiAgICAgICAgaWYgKGhhbmRsZXJMaXN0Lmhhc093blByb3BlcnR5KGV2ZW50TmFtZSkpIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBoYW5kbGVyTGlzdFtldmVudE5hbWVdLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoY29udHJvbGxlciA9PT0gaGFuZGxlckxpc3RbZXZlbnROYW1lXVtpXSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyTGlzdFtldmVudE5hbWVdLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogdHJpZ2dlciB0cmlnZ2VycyB0aGUgZXZlbnQuIFRoZSBoYW5kbGVyIGZ1bmN0aW9uIG9mIGFsbCByZWdpc3RlcmVkXG4gKiBjb250cm9sbGVyIGdldHMgY2FsbGVkLiBUaGUgcmV0dXJuZWQgUHJvbWlzZSByZXR1cm5zIGEgbGlzdCB3aXRoIGFsbFxuICogcmV0dXJuZWQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gZXZlbnQgbmFtZVxuICogQHJldHVybnMge1Byb21pc2U8b2JqZWN0Pn0gLSB3YWl0cyB0byByZXR1cm4gYWxsIHJldHVybiB2YWx1ZXMgb2YgdGhlIGhhbmRsZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRyaWdnZXIobmFtZSkge1xuICAgIGxldCBhcmdzID0gQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICBuYW1lID0gYXJncy5zaGlmdCgpO1xuICAgIGlmKCFoYW5kbGVyTGlzdC5oYXNPd25Qcm9wZXJ0eShuYW1lKSB8fCAhZXZlbnRMaXN0Lmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlRHVtbXlGYWN0b3J5KCk7XG4gICAgfVxuICAgIGxldCBoYW5kbGVyID0gaGFuZGxlckxpc3RbbmFtZV07XG4gICAgbGV0IGZ1bmNOYW1lID0gZXZlbnRMaXN0W25hbWVdO1xuXG4gICAgbGV0IGxpc3QgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgcmV0dXJuX3ZhbCA9IGhhbmRsZXJbaV1bZnVuY05hbWVdLmFwcGx5KGhhbmRsZXJbaV0sIGFyZ3MpO1xuICAgICAgICBpZiAodHlwZW9mIHJldHVybl92YWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIGxpc3QucHVzaChyZXR1cm5fdmFsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChsaXN0KTtcbn0iXSwibmFtZXMiOlsicHJvbWlzZUR1bW15RmFjdG9yeSIsImhhbmRsZXJMaXN0IiwiZXZlbnRMaXN0Iiwib24iLCJuYW1lIiwiY29udHJvbGxlciIsInNldEV2ZW50IiwiaGFzT3duUHJvcGVydHkiLCJjb25zb2xlIiwibG9nIiwiZnVuY05hbWUiLCJwdXNoIiwiZnVuY3Rpb25OYW1lIiwiYWxsT2ZmIiwiZXZlbnROYW1lIiwiaSIsImxlbmd0aCIsInNwbGljZSIsInRyaWdnZXIiLCJhcmdzIiwiQXJyYXkiLCJhcHBseSIsImFyZ3VtZW50cyIsInNoaWZ0IiwiaGFuZGxlciIsImxpc3QiLCJyZXR1cm5fdmFsIiwiUHJvbWlzZSIsImFsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_events.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_main.js":
/*!******************************************!*\
  !*** ./src/simpleDomControl/sdc_main.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   app: () => (/* binding */ app)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./src/simpleDomControl/sdc_view.js\");\n/* harmony import */ var _AbstractSDC_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AbstractSDC.js */ \"./src/simpleDomControl/AbstractSDC.js\");\n/* harmony import */ var _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_controller.js */ \"./src/simpleDomControl/sdc_controller.js\");\n/* harmony import */ var _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./sdc_dom_events.js */ \"./src/simpleDomControl/sdc_dom_events.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_server_call_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./sdc_server_call.js */ \"./src/simpleDomControl/sdc_server_call.js\");\n\n\n\n\n\n\n\nconst PROPERTIES_UPDATE = {\n  'classname': 'class'\n};\nlet sdcDomFragment = function (element, props) {\n  let $new_elem,\n    is_self = false;\n  if (typeof element === 'string') {\n    $new_elem = $(document.createElement(element));\n  } else {\n    const tagName = `this.${element.name}`;\n    $new_elem = $(document.createElement(tagName));\n    $new_elem.data('handler', element);\n    is_self = true;\n  }\n  if (props) {\n    Object.entries(props).forEach(([k, v]) => {\n      if (k.startsWith('on')) {\n        $new_elem[0].addEventListener(k.substring(2).toLowerCase(), v);\n      } else {\n        if (PROPERTIES_UPDATE[k.toLowerCase()]) {\n          k = PROPERTIES_UPDATE[k.toLowerCase()];\n        }\n        $new_elem[0].setAttribute(k, v);\n      }\n    });\n  }\n  if (is_self) {\n    $new_elem.addClass('_bind_to_update_handler _with_handler');\n  }\n  return $new_elem;\n};\nwindow.sdcDom = function (tagName, props, ...children) {\n  if (!tagName) {\n    return '';\n  }\n  const $new_elem = sdcDomFragment(tagName, props);\n  for (const c of children) {\n    $new_elem.append(c);\n  }\n  return $new_elem;\n};\nlet app = {\n  CSRF_TOKEN: window.CSRF_TOKEN || '',\n  LANGUAGE_CODE: window.LANGUAGE_CODE || 'en',\n  DEBUG: window.DEBUG || false,\n  VERSION: window.VERSION || '0.0',\n  tagNames: [],\n  Global: _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.Global,\n  rootController: null,\n  _isInit: false,\n  _origin_trigger: null,\n  init_sdc: () => {\n    if (!app._isInit) {\n      app._isInit = true;\n      if (!app._origin_trigger) {\n        app._origin_trigger = $.fn.trigger;\n        $.fn.trigger = function (event) {\n          const ev_type = {}.hasOwnProperty.call(event, \"type\") ? event.type : event;\n          if (!_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.STD_EVENT_LIST.includes(ev_type)) {\n            _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.STD_EVENT_LIST.push(ev_type);\n            $(window).on(ev_type, _sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.windowEventHandler);\n          }\n          return app._origin_trigger.call(this, event);\n        };\n        app.updateJquery();\n      } else {\n        (0,_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_6__.close)();\n      }\n      (0,_sdc_server_call_js__WEBPACK_IMPORTED_MODULE_6__.isConnected)();\n      (0,_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.initEvents)();\n      app.rootController = app.rootController || new _AbstractSDC_js__WEBPACK_IMPORTED_MODULE_2__.AbstractSDC();\n    }\n    app.tagNames = (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.tagList)();\n    for (let [tag, controller] of Object.entries(app.Global)) {\n      if (!controller.$container) _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.Global[tag].$container = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.getBody)();\n    }\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.replaceTagElementsInContainer)(app.tagNames, (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.getBody)(), app.rootController);\n  },\n  updateJquery: () => {\n    $.fn.safeReplace = function ($elem) {\n      return app.safeReplace($(this), $elem);\n    };\n    $.fn.safeEmpty = function () {\n      return app.safeEmpty($(this));\n    };\n    $.fn.safeRemove = function () {\n      return app.safeRemove($(this));\n    };\n  },\n  controllerToTag: Controller => {\n    let tagName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.camelCaseToTagName)(Controller.name);\n    return tagName.replace(/-controller$/, '');\n  },\n  /**\n   *\n   * @param {AbstractSDC} Controller\n   */\n  registerGlobal: Controller => {\n    let tagName = app.controllerToTag(Controller);\n    let globalController = new Controller();\n    _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName] = [globalController, []];\n    globalController._tagName = tagName;\n    window[(0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(tagName)] = _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.Global[(0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.tagNameToCamelCase)(tagName)] = globalController;\n  },\n  cleanCache: () => {\n    (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.cleanCache)();\n  },\n  /**\n   *\n   * @param {AbstractSDC} Controller\n   */\n  register: Controller => {\n    let tagName = app.controllerToTag(Controller);\n    _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName] = [Controller, []];\n    Controller.prototype._tagName = tagName;\n    return {\n      /**\n       *\n       * @param {Array<string>} mixins Controller tag names\n       */\n      addMixin: (...mixins) => {\n        for (let mixin of mixins) {\n          let mixinName;\n          if (typeof mixin === \"string\") {\n            mixinName = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.camelCaseToTagName)(mixin);\n          } else if (mixin) {\n            mixinName = app.controllerToTag(mixin);\n          }\n          _sdc_controller_js__WEBPACK_IMPORTED_MODULE_3__.controllerList[tagName][1].push(mixinName);\n        }\n      }\n    };\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @return {Promise}\n   */\n  post: (controller, url, args) => {\n    if (!args) {\n      args = {};\n    }\n    args.CSRF_TOKEN = app.CSRF_TOKEN;\n    return app.ajax(controller, url, params, $.post);\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @return {Promise}\n   */\n  get: (controller, url, args) => {\n    return app.ajax(controller, url, args, $.get);\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @param {string} url\n   * @param {object} args\n   * @param {function} method $.get or $.post\n   * @return {Promise}\n   */\n  ajax: (controller, url, args, method) => {\n    if (!args) {\n      args = {};\n    }\n    args.VERSION = app.VERSION;\n    args._method = args._method || 'api';\n    const p = new Promise((resolve, reject) => {\n      return method(url, args).then((a, b, c) => {\n        resolve(a, b, c);\n        if (a.status === 'redirect') {\n          (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_5__.trigger)('onNavLink', a['url-link']);\n        } else {\n          p.then(() => {\n            app.refresh(controller.$container);\n          });\n        }\n      }).catch(reject);\n    });\n    return p;\n  },\n  submitFormAndUpdateView: (controller, form, url, method) => {\n    let formData = new FormData(form);\n    const redirector = a => {\n      if (a['url-link']) {\n        (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_5__.trigger)('onNavLink', a['url-link']);\n      } else {\n        window.location.href = a['url'];\n      }\n    };\n    const p = new Promise((resolve, reject) => {\n      (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.uploadFileFormData)(formData, url || form.action, method || form.method).then((a, b, c) => {\n        resolve(a, b, c);\n        if (a.status === 'redirect') {\n          redirector(a);\n        } else {\n          p.then(() => {\n            app.refresh(controller.$container);\n          });\n        }\n      }).catch((a, b, c) => {\n        if (a.status === 301) {\n          a = a.responseJSON;\n          redirector(a);\n          resolve(a, b, c);\n        } else {\n          reject(a, b, c);\n        }\n      });\n    });\n    return p;\n  },\n  submitForm: (form, url, method) => {\n    let formData = new FormData(form);\n    return new Promise((resolve, reject) => {\n      (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.uploadFileFormData)(formData, url || form.action, method || form.method).then(resolve).catch(reject);\n    });\n  },\n  /**\n   *\n   * @param {jquery} $elem\n   * @return {AbstractSDC}\n   */\n  getController: $elem => (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.getController)($elem),\n  /**\n   * safeEmpty removes all content of a dom\n   * and deletes all child controller safely.\n   *\n   * @param $elem - jQuery DOM container to be emptyed\n   */\n  safeEmpty: $elem => {\n    let $children = $elem.children();\n    $children.each(function (_, element) {\n      let $element = $(element);\n      app.safeRemove($element);\n    });\n    return $elem;\n  },\n  /**\n   * safeReplace removes all content of a dom\n   * and deletes all child controller safely.\n   *\n   * @param $elem - jQuery DOM to be repleaced\n   * @param $new - jQuery new DOM container\n   */\n  safeReplace: ($elem, $new) => {\n    $new.insertBefore($elem);\n    return app.safeRemove($elem);\n  },\n  /**\n   * safeRemove removes a dom and deletes all child controller safely.\n   *\n   * @param $elem - jQuery Dom\n   */\n  safeRemove: $elem => {\n    $elem.each(function () {\n      let $this = $(this);\n      if ($this.data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`)) {\n        $this.data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`).remove();\n      }\n    });\n    $elem.find(`.${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.CONTROLLER_CLASS}`).each(function () {\n      const controller = $(this).data(`${_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY}`);\n      controller && controller.remove();\n    });\n    return $elem.remove();\n  },\n  /**\n   *\n   * @param {AbstractSDC} controller\n   * @return {Promise<jQuery>}\n   */\n  reloadController: controller => {\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.reloadHTMLController)(controller).then(html => {\n      let $html = $(html);\n      controller._childController = {};\n      (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.replaceTagElementsInContainer)(app.tagNames, $html, controller).then(() => {\n        app.safeEmpty(controller.$container);\n        controller.$container.append($html);\n        app.refresh(controller.$container, controller);\n      });\n    });\n  },\n  /**\n   *\n   * @param {jquery} $container\n   * @param {AbstractSDC} leafController\n   * @return {Promise<jQuery>}\n   */\n  refresh: ($container, leafController) => {\n    if (!leafController) {\n      leafController = app.getController($container);\n    }\n    if (!leafController) {\n      return (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.promiseDummyFactory)();\n    }\n    let controller = leafController;\n    let controllerList = [];\n    while (controller) {\n      controller._isEventsSet = false;\n      controllerList.unshift(controller);\n      controller = controller._parentController;\n    }\n    return (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.replaceTagElementsInContainer)(app.tagNames, leafController.$container, leafController).then(() => {\n      (0,_sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.reloadMethodHTML)(leafController).then(() => {\n        for (let con of controllerList) {\n          (0,_sdc_dom_events_js__WEBPACK_IMPORTED_MODULE_4__.setControllerEvents)(con);\n        }\n        leafController.onRefresh($container);\n      });\n    });\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_main.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_params.js":
/*!********************************************!*\
  !*** ./src/simpleDomControl/sdc_params.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUrlParam: () => (/* binding */ getUrlParam),\n/* harmony export */   runOnInitWithParameter: () => (/* binding */ runOnInitWithParameter)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_view.js */ \"./src/simpleDomControl/sdc_view.js\");\n\n\nfunction getParamList(paramNameList, $element) {\n  let returnList;\n  if (!paramNameList) {\n    paramNameList = [];\n  }\n  let data = $element.data();\n  let restdata = {};\n  for (let a in data) {\n    if (data.hasOwnProperty(a) && a !== _sdc_view_js__WEBPACK_IMPORTED_MODULE_1__.DATA_CONTROLLER_KEY && !paramNameList.includes(a)) {\n      restdata[a] = data[a];\n    }\n  }\n  returnList = [];\n  for (let i = 0; i < paramNameList.length; i++) {\n    let data_name = paramNameList[i];\n    if (data.hasOwnProperty(data_name)) {\n      returnList.push(data[data_name]);\n    } else {\n      returnList.push('undefined');\n    }\n  }\n  returnList.push(restdata);\n  return returnList;\n}\nfunction parseParamNameList(list, controller = null) {\n  let values = [];\n  for (let i = 0; i < list.length; i++) {\n    let tempValue = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.checkIfParamNumberBoolOrString)(list[i], controller);\n    values.push(tempValue);\n  }\n  return values;\n}\nfunction getDomTagParamsWithList(paramNameList, $element, controller = null) {\n  let paramList = getParamList(paramNameList, $element);\n  return parseParamNameList(paramList, controller);\n}\n\n/**\n *\n * @param {AbstractSDC} controller\n * @param {jquery} $element\n * @param applyController\n * @returns {boolean}\n */\nfunction reg_runOnInitWithParameter(controller, $element, applyController) {\n  if (!controller) {\n    return false;\n  } else if (typeof controller.onInit !== 'function') {\n    return false;\n  }\n  let paramNameList;\n  if (typeof controller._on_init_params === 'function') {\n    paramNameList = controller._on_init_params();\n  } else {\n    paramNameList = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.getParamsNameOfFunction)(controller.onInit);\n  }\n  let initParams = getDomTagParamsWithList(paramNameList, $element, applyController._parentController);\n  controller.onInit.apply(applyController, initParams);\n  if (applyController === controller) {\n    for (let mixinKey in controller._mixins) {\n      reg_runOnInitWithParameter(controller._mixins[mixinKey], $element, applyController);\n    }\n  }\n}\nfunction runOnInitWithParameter($element, controller) {\n  reg_runOnInitWithParameter(controller, $element, controller);\n}\nfunction getUrlParam(controller, $element) {\n  return getDomTagParamsWithList(controller._urlParams, $element);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQ2pCLGFBQWEsRUFBRUMsUUFBUSxFQUFFbUIsZUFBZSxDQUFDSSxpQkFBaUIsQ0FBQztFQUNwR1YsVUFBVSxDQUFDTyxNQUFNLENBQUNJLEtBQUssQ0FBQ0wsZUFBZSxFQUFFRyxVQUFVLENBQUM7RUFDcEQsSUFBR0gsZUFBZSxLQUFLTixVQUFVLEVBQUU7SUFDL0IsS0FBSyxJQUFJWSxRQUFRLElBQUlaLFVBQVUsQ0FBQ2EsT0FBTyxFQUFFO01BQ3JDUiwwQkFBMEIsQ0FBQ0wsVUFBVSxDQUFDYSxPQUFPLENBQUNELFFBQVEsQ0FBQyxFQUFFekIsUUFBUSxFQUFFbUIsZUFBZSxDQUFDO0lBQ3ZGO0VBQ0o7QUFDSjtBQUVPLFNBQVNRLHNCQUFzQkEsQ0FBQzNCLFFBQVEsRUFBRWEsVUFBVSxFQUFFO0VBQ3pESywwQkFBMEIsQ0FBQ0wsVUFBVSxFQUFFYixRQUFRLEVBQUVhLFVBQVUsQ0FBQztBQUNoRTtBQUVPLFNBQVNlLFdBQVdBLENBQUNmLFVBQVUsRUFBRWIsUUFBUSxFQUFFO0VBQzlDLE9BQU9nQix1QkFBdUIsQ0FBQ0gsVUFBVSxDQUFDZ0IsVUFBVSxFQUFFN0IsUUFBUSxDQUFDO0FBQ25FIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2RjX2NsaWVudC8uL3NyYy9zaW1wbGVEb21Db250cm9sL3NkY19wYXJhbXMuanM/ZTRiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2dldFBhcmFtc05hbWVPZkZ1bmN0aW9uLCBjaGVja0lmUGFyYW1OdW1iZXJCb29sT3JTdHJpbmd9IGZyb20gXCIuL3NkY191dGlscy5qc1wiO1xuaW1wb3J0IHtEQVRBX0NPTlRST0xMRVJfS0VZfSBmcm9tIFwiLi9zZGNfdmlldy5qc1wiO1xuXG5cblxuXG5mdW5jdGlvbiBnZXRQYXJhbUxpc3QocGFyYW1OYW1lTGlzdCwgJGVsZW1lbnQpIHtcbiAgICBsZXQgcmV0dXJuTGlzdDtcbiAgICBpZiAoIXBhcmFtTmFtZUxpc3QpIHtcbiAgICAgICAgcGFyYW1OYW1lTGlzdCA9IFtdO1xuICAgIH1cblxuICAgIGxldCBkYXRhID0gJGVsZW1lbnQuZGF0YSgpO1xuICAgIGxldCByZXN0ZGF0YSA9IHt9O1xuICAgIGZvcihsZXQgYSBpbiBkYXRhKSB7XG4gICAgICAgIGlmKGRhdGEuaGFzT3duUHJvcGVydHkoYSkgJiYgYSAhPT0gREFUQV9DT05UUk9MTEVSX0tFWSAmJiAhcGFyYW1OYW1lTGlzdC5pbmNsdWRlcyhhKSkge1xuICAgICAgICAgICAgcmVzdGRhdGFbYV0gPSBkYXRhW2FdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuTGlzdCA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYW1OYW1lTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgZGF0YV9uYW1lID0gcGFyYW1OYW1lTGlzdFtpXTtcblxuICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShkYXRhX25hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm5MaXN0LnB1c2goZGF0YVtkYXRhX25hbWVdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybkxpc3QucHVzaCgndW5kZWZpbmVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm5MaXN0LnB1c2gocmVzdGRhdGEpXG4gICAgcmV0dXJuIHJldHVybkxpc3Q7XG59XG5cbmZ1bmN0aW9uIHBhcnNlUGFyYW1OYW1lTGlzdChsaXN0LCBjb250cm9sbGVyID0gbnVsbCkge1xuICAgIGxldCB2YWx1ZXMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICBsZXQgdGVtcFZhbHVlID0gY2hlY2tJZlBhcmFtTnVtYmVyQm9vbE9yU3RyaW5nKGxpc3RbaV0sIGNvbnRyb2xsZXIpO1xuICAgICAgICB2YWx1ZXMucHVzaCh0ZW1wVmFsdWUpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59XG5cbmZ1bmN0aW9uIGdldERvbVRhZ1BhcmFtc1dpdGhMaXN0KHBhcmFtTmFtZUxpc3QsICRlbGVtZW50LCBjb250cm9sbGVyPW51bGwpIHtcbiAgICBsZXQgcGFyYW1MaXN0ID0gZ2V0UGFyYW1MaXN0KHBhcmFtTmFtZUxpc3QsICRlbGVtZW50KTtcbiAgICByZXR1cm4gcGFyc2VQYXJhbU5hbWVMaXN0KHBhcmFtTGlzdCwgY29udHJvbGxlcik7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RTREN9IGNvbnRyb2xsZXJcbiAqIEBwYXJhbSB7anF1ZXJ5fSAkZWxlbWVudFxuICogQHBhcmFtIGFwcGx5Q29udHJvbGxlclxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIsICRlbGVtZW50LCBhcHBseUNvbnRyb2xsZXIpIHtcbiAgICBpZiAoIWNvbnRyb2xsZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29udHJvbGxlci5vbkluaXQgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGxldCBwYXJhbU5hbWVMaXN0O1xuICAgIGlmKHR5cGVvZiBjb250cm9sbGVyLl9vbl9pbml0X3BhcmFtcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwYXJhbU5hbWVMaXN0ID0gY29udHJvbGxlci5fb25faW5pdF9wYXJhbXMoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwYXJhbU5hbWVMaXN0ID0gZ2V0UGFyYW1zTmFtZU9mRnVuY3Rpb24oY29udHJvbGxlci5vbkluaXQpO1xuICAgIH1cblxuXG4gICAgbGV0IGluaXRQYXJhbXMgPSBnZXREb21UYWdQYXJhbXNXaXRoTGlzdChwYXJhbU5hbWVMaXN0LCAkZWxlbWVudCwgYXBwbHlDb250cm9sbGVyLl9wYXJlbnRDb250cm9sbGVyKTtcbiAgICBjb250cm9sbGVyLm9uSW5pdC5hcHBseShhcHBseUNvbnRyb2xsZXIsIGluaXRQYXJhbXMpO1xuICAgIGlmKGFwcGx5Q29udHJvbGxlciA9PT0gY29udHJvbGxlcikge1xuICAgICAgICBmb3IgKGxldCBtaXhpbktleSBpbiBjb250cm9sbGVyLl9taXhpbnMpIHtcbiAgICAgICAgICAgIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIuX21peGluc1ttaXhpbktleV0sICRlbGVtZW50LCBhcHBseUNvbnRyb2xsZXIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuT25Jbml0V2l0aFBhcmFtZXRlcigkZWxlbWVudCwgY29udHJvbGxlcikge1xuICAgIHJlZ19ydW5PbkluaXRXaXRoUGFyYW1ldGVyKGNvbnRyb2xsZXIsICRlbGVtZW50LCBjb250cm9sbGVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFVybFBhcmFtKGNvbnRyb2xsZXIsICRlbGVtZW50KSB7XG4gICAgcmV0dXJuIGdldERvbVRhZ1BhcmFtc1dpdGhMaXN0KGNvbnRyb2xsZXIuX3VybFBhcmFtcywgJGVsZW1lbnQpO1xufSJdLCJuYW1lcyI6WyJnZXRQYXJhbXNOYW1lT2ZGdW5jdGlvbiIsImNoZWNrSWZQYXJhbU51bWJlckJvb2xPclN0cmluZyIsIkRBVEFfQ09OVFJPTExFUl9LRVkiLCJnZXRQYXJhbUxpc3QiLCJwYXJhbU5hbWVMaXN0IiwiJGVsZW1lbnQiLCJyZXR1cm5MaXN0IiwiZGF0YSIsInJlc3RkYXRhIiwiYSIsImhhc093blByb3BlcnR5IiwiaW5jbHVkZXMiLCJpIiwibGVuZ3RoIiwiZGF0YV9uYW1lIiwicHVzaCIsInBhcnNlUGFyYW1OYW1lTGlzdCIsImxpc3QiLCJjb250cm9sbGVyIiwidmFsdWVzIiwidGVtcFZhbHVlIiwiZ2V0RG9tVGFnUGFyYW1zV2l0aExpc3QiLCJwYXJhbUxpc3QiLCJyZWdfcnVuT25Jbml0V2l0aFBhcmFtZXRlciIsImFwcGx5Q29udHJvbGxlciIsIm9uSW5pdCIsIl9vbl9pbml0X3BhcmFtcyIsImluaXRQYXJhbXMiLCJfcGFyZW50Q29udHJvbGxlciIsImFwcGx5IiwibWl4aW5LZXkiLCJfbWl4aW5zIiwicnVuT25Jbml0V2l0aFBhcmFtZXRlciIsImdldFVybFBhcmFtIiwiX3VybFBhcmFtcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_params.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_server_call.js":
/*!*************************************************!*\
  !*** ./src/simpleDomControl/sdc_server_call.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callServer: () => (/* binding */ callServer),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   isConnected: () => (/* binding */ isConnected)\n/* harmony export */ });\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n\n\nlet IS_CONNECTED = false;\nlet IS_CONNECTING = false;\nlet SDC_SOCKET = null;\nlet OPEN_REQUESTS = {};\nfunction callServer(app, controller, parsedContentUrl, funcName, args) {\n  if (window.SERVER_CALL_VIA_WEB_SOCKET) {\n    return socketCallServer(app, controller, funcName, args);\n  } else {\n    return postCallServer(parsedContentUrl, funcName, args);\n  }\n}\nfunction isConnected() {\n  if (window.SERVER_CALL_VIA_WEB_SOCKET) {\n    return socketIsConnected();\n  } else {\n    return Promise.resolve(true);\n  }\n}\nfunction close() {\n  if (window.SERVER_CALL_VIA_WEB_SOCKET) {\n    socketClose();\n  }\n}\nfunction postCallServer(parsedContentUrl, funcName, args) {\n  if (typeof args !== 'object' && Array.isArray(args) && args === null) {\n    args = {\n      'arg0': args\n    };\n  }\n  args = {\n    'data': JSON.stringify(args),\n    '_sdc_func_name': funcName,\n    '_method': 'sdc_server_call'\n  };\n  return $.post({\n    url: parsedContentUrl,\n    data: args,\n    beforeSend: function (xhr, settings) {\n      xhr.setRequestHeader(\"X-CSRFToken\", window.CSRF_TOKEN);\n    }\n  }).then(res => {\n    const data = res['_return_data'];\n    _handle_response(data);\n    return data;\n  }).catch(res => {\n    const data = res.responseJSON;\n    data.is_error = true;\n    _handle_response(data);\n    throw res;\n  });\n}\nfunction socketCallServer(app, controller, funcName, args) {\n  let id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_0__.uuidv4)();\n  isConnected().then(() => {\n    SDC_SOCKET.send(JSON.stringify({\n      event: 'sdc_call',\n      id: id,\n      controller: controller,\n      app: app,\n      function: funcName,\n      args: args\n    }));\n  });\n  return new Promise((resolve, reject) => {\n    OPEN_REQUESTS[id] = [resolve, reject];\n  });\n}\nfunction _connect() {\n  IS_CONNECTING = true;\n  return new Promise(resolve => {\n    if (window.location.protocol === \"https:\") {\n      SDC_SOCKET = new WebSocket(`wss://${window.location.host}/sdc_ws/ws/`);\n    } else {\n      SDC_SOCKET = new WebSocket(`ws://${window.location.host}/sdc_ws/ws/`);\n    }\n    SDC_SOCKET.onmessage = function (e) {\n      let data = JSON.parse(e.data);\n      _handle_response(data);\n    };\n    SDC_SOCKET.onclose = function () {\n      if (IS_CONNECTED) {\n        console.error('SDC Socket closed unexpectedly');\n      }\n      IS_CONNECTED = false;\n      for (const [key, value] of Object.entries(OPEN_REQUESTS)) {\n        value[1]({});\n        delete OPEN_REQUESTS[key];\n      }\n      setTimeout(() => {\n        _connect();\n      }, 1000);\n    };\n    SDC_SOCKET.onerror = function (err) {\n      console.error('Socket encountered error: ', err.message, 'Closing socket');\n      if (IS_CONNECTED) {\n        try {\n          SDC_SOCKET.close();\n        } catch (e) {}\n      }\n    };\n    SDC_SOCKET.onopen = function () {\n      IS_CONNECTED = true;\n      IS_CONNECTING = false;\n      resolve();\n    };\n  });\n}\nfunction _handle_response(data) {\n  if (!data) {\n    data = {};\n  }\n  if (data.is_error) {\n    if (data.msg || data.header) {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('pushErrorMsg', data.header || '', data.msg || '');\n    }\n    if (data.id && OPEN_REQUESTS[data.id]) {\n      OPEN_REQUESTS[data.id][1](data.data || null);\n      delete OPEN_REQUESTS[data.id];\n    }\n  } else {\n    if (data.msg || data.header) {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('pushMsg', data.header || '', data.msg || '');\n    }\n    if (data.type && data.type === 'sdc_recall') {\n      if (data.id && OPEN_REQUESTS[data.id]) {\n        OPEN_REQUESTS[data.id][0](data.data);\n        delete OPEN_REQUESTS[data.id];\n      }\n    } else if (data.type && data.type === 'sdc_event') {\n      let event = data.event;\n      if (event) {\n        (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)(event, data.payload);\n      }\n    } else if (data.type && data.type === 'sdc_redirect') {\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('onNavLink', data.link);\n    }\n  }\n}\nfunction socketClose() {\n  if (IS_CONNECTED) {\n    IS_CONNECTED = false;\n    try {\n      SDC_SOCKET.close();\n    } catch (e) {}\n  }\n}\nfunction socketIsConnected() {\n  return new Promise(resolve => {\n    if (IS_CONNECTED) {\n      return resolve();\n    } else if (IS_CONNECTING) {\n      setTimeout(() => {\n        isConnected().then(() => {\n          resolve();\n        });\n      }, 200);\n    } else {\n      return resolve(_connect());\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_server_call.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_socket.js":
/*!********************************************!*\
  !*** ./src/simpleDomControl/sdc_socket.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Model: () => (/* binding */ Model)\n/* harmony export */ });\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n/* harmony import */ var _sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_utils.js */ \"./src/simpleDomControl/sdc_utils.js\");\n\n\n\nconst MAX_FILE_UPLOAD = 25000;\nclass SubModel {\n  constructor(pk, model) {\n    this.pk = pk;\n    this._model = model;\n  }\n\n  /**\n   * SDC Model Name\n   * @param {string} model\n   */\n  set model(model) {\n    this._model = model;\n  }\n  get model() {\n    return this._model;\n  }\n\n  /**\n   * Load the sub model.\n   *\n   * @param {AbstractSDC} controller\n   * @returns {Model}\n   */\n  load(controller) {\n    if (!this._model) {\n      throw new TypeError(\"Model is not set!!\");\n    }\n    return controller.newModel(this._model, {\n      pk: this.pk\n    });\n  }\n}\nconst ModelProxyHandler = {\n  get(target, key) {\n    const value = target[key] ?? undefined;\n    if (value instanceof SubModel) {\n      if (!value.pk && value.pk !== 0) {\n        return null;\n      }\n      const newVal = new Number(value.pk);\n      newVal.load = value.load.bind(value);\n      return newVal;\n    }\n    return value;\n  },\n  set(target, key, value) {\n    if (key in target) {\n      const oldVal = target[key];\n      if (oldVal instanceof SubModel) {\n        if (value.hasOwnProperty('pk')) {\n          oldVal.pk = value.pk;\n        } else {\n          oldVal.pk = value;\n        }\n      } else {\n        target[key] = value;\n      }\n    } else {\n      target[key] = value;\n    }\n    return true;\n  }\n};\nfunction parse_hidden_inputs(value) {\n  let isFloatReg = /^-?\\d+\\.?\\d+$/;\n  let isIntReg = /^-?\\d+$/;\n  let isBoolReg = /^(true|false)$/;\n  let isStringReg = /^(['][^']*['])|([\"][^\"]*[\"])$/;\n  if (value.toLowerCase().match(isBoolReg)) {\n    return value.toLowerCase() === 'true';\n  } else if (value === 'undefined') {\n    return undefined;\n  } else if (value.toLowerCase() === 'none') {\n    return null;\n  } else if (value.match(isIntReg)) {\n    return parseInt(value);\n  } else if (value.match(isFloatReg)) {\n    return parseFloat(value);\n  } else if (value.match(isStringReg)) {\n    return value.substring(1, value.length - 1);\n  }\n  return value;\n}\nclass Model {\n  /**\n   *\n   * @param model_name {string}\n   * @param model_query {json}\n   */\n  constructor(model_name, model_query = {}) {\n    this.values_list = [];\n    this.values = {};\n    this.model_name = model_name;\n    this.model_query = model_query;\n    this._is_connected = false;\n    this._is_conneting_process = false;\n    this._auto_reconnect = true;\n    this.socket = null;\n    this.open_request = {};\n    this.on_update = () => {};\n    this.on_create = () => {};\n    this.form_id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n  }\n  [Symbol.iterator]() {\n    let idx = -1;\n    return {\n      next: () => {\n        ++idx;\n        if (idx < this.values_list.length) {\n          return {\n            value: this.values_list[idx],\n            done: false\n          };\n        }\n        return {\n          value: null,\n          done: true\n        };\n      }\n    };\n  }\n  length() {\n    return this.values_list.length;\n  }\n  byPk(pk) {\n    if (pk !== null) {\n      pk = parseInt(pk);\n      if (isNaN(pk)) {\n        pk = -1;\n      }\n      let elem = this.values_list.find(elm => elm.pk === pk);\n      if (!elem) {\n        elem = new Proxy({\n          pk: pk\n        }, ModelProxyHandler);\n        this.values_list.push(elem);\n      }\n      return elem;\n    }\n    return {\n      pk: pk\n    };\n  }\n  filter(model_query) {\n    this.model_query = Object.assign({}, this.model_query, model_query);\n    return this;\n  }\n  load() {\n    return this.isConnected().then(() => {\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      return new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'load',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query\n          }\n        }));\n        this.open_request[id] = [resolve, reject];\n      });\n    });\n  }\n  listView(filter = {}, cb_resolve = null, cb_reject = null) {\n    let $div_list = $('<div class=\"container-fluid\">');\n    this.isConnected().then(() => {\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      this.socket.send(JSON.stringify({\n        event: 'model',\n        event_type: 'list_view',\n        event_id: id,\n        args: {\n          model_name: this.model_name,\n          model_query: this.model_query,\n          filter: filter\n        }\n      }));\n      this.open_request[id] = [data => {\n        $div_list.append(data.html);\n        _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_list);\n        cb_resolve && cb_resolve(data);\n      }, res => {\n        cb_reject && cb_reject(res);\n      }];\n    });\n    return $div_list;\n  }\n  detailView(pk = -1, cb_resolve = null, cb_reject = null) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    let $div_list = $('<div class=\"container-fluid\">');\n    let load_promise;\n    if (this.values_list.length !== 0) {\n      load_promise = this.isConnected();\n    } else {\n      load_promise = this.load();\n    }\n    load_promise.then(() => {\n      if (pk === -1) {\n        pk = this.values_list[0].pk;\n      }\n      const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n      this.socket.send(JSON.stringify({\n        event: 'model',\n        event_type: 'detail_view',\n        event_id: id,\n        args: {\n          model_name: this.model_name,\n          model_query: this.model_query,\n          pk: pk\n        }\n      }));\n      this.open_request[id] = [data => {\n        $div_list.append(data.html);\n        _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_list);\n        cb_resolve && cb_resolve(data);\n      }, res => {\n        cb_reject && cb_reject(res);\n      }];\n    });\n    return $div_list;\n  }\n  syncFormToModel($forms) {\n    return this.syncForm($forms);\n  }\n  syncModelToForm($forms) {\n    if (!$forms || !$forms.hasClass(this.form_id)) {\n      $forms = $(`.${this.form_id}`);\n    }\n    let self = this;\n    $forms.each(function () {\n      if (!this.hasAttribute('data-model_pk')) {\n        return;\n      }\n      let pk = $(this).data('model_pk');\n      let instance = self.byPk(pk);\n      for (let form_item of this.elements) {\n        let name = form_item.name;\n        if (name && name !== '') {\n          if (form_item.type === 'checkbox') {\n            form_item.checked = instance[name];\n          } else if (form_item.type === 'file' && instance[name] instanceof File) {\n            let container = new DataTransfer();\n            container.items.add(instance[name]);\n            form_item.files = container;\n          } else {\n            $(form_item).val(instance[name]);\n          }\n        }\n      }\n    });\n  }\n  syncForm($forms) {\n    if (!$forms || !$forms.hasClass(this.form_id)) {\n      $forms = $(`.${this.form_id}`);\n    }\n    const self = this;\n    let instances = [];\n    $forms.each(function () {\n      let $form = $(this);\n      let pk = $form.data('model_pk');\n      let instance = self.byPk(pk);\n      for (let form_item of this.elements) {\n        let name = form_item.name;\n        if (name && name !== '') {\n          if (form_item.type === 'hidden') {\n            instance[name] = parse_hidden_inputs($(form_item).val());\n          } else if (form_item.type === 'checkbox') {\n            instance[name] = form_item.checked;\n          } else if (form_item.type === 'file') {\n            instance[name] = form_item.files[0];\n          } else {\n            instance[name] = $(form_item).val();\n          }\n        }\n      }\n      instances.push(instance);\n      return instance;\n    });\n    if (this.values_list.length <= 1 && instances.length > 0) {\n      this.values = instances.at(-1);\n    }\n    return instances;\n  }\n  createForm(cb_resolve = null, cb_reject = null) {\n    let $div_form = $('<div class=\"container-fluid\">');\n    this.isConnected().then(() => {\n      this._getForm(null, 'create_form', null, $div_form, cb_resolve, cb_reject);\n    });\n    return $div_form;\n  }\n  editForm(pk = -1, cb_resolve = null, cb_reject = null) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    let load_promise;\n    if (this.values_list.length !== 0) {\n      load_promise = this.isConnected();\n    } else {\n      load_promise = this.load();\n    }\n    let $div_form = $('<div  class=\"container-fluid\">');\n    load_promise.then(() => {\n      if (pk <= -1) {\n        pk = this.values_list.at(pk).pk;\n      }\n      this._getForm(pk, 'edit_form', null, $div_form, cb_resolve, cb_reject);\n    });\n    return $div_form;\n  }\n  namedForm(pk = -1, formName, cb_resolve = null, cb_reject = null) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    let load_promise;\n    if (this.values_list.length !== 0) {\n      load_promise = this.isConnected();\n    } else {\n      load_promise = this.load();\n    }\n    let $div_form = $('<div  class=\"container-fluid\">');\n    load_promise.then(() => {\n      if (pk <= -1) {\n        pk = this.values_list.at(pk).pk;\n      }\n      this._getForm(pk, 'named_form', formName, $div_form, cb_resolve, cb_reject);\n    });\n    return $div_form;\n  }\n  _getForm(pk, event_type, formName, $div_form, cb_resolve, cb_reject) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    this.socket.send(JSON.stringify({\n      event: 'model',\n      event_type: event_type,\n      event_id: id,\n      args: {\n        model_name: this.model_name,\n        model_query: this.model_query,\n        pk: pk,\n        form_name: formName\n      }\n    }));\n    const className = pk === null || pk === -1 ? 'create' : 'edit';\n    this.open_request[id] = [data => {\n      $div_form.append(data.html);\n      let $form = $div_form.closest('form').addClass(`sdc-model-${className}-form sdc-model-form ${this.form_id}`).data('model', this).data('model_pk', pk);\n      if ($form.length > 0 && !$form[0].hasAttribute('sdc_submit')) {\n        $form.attr('sdc_submit', 'submitModelFormDistributor');\n      }\n      _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.refresh($div_form);\n      cb_resolve && cb_resolve(data);\n    }, res => {\n      cb_reject && cb_reject(res);\n    }];\n  }\n  new() {\n    return new Promise((resolve, reject) => {\n      const $form = $('<form>').append(this.createForm(() => {\n        this.syncFormToModel($form);\n        resolve();\n      }, reject));\n    });\n  }\n  save(pk = -1) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    return this.isConnected().then(() => {\n      let elem_list;\n      if (pk > -1) {\n        elem_list = [this.byPk(pk)];\n      } else {\n        elem_list = this.values_list;\n      }\n      let p_list = [];\n      elem_list.forEach(elem => {\n        const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n        p_list.push(new Promise((resolve, reject) => {\n          this._readFiles(elem).then(files => {\n            this.socket.send(JSON.stringify({\n              event: 'model',\n              event_type: 'save',\n              event_id: id,\n              args: {\n                model_name: this.model_name,\n                model_query: this.model_query,\n                data: elem,\n                files: files\n              }\n            }));\n            this.open_request[id] = [res => {\n              let data = typeof res.data.instance === 'string' ? JSON.parse(res.data.instance) : res.data.instance;\n              res.data.instance = this._parseServerRes(data);\n              resolve(res);\n            }, reject];\n          });\n        }));\n      });\n      return Promise.all(p_list);\n    });\n  }\n  create(values = this.values) {\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return this.isConnected().then(() => {\n      return new Promise((resolve, reject) => {\n        this._readFiles(values).then(files => {\n          this.socket.send(JSON.stringify({\n            event: 'model',\n            event_type: 'create',\n            event_id: id,\n            args: {\n              model_name: this.model_name,\n              model_query: this.model_query,\n              data: values,\n              files: files\n            }\n          }));\n          this.open_request[id] = [res => {\n            let data = typeof res.data.instance === 'string' ? JSON.parse(res.data.instance) : res.data.instance;\n            res.data.instance = this._parseServerRes(data)[0];\n            resolve(res);\n          }, reject];\n        });\n      });\n    });\n  }\n  delete(pk = -1) {\n    pk = parseInt(pk);\n    if (isNaN(pk)) {\n      pk = -1;\n    }\n    if (pk === -1) pk = this.values?.pk;\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return this.isConnected().then(() => {\n      return new Promise((resolve, reject) => {\n        this.socket.send(JSON.stringify({\n          event: 'model',\n          event_type: 'delete',\n          event_id: id,\n          args: {\n            model_name: this.model_name,\n            model_query: this.model_query,\n            pk: pk\n          }\n        }));\n        this.open_request[id] = [resolve, reject];\n      });\n    });\n  }\n  isConnected() {\n    return new Promise((resolve, reject) => {\n      if (this._is_connected) {\n        resolve();\n      } else if (!this._is_conneting_process) {\n        this._is_conneting_process = true;\n        this.open_request['_connecting_process'] = [() => {}, () => {}];\n        this._connectToServer().then(() => {\n          resolve(this._checkConnection());\n        });\n      } else {\n        const [resolve_origin, reject_origin] = this.open_request['_connecting_process'];\n        this.open_request['_connecting_process'] = [() => {\n          resolve_origin();\n          resolve();\n        }, () => {\n          reject_origin();\n          reject();\n        }];\n      }\n    });\n  }\n  close() {\n    if (this.socket) {\n      this._auto_reconnect = false;\n      this.socket.onclose = () => {};\n      this.socket.close();\n      delete this['socket'];\n    }\n  }\n  clean() {\n    this.values_list = [];\n    this.values = {};\n    return this;\n  }\n  _readFiles(elem) {\n    let to_solve = [];\n    let files = {};\n    for (const [key, value] of Object.entries(elem)) {\n      if (value instanceof File) {\n        to_solve.push(new Promise((resolve, reject) => {\n          ((key, value) => {\n            let reader = new FileReader();\n            reader.onload = e => {\n              const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n              this.open_request[id] = [resolve, reject];\n              let result = e.target.result;\n              let number_of_chunks = parseInt(Math.ceil(result.length / MAX_FILE_UPLOAD));\n              files[key] = {\n                id: id,\n                file_name: value.name,\n                field_name: key,\n                content_length: value.size\n              };\n              for (let i = 0; i < number_of_chunks; ++i) {\n                this.socket.send(JSON.stringify({\n                  event: 'model',\n                  event_type: 'upload',\n                  event_id: id,\n                  args: {\n                    chunk: result.slice(MAX_FILE_UPLOAD * i, MAX_FILE_UPLOAD * (i + 1)),\n                    idx: i,\n                    number_of_chunks: number_of_chunks,\n                    file_name: value.name,\n                    field_name: key,\n                    content_length: value.size,\n                    content_type: value.type,\n                    model_name: this.model_name,\n                    model_query: this.model_query\n                  }\n                }));\n              }\n            };\n            reader.onerror = () => {\n              reject();\n            };\n            reader.readAsBinaryString(value);\n          })(key, value);\n        }));\n      }\n    }\n    return Promise.all(to_solve).then(() => {\n      return files;\n    });\n  }\n  _onMessage(e) {\n    let data = JSON.parse(e.data);\n    if (data.is_error) {\n      if (this.open_request.hasOwnProperty(data.event_id)) {\n        this.open_request[data.event_id][1](data);\n        delete this.open_request[data.event_id];\n      }\n      if (data.msg || data.header) {\n        (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('pushErrorMsg', data.header || '', data.msg || '');\n      }\n      if (data.type === 'connect') {\n        this.open_request['_connecting_process'][1](data);\n        delete this.open_request['_connecting_process'];\n        this._auto_reconnect = false;\n        this.socket.close();\n      }\n    } else {\n      if (data.msg || data.header) {\n        (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_1__.trigger)('pushMsg', data.header || '', data.msg || '');\n      }\n      if (data.type === 'connect') {\n        this._is_connected = true;\n        this._is_conneting_process = false;\n        this.open_request['_connecting_process'][0](data);\n        delete this.open_request['_connecting_process'];\n      } else if (data.type === 'load') {\n        const json_res = JSON.parse(data.args.data);\n        this.values_list = [];\n        data.args.data = this._parseServerRes(json_res);\n      } else if (data.type === 'on_update' || data.type === 'on_create') {\n        const json_res = JSON.parse(data.args.data);\n        let obj = this._parseServerRes(json_res);\n        let cb;\n        if (data.type === 'on_create') {\n          cb = this.on_create;\n        } else {\n          cb = this.on_update;\n        }\n        cb(obj);\n        data.args.data = obj;\n      }\n      let instance = data.data?.instance;\n      if (instance) {\n        data.data.instance = JSON.parse(data.data.instance);\n      }\n      if (this.open_request.hasOwnProperty(data.event_id)) {\n        this.open_request[data.event_id][0](data);\n        delete this.open_request[data.event_id];\n      }\n    }\n  }\n  _connectToServer() {\n    return new Promise(resolve => {\n      const model_identifier = `${this.model_name}` + (this.model_id > 0 ? `/${this.model_id}` : '');\n      if (window.location.protocol === \"https:\") {\n        this.socket = new WebSocket(`wss://${window.location.host}/sdc_ws/model/${model_identifier}`);\n      } else {\n        this.socket = new WebSocket(`ws://${window.location.host}/sdc_ws/model/${model_identifier}`);\n      }\n      this.socket.onmessage = this._onMessage.bind(this);\n      this.socket.onclose = e => {\n        console.error(`SDC Model (${this.model_name}, ${this.model_id}) Socket closed unexpectedly`);\n        this._is_connected = false;\n        for (const [_key, value] of Object.entries(this.open_request)) {\n          value[1](e);\n        }\n        this.open_request = {};\n        setTimeout(() => {\n          if (this._auto_reconnect) {\n            this._connectToServer().then(() => {});\n          }\n        }, 1000);\n      };\n      this.socket.onerror = err => {\n        console.error(`Model Socket encountered error: ${err} Closing socket`);\n        if (this._is_connected) {\n          try {\n            this.socket.close();\n          } catch (e) {}\n        }\n      };\n      this.socket.onopen = () => {\n        resolve();\n      };\n    });\n  }\n  _checkConnection() {\n    const id = (0,_sdc_utils_js__WEBPACK_IMPORTED_MODULE_2__.uuidv4)();\n    return new Promise((resolve, reject) => {\n      this.socket.send(JSON.stringify({\n        event: 'model',\n        event_type: 'connect',\n        event_id: id,\n        args: {\n          model_name: this.model_name,\n          model_query: this.model_query\n        }\n      }));\n      this.open_request[id] = [resolve, reject];\n    });\n  }\n  _parseServerRes(res) {\n    let updated = [];\n    for (let json_data of res) {\n      const pk = json_data.pk;\n      const obj = this.byPk(pk);\n      for (const [k, v] of Object.entries(json_data.fields)) {\n        if (v && typeof v === 'object' && v['__is_sdc_model__']) {\n          obj[k] = new SubModel(v['pk'], v['model']);\n        } else {\n          obj[k] = v;\n        }\n      }\n      updated.push(obj);\n    }\n    if (this.values_list.length === 1) {\n      this.values = this.values_list.at(-1);\n    } else {\n      this.values = {};\n    }\n    return updated;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_socket.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_test_utils.js":
/*!************************************************!*\
  !*** ./src/simpleDomControl/sdc_test_utils.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getCsrfToken: () => (/* binding */ getCsrfToken),\n/* harmony export */   get_controller: () => (/* binding */ get_controller)\n/* harmony export */ });\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/**\n * @jest-environment jsdom\n */\n\n\nlet spy, _originAjax;\nfunction getCookie(name) {\n  let cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    const cookies = document.cookie.split(';');\n    for (let i = 0; i < cookies.length; i++) {\n      const cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === name + '=') {\n        return decodeURIComponent(cookie.substring(name.length + 1));\n      }\n    }\n  }\n  return '';\n}\n\n/**\n * Returns the CSRF token\n */\nfunction getCsrfToken() {\n  return getCookie('csrftoken');\n}\n\n/**\n * Returns a controller. This controller has been created by the using the normal SDC life cycle.\n *\n * @param tag_name{string} Controller tag name (snake-case)\n * @param init_arguments{object} object: Mockeds the tag data arguments.\n * @param origen_html{string} HTML: Mocked content of the content in your target HTML container.\n * @returns {Promise<{AbstractSDC}>}\n */\nasync function get_controller(tag_name, init_arguments = {}, origen_html = '') {\n  if (!jest) throw new Error(\"JEST is not defined\");\n  if (!spy) {\n    _originAjax = $.ajax.bind($);\n    spy = jest.spyOn($, 'ajax');\n    spy.mockImplementation(function (a) {\n      return _originAjax(a).then(html => {\n        return html;\n      }).catch(html => {\n        return html;\n      });\n    });\n  }\n  const $body = $('body');\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.updateJquery();\n  $body.safeEmpty();\n  const $controller = $(`<${tag_name}>${origen_html}</${tag_name}>`);\n  for (const [key, value] of Object.entries(init_arguments)) {\n    $controller.data(key, value);\n  }\n  const $divContainer = $('<div></div>').append($controller);\n  $body.append($divContainer);\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app._isInit = false;\n  _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.cleanCache();\n  await _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.init_sdc();\n  return _sdc_main_js__WEBPACK_IMPORTED_MODULE_0__.app.getController($controller);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUcsS0FBSztFQUNuQjFDLDZDQUFHLENBQUMyQyxVQUFVLENBQUMsQ0FBQztFQUNoQixNQUFNM0MsNkNBQUcsQ0FBQzRDLFFBQVEsQ0FBQyxDQUFDO0VBQ3BCLE9BQU81Qyw2Q0FBRyxDQUFDNkMsYUFBYSxDQUFDWCxXQUFXLENBQUM7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9zZGNfY2xpZW50Ly4vc3JjL3NpbXBsZURvbUNvbnRyb2wvc2RjX3Rlc3RfdXRpbHMuanM/YTQzOSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBqZXN0LWVudmlyb25tZW50IGpzZG9tXG4gKi9cblxuaW1wb3J0IHthcHB9IGZyb20gJy4vc2RjX21haW4uanMnO1xubGV0IHNweSwgX29yaWdpbkFqYXg7XG5cbmZ1bmN0aW9uIGdldENvb2tpZShuYW1lKSB7XG4gICAgbGV0IGNvb2tpZVZhbHVlID0gbnVsbDtcbiAgICBpZiAoZG9jdW1lbnQuY29va2llICYmIGRvY3VtZW50LmNvb2tpZSAhPT0gJycpIHtcbiAgICAgICAgY29uc3QgY29va2llcyA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb2tpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvb2tpZSA9IGNvb2tpZXNbaV0udHJpbSgpO1xuICAgICAgICAgICAgLy8gRG9lcyB0aGlzIGNvb2tpZSBzdHJpbmcgYmVnaW4gd2l0aCB0aGUgbmFtZSB3ZSB3YW50P1xuICAgICAgICAgICAgaWYgKGNvb2tpZS5zdWJzdHJpbmcoMCwgbmFtZS5sZW5ndGggKyAxKSA9PT0gKG5hbWUgKyAnPScpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChjb29raWUuc3Vic3RyaW5nKG5hbWUubGVuZ3RoICsgMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAnJztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBDU1JGIHRva2VuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDc3JmVG9rZW4oKSB7XG4gICAgcmV0dXJuIGdldENvb2tpZSgnY3NyZnRva2VuJyk7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGNvbnRyb2xsZXIuIFRoaXMgY29udHJvbGxlciBoYXMgYmVlbiBjcmVhdGVkIGJ5IHRoZSB1c2luZyB0aGUgbm9ybWFsIFNEQyBsaWZlIGN5Y2xlLlxuICpcbiAqIEBwYXJhbSB0YWdfbmFtZXtzdHJpbmd9IENvbnRyb2xsZXIgdGFnIG5hbWUgKHNuYWtlLWNhc2UpXG4gKiBAcGFyYW0gaW5pdF9hcmd1bWVudHN7b2JqZWN0fSBvYmplY3Q6IE1vY2tlZHMgdGhlIHRhZyBkYXRhIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSBvcmlnZW5faHRtbHtzdHJpbmd9IEhUTUw6IE1vY2tlZCBjb250ZW50IG9mIHRoZSBjb250ZW50IGluIHlvdXIgdGFyZ2V0IEhUTUwgY29udGFpbmVyLlxuICogQHJldHVybnMge1Byb21pc2U8e0Fic3RyYWN0U0RDfT59XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRfY29udHJvbGxlciggdGFnX25hbWUsIGluaXRfYXJndW1lbnRzID0ge30sIG9yaWdlbl9odG1sID0gJycpIHtcbiAgICBpZighamVzdCkgdGhyb3cgbmV3IEVycm9yKFwiSkVTVCBpcyBub3QgZGVmaW5lZFwiKTtcbiAgICBpZighc3B5KSB7XG4gICAgICAgIF9vcmlnaW5BamF4ID0gJC5hamF4LmJpbmQoJCk7XG5cbiAgICAgICAgc3B5ID0gamVzdC5zcHlPbihcbiAgICAgICAgICAgICQsXG4gICAgICAgICAgICAnYWpheCdcbiAgICAgICAgKTtcbiAgICAgICAgc3B5Lm1vY2tJbXBsZW1lbnRhdGlvbihmdW5jdGlvbiAoYSkge1xuICAgICAgICAgICAgcmV0dXJuIF9vcmlnaW5BamF4KGEpLnRoZW4oKGh0bWwpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaHRtbDtcbiAgICAgICAgICAgIH0pLmNhdGNoKChodG1sKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGh0bWw7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0ICRib2R5ID0gJCgnYm9keScpO1xuICAgIGFwcC51cGRhdGVKcXVlcnkoKTtcblxuICAgICRib2R5LnNhZmVFbXB0eSgpO1xuXG4gICAgY29uc3QgJGNvbnRyb2xsZXIgPSAkKGA8JHt0YWdfbmFtZX0+JHtvcmlnZW5faHRtbH08LyR7dGFnX25hbWV9PmApO1xuICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGluaXRfYXJndW1lbnRzKSkge1xuICAgICAgICAkY29udHJvbGxlci5kYXRhKGtleSwgdmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCAkZGl2Q29udGFpbmVyID0gJCgnPGRpdj48L2Rpdj4nKS5hcHBlbmQoJGNvbnRyb2xsZXIpO1xuXG4gICAgJGJvZHkuYXBwZW5kKCRkaXZDb250YWluZXIpO1xuICAgIGFwcC5faXNJbml0ID0gZmFsc2U7XG4gICAgYXBwLmNsZWFuQ2FjaGUoKTtcbiAgICBhd2FpdCBhcHAuaW5pdF9zZGMoKTtcbiAgICByZXR1cm4gYXBwLmdldENvbnRyb2xsZXIoJGNvbnRyb2xsZXIpO1xufSJdLCJuYW1lcyI6WyJhcHAiLCJzcHkiLCJfb3JpZ2luQWpheCIsImdldENvb2tpZSIsIm5hbWUiLCJjb29raWVWYWx1ZSIsImRvY3VtZW50IiwiY29va2llIiwiY29va2llcyIsInNwbGl0IiwiaSIsImxlbmd0aCIsInRyaW0iLCJzdWJzdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJnZXRDc3JmVG9rZW4iLCJnZXRfY29udHJvbGxlciIsInRhZ19uYW1lIiwiaW5pdF9hcmd1bWVudHMiLCJvcmlnZW5faHRtbCIsImplc3QiLCJFcnJvciIsIiQiLCJhamF4IiwiYmluZCIsInNweU9uIiwibW9ja0ltcGxlbWVudGF0aW9uIiwiYSIsInRoZW4iLCJodG1sIiwiY2F0Y2giLCIkYm9keSIsInVwZGF0ZUpxdWVyeSIsInNhZmVFbXB0eSIsIiRjb250cm9sbGVyIiwia2V5IiwidmFsdWUiLCJPYmplY3QiLCJlbnRyaWVzIiwiZGF0YSIsIiRkaXZDb250YWluZXIiLCJhcHBlbmQiLCJfaXNJbml0IiwiY2xlYW5DYWNoZSIsImluaXRfc2RjIiwiZ2V0Q29udHJvbGxlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_test_utils.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_utils.js":
/*!*******************************************!*\
  !*** ./src/simpleDomControl/sdc_utils.js ***!
  \*******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   agileAggregation: () => (/* binding */ agileAggregation),\n/* harmony export */   camelCaseToTagName: () => (/* binding */ camelCaseToTagName),\n/* harmony export */   checkIfParamNumberBoolOrString: () => (/* binding */ checkIfParamNumberBoolOrString),\n/* harmony export */   clearErrorsInForm: () => (/* binding */ clearErrorsInForm),\n/* harmony export */   getBody: () => (/* binding */ getBody),\n/* harmony export */   getParamsNameOfFunction: () => (/* binding */ getParamsNameOfFunction),\n/* harmony export */   promiseDummyFactory: () => (/* binding */ promiseDummyFactory),\n/* harmony export */   setErrorsInForm: () => (/* binding */ setErrorsInForm),\n/* harmony export */   tagNameToCamelCase: () => (/* binding */ tagNameToCamelCase),\n/* harmony export */   tagNameToReadableName: () => (/* binding */ tagNameToReadableName),\n/* harmony export */   uploadFileFormData: () => (/* binding */ uploadFileFormData),\n/* harmony export */   uuidv4: () => (/* binding */ uuidv4)\n/* harmony export */ });\n/**\n * Reference to the HTML body.\n * @type {*|jQuery|HTMLElement}\n * @private\n */\nlet _$body;\nconst arg_names_reg = /([^\\s,]+)/g;\nconst commend_reg = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/mg;\n\n/**\n * getBody returns the $body jQuery object.\n *\n * @returns {*|jQuery|HTMLElement} - body reference.\n */\nfunction getBody() {\n  if (!_$body) {\n    _$body = $('body');\n  }\n  return _$body;\n}\n\n/**\n *\n * @param {function} func\n * @returns {RegExpMatchArray|*[]}\n */\nfunction getParamsNameOfFunction(func) {\n  var fnstr = func.toString().replace(commend_reg, '');\n  var result = fnstr.slice(fnstr.indexOf('(') + 1, fnstr.indexOf(')')).match(arg_names_reg);\n  if (!result) {\n    return [];\n  }\n  return result;\n}\n\n/**\n * promiseDummyFactory generates a simple promise which returns instantly.\n * @return {Promise} window.utils\n */\nfunction promiseDummyFactory() {\n  return new Promise(function (resolve) {\n    resolve();\n  });\n}\nfunction camelCaseToTagName(str) {\n  str = str.replace(/[A-Z]/g, letter => `-${letter.toLowerCase()}`);\n  str = str.replace(/[0-9]+/g, number => `-${number}`);\n  return str.replace(/^[-]/g, ``);\n}\nfunction tagNameToCamelCase(str) {\n  str = str.replace(/-./g, letter => `${letter[1].toUpperCase()}`);\n  return str;\n}\nfunction tagNameToReadableName(str) {\n  str = str.replace(/-./g, letter => ` ${letter[1].toUpperCase()}`).replace(/^./g, letter => `${letter.toUpperCase()}`);\n  return str;\n}\nconst copyProps = (targetClass, sourceClass) => {\n  let source = sourceClass;\n  let propNamesTarget = Object.getOwnPropertyNames(targetClass.prototype).concat(Object.getOwnPropertySymbols(targetClass.prototype));\n  while (source.name !== '') {\n    Object.getOwnPropertyNames(source.prototype).concat(Object.getOwnPropertySymbols(source.prototype)).forEach(prop => {\n      if (prop.match(/^(?:constructor|prototype|arguments|caller|name|bind|call|apply|toString|length)$/)) {\n        return;\n      }\n      if (!propNamesTarget.includes(prop)) {\n        propNamesTarget.push(prop);\n        Object.defineProperty(targetClass.prototype, prop, Object.getOwnPropertyDescriptor(source.prototype, prop));\n      }\n    });\n    source = Object.getPrototypeOf(source);\n  }\n};\n\n/**\n *\n * @param {AbstractSDC} baseClass\n * @param {AbstractSDC} mixins\n * @returns {AbstractSDC}\n */\nfunction agileAggregation(baseClass, ...mixins) {\n  let base = class _Combined {\n    constructor(..._args) {\n      let _mixins = {};\n      mixins.forEach(mixin => {\n        let newMixin;\n        Object.assign(this, newMixin = new mixin());\n        newMixin._tagName = mixin.prototype._tagName;\n        newMixin._isMixin = true;\n        _mixins[mixin.name] = newMixin;\n      });\n      Object.assign(this, new baseClass());\n      this._mixins = _mixins;\n    }\n    get mixins() {\n      return this._mixins;\n    }\n  };\n  copyProps(base, baseClass);\n  mixins.forEach(mixin => {\n    copyProps(base, mixin);\n  });\n  return base;\n}\nfunction csrfSafeMethod(method) {\n  // these HTTP methods do not require CSRF protection\n  return /^(GET|HEAD|OPTIONS|TRACE)$/.test(method);\n}\nfunction uploadFileFormData(formData, url, method) {\n  return $.ajax({\n    url: url,\n    //Server script to process data\n    type: method || 'POST',\n    xhr: function () {\n      // Custom XMLHttpRequest\n      var myXhr = $.ajaxSettings.xhr();\n      if (myXhr.upload) {\n        // Check if upload property exists\n        myXhr.upload.addEventListener('progress', progressHandlingFunction, false); // For handling the progress of the upload\n      }\n      return myXhr;\n    },\n    //Form data\n    data: formData,\n    //Options to tell jQuery not to process data or worry about content-type.\n    cache: false,\n    contentType: false,\n    processData: false,\n    beforeSend: function (xhr, settings) {\n      if (!csrfSafeMethod(settings.type) && !this.crossDomain) {\n        xhr.setRequestHeader(\"X-CSRFToken\", window.CSRF_TOKEN);\n      }\n    }\n  });\n}\nfunction progressHandlingFunction(e) {\n  if (e.lengthComputable) {\n    var percentVal = Math.round(e.loaded / e.total * 100);\n    var $progressContainer = $('.progress-container');\n    if (percentVal === 100) {\n      $progressContainer.hide();\n    } else {\n      $progressContainer.show();\n    }\n    percentVal += '%';\n    $progressContainer.find('.progress-bar').css({\n      'width': percentVal\n    }).text(percentVal);\n  }\n}\nfunction checkIfParamNumberBoolOrString(paramElement, controller = null) {\n  if (typeof paramElement !== 'string') {\n    return paramElement;\n  }\n  if (controller && typeof controller[paramElement] !== 'undefined') {\n    if (typeof controller[paramElement] === 'function') {\n      return controller[paramElement].bind(controller);\n    }\n    return controller[paramElement];\n  }\n  let isFloatReg = /^-?\\d+\\.?\\d+$/;\n  let isIntReg = /^-?\\d+$/;\n  let isBoolReg = /^(true|false)$/;\n  let isStringReg = /^(['][^']*['])|([\"][^\"]*[\"])$/;\n  if (paramElement.match(isBoolReg)) {\n    return paramElement === 'true';\n  } else if (paramElement === 'undefined') {\n    return undefined;\n  } else if (paramElement.toLowerCase() === 'none') {\n    return null;\n  } else if (paramElement.match(isIntReg)) {\n    return parseInt(paramElement);\n  } else if (paramElement.match(isFloatReg)) {\n    return parseFloat(paramElement);\n  } else if (paramElement.match(isStringReg)) {\n    return paramElement.substr(1, paramElement.length - 2);\n  }\n  return paramElement;\n}\nfunction uuidv4() {\n  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));\n}\nfunction clearErrorsInForm($form) {\n  $form.find('.has-error').removeClass('has-error').find('.alert-danger').remove();\n  $form.find('.non-field-errors').remove();\n}\nfunction setErrorsInForm($form, $resForm) {\n  $resForm = $('<div>').append($resForm);\n  $form.find('.has-error').removeClass('has-error').find('.alert-danger').safeRemove();\n  $form.find('.non-field-errors').safeRemove();\n  let $file_container = $resForm.find('input[type=file]').parent();\n  $form.find('input[type=file]').parent().each(function (index) {\n    $(this).replaceWith($file_container[index]);\n  });\n  let hasNoError = $resForm.find('.non-field-errors').insertAfter($form.find('.hidden-form-fields')).length === 0;\n  $resForm.find('.has-error').each(function () {\n    hasNoError = false;\n    let $resErrorField = $(this);\n    let className = $resErrorField.data('auto-id');\n    let $errorField = $form.find('.form-group.' + className);\n    $errorField.addClass('has-error');\n    $errorField.find('.form-input-container').append($resErrorField.find('.alert-danger'));\n  });\n  return hasNoError;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q0FBQyxDQUFDOEIsTUFBTSxDQUFDLENBQUM7RUFDaEVSLEtBQUssQ0FBQ3RCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOEIsTUFBTSxDQUFDLENBQUMsQ0FBQ0MsSUFBSSxDQUFDLFVBQVVDLEtBQUssRUFBRTtJQUMxRHRILENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQ3VILFdBQVcsQ0FBQ0osZUFBZSxDQUFDRyxLQUFLLENBQUMsQ0FBQztFQUMvQyxDQUFDLENBQUM7RUFFRixJQUFJRSxVQUFVLEdBQUdSLFFBQVEsQ0FBQzFCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDbUMsV0FBVyxDQUFDYixLQUFLLENBQUN0QixJQUFJLENBQUMscUJBQXFCLENBQUMsQ0FBQyxDQUFDZSxNQUFNLEtBQUssQ0FBQztFQUMvR1csUUFBUSxDQUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDK0IsSUFBSSxDQUFDLFlBQVk7SUFDekNHLFVBQVUsR0FBRyxLQUFLO0lBQ2xCLElBQUlFLGNBQWMsR0FBRzFILENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDNUIsSUFBSTJILFNBQVMsR0FBR0QsY0FBYyxDQUFDeEQsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUM5QyxJQUFJMEQsV0FBVyxHQUFHaEIsS0FBSyxDQUFDdEIsSUFBSSxDQUFDLGNBQWMsR0FBR3FDLFNBQVMsQ0FBQztJQUN4REMsV0FBVyxDQUFDQyxRQUFRLENBQUMsV0FBVyxDQUFDO0lBQ2pDRCxXQUFXLENBQUN0QyxJQUFJLENBQUMsdUJBQXVCLENBQUMsQ0FBQzJCLE1BQU0sQ0FBQ1MsY0FBYyxDQUFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0VBQzFGLENBQUMsQ0FBQztFQUVGLE9BQU9rQyxVQUFVO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2RjX2NsaWVudC8uL3NyYy9zaW1wbGVEb21Db250cm9sL3NkY191dGlscy5qcz9kMGUzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUmVmZXJlbmNlIHRvIHRoZSBIVE1MIGJvZHkuXG4gKiBAdHlwZSB7KnxqUXVlcnl8SFRNTEVsZW1lbnR9XG4gKiBAcHJpdmF0ZVxuICovXG5sZXQgXyRib2R5O1xuY29uc3QgYXJnX25hbWVzX3JlZyA9IC8oW15cXHMsXSspL2c7XG5jb25zdCBjb21tZW5kX3JlZyA9IC8oKFxcL1xcLy4qJCl8KFxcL1xcKltcXHNcXFNdKj9cXCpcXC8pKS9tZztcblxuLyoqXG4gKiBnZXRCb2R5IHJldHVybnMgdGhlICRib2R5IGpRdWVyeSBvYmplY3QuXG4gKlxuICogQHJldHVybnMgeyp8alF1ZXJ5fEhUTUxFbGVtZW50fSAtIGJvZHkgcmVmZXJlbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qm9keSgpIHtcbiAgICBpZiAoIV8kYm9keSkge1xuICAgICAgICBfJGJvZHkgPSAkKCdib2R5Jyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF8kYm9keTtcbn1cblxuXG4vKipcbiAqXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBmdW5jXG4gKiBAcmV0dXJucyB7UmVnRXhwTWF0Y2hBcnJheXwqW119XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRQYXJhbXNOYW1lT2ZGdW5jdGlvbihmdW5jKSB7XG4gICAgdmFyIGZuc3RyID0gZnVuYy50b1N0cmluZygpLnJlcGxhY2UoY29tbWVuZF9yZWcsICcnKTtcbiAgICB2YXIgcmVzdWx0ID0gZm5zdHIuc2xpY2UoZm5zdHIuaW5kZXhPZignKCcpICsgMSwgZm5zdHIuaW5kZXhPZignKScpKS5tYXRjaChhcmdfbmFtZXNfcmVnKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBwcm9taXNlRHVtbXlGYWN0b3J5IGdlbmVyYXRlcyBhIHNpbXBsZSBwcm9taXNlIHdoaWNoIHJldHVybnMgaW5zdGFudGx5LlxuICogQHJldHVybiB7UHJvbWlzZX0gd2luZG93LnV0aWxzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwcm9taXNlRHVtbXlGYWN0b3J5KCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW1lbENhc2VUb1RhZ05hbWUoc3RyKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL1tBLVpdL2csIGxldHRlciA9PiBgLSR7bGV0dGVyLnRvTG93ZXJDYXNlKCl9YCk7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoL1swLTldKy9nLCBudW1iZXIgPT4gYC0ke251bWJlcn1gKTtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoL15bLV0vZywgYGApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFnTmFtZVRvQ2FtZWxDYXNlKHN0cikge1xuICAgIHN0ciA9IHN0ci5yZXBsYWNlKC8tLi9nLCBsZXR0ZXIgPT4gYCR7bGV0dGVyWzFdLnRvVXBwZXJDYXNlKCl9YCk7XG4gICAgcmV0dXJuIHN0cjtcbn1cbmV4cG9ydCBmdW5jdGlvbiB0YWdOYW1lVG9SZWFkYWJsZU5hbWUoc3RyKSB7XG4gICAgc3RyID0gc3RyLnJlcGxhY2UoLy0uL2csIGxldHRlciA9PiBgICR7bGV0dGVyWzFdLnRvVXBwZXJDYXNlKCl9YCkucmVwbGFjZSgvXi4vZywgbGV0dGVyID0+IGAke2xldHRlci50b1VwcGVyQ2FzZSgpfWApO1xuICAgIHJldHVybiBzdHI7XG59XG5cbmNvbnN0IGNvcHlQcm9wcyA9ICh0YXJnZXRDbGFzcywgc291cmNlQ2xhc3MpID0+IHtcbiAgICBsZXQgc291cmNlID0gc291cmNlQ2xhc3M7XG4gICAgbGV0IHByb3BOYW1lc1RhcmdldCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRhcmdldENsYXNzLnByb3RvdHlwZSkuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModGFyZ2V0Q2xhc3MucHJvdG90eXBlKSlcbiAgICB3aGlsZSAoc291cmNlLm5hbWUgIT09ICcnKSB7XG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZS5wcm90b3R5cGUpXG4gICAgICAgICAgICAuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlLnByb3RvdHlwZSkpXG4gICAgICAgICAgICAuZm9yRWFjaCgocHJvcCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wLm1hdGNoKC9eKD86Y29uc3RydWN0b3J8cHJvdG90eXBlfGFyZ3VtZW50c3xjYWxsZXJ8bmFtZXxiaW5kfGNhbGx8YXBwbHl8dG9TdHJpbmd8bGVuZ3RoKSQvKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKCFwcm9wTmFtZXNUYXJnZXQuaW5jbHVkZXMocHJvcCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJvcE5hbWVzVGFyZ2V0LnB1c2gocHJvcCk7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXRDbGFzcy5wcm90b3R5cGUsIHByb3AsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLnByb3RvdHlwZSwgcHJvcCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICBzb3VyY2UgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Yoc291cmNlKTtcbiAgICB9XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7QWJzdHJhY3RTREN9IGJhc2VDbGFzc1xuICogQHBhcmFtIHtBYnN0cmFjdFNEQ30gbWl4aW5zXG4gKiBAcmV0dXJucyB7QWJzdHJhY3RTREN9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhZ2lsZUFnZ3JlZ2F0aW9uKGJhc2VDbGFzcywgLi4ubWl4aW5zKSB7XG5cbiAgICBsZXQgYmFzZSA9IGNsYXNzIF9Db21iaW5lZCB7XG4gICAgICAgIGNvbnN0cnVjdG9yKC4uLl9hcmdzKSB7XG4gICAgICAgICAgICBsZXQgX21peGlucyA9IHt9O1xuICAgICAgICAgICAgbWl4aW5zLmZvckVhY2goKG1peGluKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IG5ld01peGluO1xuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgKG5ld01peGluID0gbmV3IG1peGluKCkpKTtcbiAgICAgICAgICAgICAgICBuZXdNaXhpbi5fdGFnTmFtZSA9IG1peGluLnByb3RvdHlwZS5fdGFnTmFtZTtcbiAgICAgICAgICAgICAgICBuZXdNaXhpbi5faXNNaXhpbiA9IHRydWU7XG4gICAgICAgICAgICAgICAgX21peGluc1ttaXhpbi5uYW1lXSA9IG5ld01peGluO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgbmV3IGJhc2VDbGFzcygpKTtcbiAgICAgICAgICAgIHRoaXMuX21peGlucyA9IF9taXhpbnM7XG4gICAgICAgIH1cblxuICAgICAgICBnZXQgbWl4aW5zKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21peGlucztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBjb3B5UHJvcHMoYmFzZSwgYmFzZUNsYXNzKTtcblxuICAgIG1peGlucy5mb3JFYWNoKChtaXhpbikgPT4ge1xuICAgICAgICBjb3B5UHJvcHMoYmFzZSwgbWl4aW4pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJhc2U7XG5cbn1cblxuZnVuY3Rpb24gY3NyZlNhZmVNZXRob2QobWV0aG9kKSB7XG4gICAgLy8gdGhlc2UgSFRUUCBtZXRob2RzIGRvIG5vdCByZXF1aXJlIENTUkYgcHJvdGVjdGlvblxuICAgIHJldHVybiAoL14oR0VUfEhFQUR8T1BUSU9OU3xUUkFDRSkkLy50ZXN0KG1ldGhvZCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXBsb2FkRmlsZUZvcm1EYXRhKGZvcm1EYXRhLCB1cmwsIG1ldGhvZCkge1xuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgICB1cmw6IHVybCwgIC8vU2VydmVyIHNjcmlwdCB0byBwcm9jZXNzIGRhdGFcbiAgICAgICAgdHlwZTogbWV0aG9kIHx8ICdQT1NUJyxcbiAgICAgICAgeGhyOiBmdW5jdGlvbiAoKSB7ICAvLyBDdXN0b20gWE1MSHR0cFJlcXVlc3RcbiAgICAgICAgICAgIHZhciBteVhociA9ICQuYWpheFNldHRpbmdzLnhocigpO1xuICAgICAgICAgICAgaWYgKG15WGhyLnVwbG9hZCkgeyAvLyBDaGVjayBpZiB1cGxvYWQgcHJvcGVydHkgZXhpc3RzXG4gICAgICAgICAgICAgICAgbXlYaHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NIYW5kbGluZ0Z1bmN0aW9uLCBmYWxzZSk7IC8vIEZvciBoYW5kbGluZyB0aGUgcHJvZ3Jlc3Mgb2YgdGhlIHVwbG9hZFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG15WGhyO1xuICAgICAgICB9LFxuICAgICAgICAvL0Zvcm0gZGF0YVxuICAgICAgICBkYXRhOiBmb3JtRGF0YSxcbiAgICAgICAgLy9PcHRpb25zIHRvIHRlbGwgalF1ZXJ5IG5vdCB0byBwcm9jZXNzIGRhdGEgb3Igd29ycnkgYWJvdXQgY29udGVudC10eXBlLlxuICAgICAgICBjYWNoZTogZmFsc2UsXG4gICAgICAgIGNvbnRlbnRUeXBlOiBmYWxzZSxcbiAgICAgICAgcHJvY2Vzc0RhdGE6IGZhbHNlLFxuICAgICAgICBiZWZvcmVTZW5kOiBmdW5jdGlvbih4aHIsIHNldHRpbmdzKSB7XG4gICAgICAgICAgICBpZiAoIWNzcmZTYWZlTWV0aG9kKHNldHRpbmdzLnR5cGUpICYmICF0aGlzLmNyb3NzRG9tYWluKSB7XG4gICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJYLUNTUkZUb2tlblwiLCB3aW5kb3cuQ1NSRl9UT0tFTik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gcHJvZ3Jlc3NIYW5kbGluZ0Z1bmN0aW9uKGUpIHtcbiAgICBpZiAoZS5sZW5ndGhDb21wdXRhYmxlKSB7XG4gICAgICAgIHZhciBwZXJjZW50VmFsID0gTWF0aC5yb3VuZCgoZS5sb2FkZWQgLyBlLnRvdGFsKSAqIDEwMCk7XG4gICAgICAgIHZhciAkcHJvZ3Jlc3NDb250YWluZXIgPSAkKCcucHJvZ3Jlc3MtY29udGFpbmVyJyk7XG4gICAgICAgIGlmIChwZXJjZW50VmFsID09PSAxMDApIHtcbiAgICAgICAgICAgICRwcm9ncmVzc0NvbnRhaW5lci5oaWRlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAkcHJvZ3Jlc3NDb250YWluZXIuc2hvdygpO1xuICAgICAgICB9XG5cbiAgICAgICAgcGVyY2VudFZhbCArPSAnJSc7XG5cbiAgICAgICAgJHByb2dyZXNzQ29udGFpbmVyLmZpbmQoJy5wcm9ncmVzcy1iYXInKS5jc3Moeyd3aWR0aCc6IHBlcmNlbnRWYWx9KS50ZXh0KHBlcmNlbnRWYWwpO1xuICAgIH1cbn1cblxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJZlBhcmFtTnVtYmVyQm9vbE9yU3RyaW5nKHBhcmFtRWxlbWVudCwgY29udHJvbGxlciA9IG51bGwpIHtcbiAgICBpZiAodHlwZW9mIHBhcmFtRWxlbWVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHBhcmFtRWxlbWVudDtcbiAgICB9XG5cbiAgICBpZihjb250cm9sbGVyICYmIHR5cGVvZiBjb250cm9sbGVyW3BhcmFtRWxlbWVudF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGlmKHR5cGVvZiBjb250cm9sbGVyW3BhcmFtRWxlbWVudF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBjb250cm9sbGVyW3BhcmFtRWxlbWVudF0uYmluZChjb250cm9sbGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29udHJvbGxlcltwYXJhbUVsZW1lbnRdO1xuICAgIH1cblxuICAgIGxldCBpc0Zsb2F0UmVnID0gL14tP1xcZCtcXC4/XFxkKyQvO1xuICAgIGxldCBpc0ludFJlZyA9IC9eLT9cXGQrJC87XG4gICAgbGV0IGlzQm9vbFJlZyA9IC9eKHRydWV8ZmFsc2UpJC87XG4gICAgbGV0IGlzU3RyaW5nUmVnID0gL14oWyddW14nXSpbJ10pfChbXCJdW15cIl0qW1wiXSkkLztcblxuICAgIGlmIChwYXJhbUVsZW1lbnQubWF0Y2goaXNCb29sUmVnKSkge1xuICAgICAgICByZXR1cm4gcGFyYW1FbGVtZW50ID09PSAndHJ1ZSc7XG4gICAgfSBlbHNlIGlmIChwYXJhbUVsZW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChwYXJhbUVsZW1lbnQudG9Mb3dlckNhc2UoKSA9PT0gJ25vbmUnKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSBpZiAocGFyYW1FbGVtZW50Lm1hdGNoKGlzSW50UmVnKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VJbnQocGFyYW1FbGVtZW50KTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtRWxlbWVudC5tYXRjaChpc0Zsb2F0UmVnKSkge1xuICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChwYXJhbUVsZW1lbnQpO1xuICAgIH0gZWxzZSBpZiAocGFyYW1FbGVtZW50Lm1hdGNoKGlzU3RyaW5nUmVnKSkge1xuICAgICAgICByZXR1cm4gcGFyYW1FbGVtZW50LnN1YnN0cigxLCBwYXJhbUVsZW1lbnQubGVuZ3RoIC0gMik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhcmFtRWxlbWVudDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHV1aWR2NCgpIHtcbiAgICByZXR1cm4gKFsxZTddICsgLTFlMyArIC00ZTMgKyAtOGUzICsgLTFlMTEpLnJlcGxhY2UoL1swMThdL2csIGMgPT5cbiAgICAgICAgKGMgXiBjcnlwdG8uZ2V0UmFuZG9tVmFsdWVzKG5ldyBVaW50OEFycmF5KDEpKVswXSAmIDE1ID4+IGMgLyA0KS50b1N0cmluZygxNilcbiAgICApO1xufVxuXG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckVycm9yc0luRm9ybSgkZm9ybSkge1xuICAgICRmb3JtLmZpbmQoJy5oYXMtZXJyb3InKS5yZW1vdmVDbGFzcygnaGFzLWVycm9yJykuZmluZCgnLmFsZXJ0LWRhbmdlcicpLnJlbW92ZSgpO1xuICAgICRmb3JtLmZpbmQoJy5ub24tZmllbGQtZXJyb3JzJykucmVtb3ZlKCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRFcnJvcnNJbkZvcm0oJGZvcm0sICRyZXNGb3JtKSB7XG4gICAgJHJlc0Zvcm0gID0gJCgnPGRpdj4nKS5hcHBlbmQoJHJlc0Zvcm0pO1xuXG4gICAgJGZvcm0uZmluZCgnLmhhcy1lcnJvcicpLnJlbW92ZUNsYXNzKCdoYXMtZXJyb3InKS5maW5kKCcuYWxlcnQtZGFuZ2VyJykuc2FmZVJlbW92ZSgpO1xuICAgICRmb3JtLmZpbmQoJy5ub24tZmllbGQtZXJyb3JzJykuc2FmZVJlbW92ZSgpO1xuICAgIGxldCAkZmlsZV9jb250YWluZXIgPSAkcmVzRm9ybS5maW5kKCdpbnB1dFt0eXBlPWZpbGVdJykucGFyZW50KCk7XG4gICAgJGZvcm0uZmluZCgnaW5wdXRbdHlwZT1maWxlXScpLnBhcmVudCgpLmVhY2goZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICQodGhpcykucmVwbGFjZVdpdGgoJGZpbGVfY29udGFpbmVyW2luZGV4XSk7XG4gICAgfSk7XG5cbiAgICBsZXQgaGFzTm9FcnJvciA9ICRyZXNGb3JtLmZpbmQoJy5ub24tZmllbGQtZXJyb3JzJykuaW5zZXJ0QWZ0ZXIoJGZvcm0uZmluZCgnLmhpZGRlbi1mb3JtLWZpZWxkcycpKS5sZW5ndGggPT09IDA7XG4gICAgJHJlc0Zvcm0uZmluZCgnLmhhcy1lcnJvcicpLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICBoYXNOb0Vycm9yID0gZmFsc2U7XG4gICAgICAgIGxldCAkcmVzRXJyb3JGaWVsZCA9ICQodGhpcyk7XG4gICAgICAgIGxldCBjbGFzc05hbWUgPSAkcmVzRXJyb3JGaWVsZC5kYXRhKCdhdXRvLWlkJyk7XG4gICAgICAgIGxldCAkZXJyb3JGaWVsZCA9ICRmb3JtLmZpbmQoJy5mb3JtLWdyb3VwLicgKyBjbGFzc05hbWUpO1xuICAgICAgICAkZXJyb3JGaWVsZC5hZGRDbGFzcygnaGFzLWVycm9yJyk7XG4gICAgICAgICRlcnJvckZpZWxkLmZpbmQoJy5mb3JtLWlucHV0LWNvbnRhaW5lcicpLmFwcGVuZCgkcmVzRXJyb3JGaWVsZC5maW5kKCcuYWxlcnQtZGFuZ2VyJykpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGhhc05vRXJyb3I7XG59Il0sIm5hbWVzIjpbIl8kYm9keSIsImFyZ19uYW1lc19yZWciLCJjb21tZW5kX3JlZyIsImdldEJvZHkiLCIkIiwiZ2V0UGFyYW1zTmFtZU9mRnVuY3Rpb24iLCJmdW5jIiwiZm5zdHIiLCJ0b1N0cmluZyIsInJlcGxhY2UiLCJyZXN1bHQiLCJzbGljZSIsImluZGV4T2YiLCJtYXRjaCIsInByb21pc2VEdW1teUZhY3RvcnkiLCJQcm9taXNlIiwicmVzb2x2ZSIsImNhbWVsQ2FzZVRvVGFnTmFtZSIsInN0ciIsImxldHRlciIsInRvTG93ZXJDYXNlIiwibnVtYmVyIiwidGFnTmFtZVRvQ2FtZWxDYXNlIiwidG9VcHBlckNhc2UiLCJ0YWdOYW1lVG9SZWFkYWJsZU5hbWUiLCJjb3B5UHJvcHMiLCJ0YXJnZXRDbGFzcyIsInNvdXJjZUNsYXNzIiwic291cmNlIiwicHJvcE5hbWVzVGFyZ2V0IiwiT2JqZWN0IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInByb3RvdHlwZSIsImNvbmNhdCIsImdldE93blByb3BlcnR5U3ltYm9scyIsIm5hbWUiLCJmb3JFYWNoIiwicHJvcCIsImluY2x1ZGVzIiwicHVzaCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJhZ2lsZUFnZ3JlZ2F0aW9uIiwiYmFzZUNsYXNzIiwibWl4aW5zIiwiYmFzZSIsIl9Db21iaW5lZCIsImNvbnN0cnVjdG9yIiwiX2FyZ3MiLCJfbWl4aW5zIiwibWl4aW4iLCJuZXdNaXhpbiIsImFzc2lnbiIsIl90YWdOYW1lIiwiX2lzTWl4aW4iLCJjc3JmU2FmZU1ldGhvZCIsIm1ldGhvZCIsInRlc3QiLCJ1cGxvYWRGaWxlRm9ybURhdGEiLCJmb3JtRGF0YSIsInVybCIsImFqYXgiLCJ0eXBlIiwieGhyIiwibXlYaHIiLCJhamF4U2V0dGluZ3MiLCJ1cGxvYWQiLCJhZGRFdmVudExpc3RlbmVyIiwicHJvZ3Jlc3NIYW5kbGluZ0Z1bmN0aW9uIiwiZGF0YSIsImNhY2hlIiwiY29udGVudFR5cGUiLCJwcm9jZXNzRGF0YSIsImJlZm9yZVNlbmQiLCJzZXR0aW5ncyIsImNyb3NzRG9tYWluIiwic2V0UmVxdWVzdEhlYWRlciIsIndpbmRvdyIsIkNTUkZfVE9LRU4iLCJlIiwibGVuZ3RoQ29tcHV0YWJsZSIsInBlcmNlbnRWYWwiLCJNYXRoIiwicm91bmQiLCJsb2FkZWQiLCJ0b3RhbCIsIiRwcm9ncmVzc0NvbnRhaW5lciIsImhpZGUiLCJzaG93IiwiZmluZCIsImNzcyIsInRleHQiLCJjaGVja0lmUGFyYW1OdW1iZXJCb29sT3JTdHJpbmciLCJwYXJhbUVsZW1lbnQiLCJjb250cm9sbGVyIiwiYmluZCIsImlzRmxvYXRSZWciLCJpc0ludFJlZyIsImlzQm9vbFJlZyIsImlzU3RyaW5nUmVnIiwidW5kZWZpbmVkIiwicGFyc2VJbnQiLCJwYXJzZUZsb2F0Iiwic3Vic3RyIiwibGVuZ3RoIiwidXVpZHY0IiwiYyIsImNyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsIlVpbnQ4QXJyYXkiLCJjbGVhckVycm9yc0luRm9ybSIsIiRmb3JtIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmUiLCJzZXRFcnJvcnNJbkZvcm0iLCIkcmVzRm9ybSIsImFwcGVuZCIsInNhZmVSZW1vdmUiLCIkZmlsZV9jb250YWluZXIiLCJwYXJlbnQiLCJlYWNoIiwiaW5kZXgiLCJyZXBsYWNlV2l0aCIsImhhc05vRXJyb3IiLCJpbnNlcnRBZnRlciIsIiRyZXNFcnJvckZpZWxkIiwiY2xhc3NOYW1lIiwiJGVycm9yRmllbGQiLCJhZGRDbGFzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_utils.js\n");

/***/ }),

/***/ "./src/simpleDomControl/sdc_view.js":
/*!******************************************!*\
  !*** ./src/simpleDomControl/sdc_view.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CONTROLLER_CLASS: () => (/* binding */ CONTROLLER_CLASS),\n/* harmony export */   DATA_CONTROLLER_KEY: () => (/* binding */ DATA_CONTROLLER_KEY),\n/* harmony export */   cleanCache: () => (/* binding */ cleanCache),\n/* harmony export */   getController: () => (/* binding */ getController),\n/* harmony export */   loadFilesFromController: () => (/* binding */ loadFilesFromController),\n/* harmony export */   reloadHTMLController: () => (/* binding */ reloadHTMLController),\n/* harmony export */   reloadMethodHTML: () => (/* binding */ reloadMethodHTML),\n/* harmony export */   replaceTagElementsInContainer: () => (/* binding */ replaceTagElementsInContainer),\n/* harmony export */   runControllerFillContent: () => (/* binding */ runControllerFillContent)\n/* harmony export */ });\n/* harmony import */ var _sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./sdc_controller.js */ \"./src/simpleDomControl/sdc_controller.js\");\n/* harmony import */ var _sdc_params_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./sdc_params.js */ \"./src/simpleDomControl/sdc_params.js\");\n/* harmony import */ var _sdc_main_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdc_main.js */ \"./src/simpleDomControl/sdc_main.js\");\n/* harmony import */ var _sdc_events_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./sdc_events.js */ \"./src/simpleDomControl/sdc_events.js\");\n\n\n\n\n\n/**\n * List of HTML files.\n * @type {{}}\n */\nlet htmlFiles = {};\nconst DATA_CONTROLLER_KEY = '_controller_';\nconst CONTROLLER_CLASS = '_sdc_controller_';\nfunction cleanCache() {\n  htmlFiles = {};\n}\n\n/**\n * findSdcTgs Finds all registered tags in a container. But it ignores\n * registered tags in registered tags. It collects all those\n * doms and returns a list of objects containing also the tag name the dom and the tag\n * names of the super controller\n *\n * @param {jquery} $container - jQuery container\n * @param {Array<string>} tagNameList - a string list with tag names.\n * @param {AbstractSDC} parentController - controller in surrounding\n * @return {Array} - a array of objects with all register tags found\n */\nfunction findSdcTgs($container, tagNameList, parentController) {\n  if (!$container) {\n    return [];\n  }\n  let $children = $container.children();\n  let emptyList = [];\n  $children.each(function (_, element) {\n    let $element = $(element);\n    let tagName = $element.prop('tagName').toLowerCase().split('_');\n    if ($.inArray(tagName[0], tagNameList) >= 0) {\n      emptyList.push({\n        tag: tagName[0],\n        super: tagName.splice(1) || [],\n        dom: $element\n      });\n    } else if (tagName[0].startsWith('this.')) {\n      $element.addClass(`_bind_to_update_handler sdc_uuid_${parentController._uuid}`);\n    } else {\n      emptyList = emptyList.concat(findSdcTgs($element, tagNameList, parentController));\n    }\n  });\n  return emptyList;\n}\n\n/**\n * replacePlaceholderController fills the parameter of the content\n * url this function uses the tag parameter\n *\n * @param controller - controller object\n * @param url - the origin content URL\n * @param urlValues - values for the url placeholder. In same order!!\n * @returns {string} - the correct URL with prefix.\n */\nfunction replacePlaceholderController(controller, url, urlValues) {\n  for (let key_idx in controller._urlParams) {\n    if (controller._urlParams.hasOwnProperty(key_idx)) {\n      let key = controller._urlParams[key_idx];\n      let re = RegExp(\"%\\\\(\" + key + \"\\\\)\\\\w\", \"gm\");\n      url = url.replace(re, \"\" + urlValues.shift());\n    }\n  }\n  return url;\n}\n\n/**\n * loadHTMLFile loads the HTML content file from the server via ajax request.\n *\n * If the HTML file is loaded already the function takes no action.\n *\n * @param path - a content URL from the controller.\n * @param {object} args - get args.\n * @param tag - a normalized tag-name as string.\n * @param hardReload - true if the file has to be reloaded every time.\n * @returns {Promise<Boolean>} - waits for the file to be loaded.\n */\nfunction loadHTMLFile(path, args, tag, hardReload) {\n  if (!path) {\n    return Promise.resolve(false);\n  } else if (htmlFiles[tag]) {\n    return Promise.resolve(htmlFiles[tag]);\n  }\n  args.VERSION = _sdc_main_js__WEBPACK_IMPORTED_MODULE_2__.app.VERSION;\n  args._method = 'content';\n  return $.get(path, args).then(function (data) {\n    if (!hardReload) {\n      htmlFiles[tag] = data;\n    }\n    return data;\n  }).catch(function (err) {\n    if (err.status === 301) {\n      const data = err.responseJSON;\n      (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_3__.trigger)('_RedirectOnView', data['url-link']);\n    }\n    (0,_sdc_events_js__WEBPACK_IMPORTED_MODULE_3__.trigger)('navLoaded', {\n      'controller_name': () => err.status\n    });\n    throw `<sdc-error data-code=\"${err.status}\">${err.responseText}</sdc-error>`;\n  });\n}\n\n/**\n * replaceAllTagElementsInContainer replaces all registered tags by the controller.\n * In this step the life-cycle starts.\n *\n * @param {jquery} $container - given container\n * @param {AbstractSDC} parentController - parent contoller surrounded the container\n */\nfunction replaceAllTagElementsInContainer($container, parentController) {\n  parentController = parentController || $container.data(DATA_CONTROLLER_KEY);\n  return replaceTagElementsInContainer(_sdc_main_js__WEBPACK_IMPORTED_MODULE_2__.app.tagNames, $container, parentController);\n}\n\n/**\n * parseContentUrl uses the content URL prefix to marge the\n * correct URL. Also parses the url parameter\n *\n * @param {AbstractSDC} controller - controller object\n * @returns {string} - the correct URL with prefix.\n */\nfunction parseContentUrl(controller) {\n  let url = controller.contentUrl;\n  if (controller && controller._urlParams.length === 0) {\n    let re = /%\\(([^)]+)\\)\\w/gm;\n    let matches;\n    controller._urlParams = [];\n    while (matches = re.exec(url)) {\n      controller._urlParams.push(matches[1]);\n      controller.contentReload = true;\n    }\n  }\n  let params = (0,_sdc_params_js__WEBPACK_IMPORTED_MODULE_1__.getUrlParam)(controller, controller.$container);\n  if (controller._urlParams.length) {\n    url = replacePlaceholderController(controller, url, params);\n  }\n  controller.parsedContentUrl = url;\n  return {\n    url: url,\n    args: params[params.length - 1]\n  };\n}\n\n/**\n *\n * @param {jquery} $elem\n * @return {AbstractSDC}\n */\nfunction getController($elem) {\n  if ($elem.hasClass(CONTROLLER_CLASS)) {\n    return $elem.data(`${DATA_CONTROLLER_KEY}`);\n  }\n  return $elem.closest(`.${CONTROLLER_CLASS}`).data(`${DATA_CONTROLLER_KEY}`);\n}\n\n/**\n * loadFilesFromController loads the content (HTML) of a\n * Controller. If you have an alternative content URL is registered, for this\n * controller the origin content URL is ignored.\n *\n * The content is saved as jQuery object to the controller.$content property of\n * the controller.\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n * @returns {Promise<jQuery>} - the promise waits to the files are loaded. it returns the jQuery object.\n */\nfunction loadFilesFromController(controller) {\n  let getElements = {\n    args: {}\n  };\n  if (controller.contentUrl) {\n    getElements = parseContentUrl(controller, controller.contentUrl);\n    controller.contentUrl = getElements.url;\n  }\n  return Promise.all([loadHTMLFile(controller.contentUrl, getElements.args, controller._tagName, controller.contentReload)]).then(function (results) {\n    let htmlFile = results[0];\n    if (htmlFile) {\n      try {\n        return $(htmlFile);\n      } catch {\n        return $('<div></div>').append(htmlFile);\n      }\n    }\n    return null;\n  });\n}\n\n/**\n * reloadHTMLController loads the content (HTML) of a\n * Controller. If you have an alternative content URL is registered, for this\n * controller the origin content URL is ignored.\n *\n *\n * @param {AbstractSDC} controller - a instance of a JavaScript controller object.\n *\n * @returns {Promise<jQuery>} - the promise waits to the files are loaded. it returns the jQuery object.\n */\nfunction reloadHTMLController(controller) {\n  if (controller.contentUrl) {\n    let getElements = parseContentUrl(controller, controller.contentUrl);\n    controller.contentUrl = getElements.url;\n    return loadHTMLFile(controller.contentUrl, getElements.args, controller._tagName, controller.contentReload);\n  }\n  return new Promise(resolve => {\n    resolve($());\n  });\n}\n\n/**\n *\n * @param {jquery} $element\n * @param {string} tagName\n * @param {Array<string>} superTagNameList\n * @param {AbstractSDC} parentController\n * @returns {boolean}\n */\nfunction runReplaceTagElementsInContainer($element, tagName, superTagNameList, parentController) {\n  let controller = $element.data(DATA_CONTROLLER_KEY);\n  if (controller) {\n    return replaceAllTagElementsInContainer($element, controller);\n  }\n  controller = (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__.controllerFactory)(parentController, $element, tagName, superTagNameList);\n  $element.data(DATA_CONTROLLER_KEY, controller);\n  $element.addClass(CONTROLLER_CLASS);\n  return (0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__.runControlFlowFunctions)(controller, $element);\n}\n\n/**\n * runControllerFillContent empties the registered tag and replaces it by the controller\n * content. It sets the CSS tags for the relation with the CSS files.\n *\n * @param {AbstractSDC} controller - js controller instance\n * @param {jquery} $html - jQuery loaded content\n * @return {Promise}\n */\nfunction runControllerFillContent(controller, $html) {\n  if ($html && $html.length > 0) {\n    controller.$container.empty();\n    controller.$container.attr(controller._tagName, '');\n    for (let mixinKey in controller._mixins) {\n      controller.$container.attr(controller._mixins[mixinKey]._tagName, '');\n    }\n    controller.$container.append($html);\n  }\n  return replaceAllTagElementsInContainer(controller.$container, controller);\n}\n\n/**\n * replaceTagElementsInContainer Finds all registered tags in a container. But it ignores\n * registered tags in registered tags. For each registered tag it loads the content.\n * Afterwards it starts the life cycle of the controller. I the next step it starts the\n * procedure for the child elements of the controller tag.\n *\n * @param {Array<string>} tagList - list of all registered tags\n * @param {jquery} $container - jQuery container to find the tags\n * @param {AbstractSDC} parentController - controller in surrounding\n */\nfunction replaceTagElementsInContainer(tagList, $container, parentController) {\n  return new Promise(resolve => {\n    let tagDescriptionElements = findSdcTgs($container, tagList, parentController);\n    let tagCount = tagDescriptionElements.length;\n    if (tagCount === 0) {\n      return resolve();\n    }\n    for (let elementIndex = 0; elementIndex < tagDescriptionElements.length; elementIndex++) {\n      runReplaceTagElementsInContainer(tagDescriptionElements[elementIndex].dom, tagDescriptionElements[elementIndex].tag, tagDescriptionElements[elementIndex].super, parentController).then(() => {\n        tagCount--;\n        if (tagCount === 0) {\n          return resolve();\n        }\n      });\n    }\n  });\n}\nfunction reloadMethodHTML(controller) {\n  return _reloadMethodHTML(controller, controller.$container);\n}\nfunction _reloadMethodHTML(controller, $dom) {\n  const plist = [];\n  $dom.find(`._bind_to_update_handler.sdc_uuid_${controller._uuid}`).each(function () {\n    const $this = $(this);\n    let result = undefined;\n    if ($this.hasClass(`_with_handler`)) {\n      result = $this.data('handler');\n    } else {\n      let controller_handler = this.tagName.toLowerCase().replace(/^this./, '');\n      if (controller[controller_handler]) {\n        result = controller[controller_handler];\n      }\n    }\n    if (typeof result === 'function') {\n      result = result.bind(controller)($this.data());\n    }\n    if (result !== undefined) {\n      plist.push(Promise.resolve(result).then(x => {\n        const $new_content = $(`<div></div>`);\n        $new_content.append(x);\n        return replaceTagElementsInContainer((0,_sdc_controller_js__WEBPACK_IMPORTED_MODULE_0__.tagList)(), $new_content, controller).then(() => {\n          return _reloadMethodHTML(controller, $new_content).then(() => {\n            $this.safeEmpty().text('').append(x);\n            return true;\n          });\n        });\n      }));\n    }\n  });\n  return Promise.all(plist);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/simpleDomControl/sdc_view.js\n");

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__webpack_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/************************************************************************/
/******/ 
/******/ // startup
/******/ // Load entry module and return exports
/******/ // This entry module can't be inlined because the eval-source-map devtool is used.
/******/ var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ var __webpack_exports__AbstractSDC = __webpack_exports__.AbstractSDC;
/******/ var __webpack_exports__allOff = __webpack_exports__.allOff;
/******/ var __webpack_exports__app = __webpack_exports__.app;
/******/ var __webpack_exports__checkIfParamNumberBoolOrString = __webpack_exports__.checkIfParamNumberBoolOrString;
/******/ var __webpack_exports__clearErrorsInForm = __webpack_exports__.clearErrorsInForm;
/******/ var __webpack_exports__controllerFactory = __webpack_exports__.controllerFactory;
/******/ var __webpack_exports__on = __webpack_exports__.on;
/******/ var __webpack_exports__runControlFlowFunctions = __webpack_exports__.runControlFlowFunctions;
/******/ var __webpack_exports__setErrorsInForm = __webpack_exports__.setErrorsInForm;
/******/ var __webpack_exports__setEvent = __webpack_exports__.setEvent;
/******/ var __webpack_exports__socketReconnect = __webpack_exports__.socketReconnect;
/******/ var __webpack_exports__test_utils = __webpack_exports__.test_utils;
/******/ var __webpack_exports__trigger = __webpack_exports__.trigger;
/******/ export { __webpack_exports__AbstractSDC as AbstractSDC, __webpack_exports__allOff as allOff, __webpack_exports__app as app, __webpack_exports__checkIfParamNumberBoolOrString as checkIfParamNumberBoolOrString, __webpack_exports__clearErrorsInForm as clearErrorsInForm, __webpack_exports__controllerFactory as controllerFactory, __webpack_exports__on as on, __webpack_exports__runControlFlowFunctions as runControlFlowFunctions, __webpack_exports__setErrorsInForm as setErrorsInForm, __webpack_exports__setEvent as setEvent, __webpack_exports__socketReconnect as socketReconnect, __webpack_exports__test_utils as test_utils, __webpack_exports__trigger as trigger };
/******/ 

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBQUE7U0FDQTs7U0FFQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTtTQUNBO1NBQ0E7U0FDQTs7U0FFQTtTQUNBOztTQUVBO1NBQ0E7U0FDQTs7Ozs7VUN0QkE7VUFDQTtVQUNBO1VBQ0E7VUFDQSx5Q0FBeUMsd0NBQXdDO1VBQ2pGO1VBQ0E7VUFDQTs7Ozs7VUNQQTs7Ozs7VUNBQTtVQUNBO1VBQ0E7VUFDQSx1REFBdUQsaUJBQWlCO1VBQ3hFO1VBQ0EsZ0RBQWdELGFBQWE7VUFDN0Q7Ozs7O1NFTkE7U0FDQTtTQUNBO1NBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly8vd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly8vd2VicGFjay9iZWZvcmUtc3RhcnR1cCIsIndlYnBhY2s6Ly8vd2VicGFjay9zdGFydHVwIiwid2VicGFjazovLy93ZWJwYWNrL2FmdGVyLXN0YXJ0dXAiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCIiLCIvLyBzdGFydHVwXG4vLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8vIFRoaXMgZW50cnkgbW9kdWxlIGNhbid0IGJlIGlubGluZWQgYmVjYXVzZSB0aGUgZXZhbC1zb3VyY2UtbWFwIGRldnRvb2wgaXMgdXNlZC5cbnZhciBfX3dlYnBhY2tfZXhwb3J0c19fID0gX193ZWJwYWNrX3JlcXVpcmVfXyhcIi4vc3JjL2luZGV4LmpzXCIpO1xuIiwiIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9